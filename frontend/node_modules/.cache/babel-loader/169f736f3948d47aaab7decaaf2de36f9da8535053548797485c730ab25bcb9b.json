{"ast":null,"code":"import axios from'axios';import{stockCache,CACHE_KEYS}from'../utils/stockCache';import{message}from'antd';// 令牌管理\nconst TOKEN_KEY='auth_token';const USER_INFO_KEY='userInfo';const AUTH_LAST_VERIFIED_KEY='auth_last_verified';// 配置常量\nconst REQUEST_TIMEOUT=15000;// 请求超时时间（毫秒）\nconst MAX_RETRY_COUNT=2;// 最大重试次数\nconst RETRY_DELAY=1000;// 重试延迟（毫秒）\nexport const tokenManager={getToken:()=>{return localStorage.getItem(TOKEN_KEY);},setToken:token=>{if(!token){console.warn('尝试设置空token，操作被忽略');return;}localStorage.setItem(TOKEN_KEY,token);// 记录token设置时间\nlocalStorage.setItem('token_timestamp',Date.now().toString());console.log('Token已设置，时间戳:',Date.now());},removeToken:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem('token_timestamp');localStorage.removeItem(USER_INFO_KEY);localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);console.log('Token和相关认证信息已清除');},isAuthenticated:()=>{const token=localStorage.getItem(TOKEN_KEY);if(!token){console.log('没有找到token，未认证');return false;}// 检查token格式是否有效（简单验证）\ntry{// JWT格式验证：确保token是由三部分组成的点分隔字符串\nconst parts=token.split('.');if(parts.length!==3){console.warn('无效的token格式，清除token');tokenManager.removeToken();return false;}// 检查token是否过期（通过解析JWT的payload）\ntry{const payload=JSON.parse(atob(parts[1]));console.log('解析JWT payload成功:',{exp:payload.exp?new Date(payload.exp*1000).toISOString():'无过期时间',iat:payload.iat?new Date(payload.iat*1000).toISOString():'无创建时间',sub:payload.sub||'无主题',currentTime:new Date().toISOString()});if(payload.exp&&payload.exp*1000<Date.now()){console.warn('token已过期，清除token');tokenManager.removeToken();return false;}}catch(e){console.warn('无法解析token payload:',e);// 继续使用token，让服务器决定是否有效\n}// 检查是否有用户信息\nconst userInfo=localStorage.getItem(USER_INFO_KEY);if(!userInfo){console.warn('找到有效token但没有用户信息');// 仍然返回true，让应用尝试验证token\n}console.log('Token验证通过，用户已认证');return true;}catch(e){console.error('token验证出错:',e);return false;}},// 获取token过期时间\ngetTokenExpiration:()=>{const token=localStorage.getItem(TOKEN_KEY);if(!token)return null;try{const parts=token.split('.');if(parts.length!==3)return null;const payload=JSON.parse(atob(parts[1]));return payload.exp?payload.exp*1000:null;}catch(e){console.error('获取token过期时间失败:',e);return null;}},// 检查token是否即将过期（5分钟内）\nisTokenExpiringSoon:()=>{const expiration=tokenManager.getTokenExpiration();if(!expiration)return false;const fiveMinutes=5*60*1000;return expiration-Date.now()<fiveMinutes;}};// 创建axios实例\nconst api=axios.create({baseURL:'http://localhost:5000/api',// 直接连接后端，绕过代理问题\ntimeout:REQUEST_TIMEOUT,// 15秒超时\nheaders:{'Content-Type':'application/json'},withCredentials:false});// 请求重试函数\nconst retryRequest=async function(config){let retryCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{return await axios(config);}catch(error){// 只有在网络错误或5xx服务器错误时重试\nconst isNetworkError=!error.response;const isServerError=error.response&&error.response.status>=500;const isTimeoutError=error.code==='TIMEOUT'||error.code==='ECONNABORTED';if((isNetworkError||isServerError||isTimeoutError)&&retryCount<MAX_RETRY_COUNT){var _error$response;const delay=RETRY_DELAY*Math.pow(2,retryCount);// 指数退避\nconsole.log(`请求失败，${delay/1000}秒后重试 (${retryCount+1}/${MAX_RETRY_COUNT})`);console.log('错误详情:',{isNetworkError,isServerError,isTimeoutError,errorCode:error.code,errorMessage:error.message,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status});await new Promise(resolve=>setTimeout(resolve,delay));return retryRequest(config,retryCount+1);}throw error;}};// 请求拦截器 - 添加认证令牌\napi.interceptors.request.use(config=>{var _config$method;// 添加请求时间戳，用于调试\nconfig.headers=config.headers||{};config.headers['X-Request-Time']=new Date().toISOString();console.log('=== API请求拦截器 ===');console.log('请求:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);// 添加认证令牌\nconst token=tokenManager.getToken();if(token){config.headers.Authorization=`Bearer ${token}`;console.log('添加Authorization头:',`Bearer ${token.substring(0,20)}...`);}else{console.log('没有token，跳过Authorization头');}console.log('最终请求头:',config.headers);return config;},error=>{console.error('请求拦截器错误:',error);return Promise.reject(error);});// 响应拦截器 - 处理认证错误\napi.interceptors.response.use(response=>{console.log('API响应:',response.status,response.config.url);return response;},error=>{var _error$response2,_error$config,_error$response3;console.error('API错误:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status,(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,error.message);// 处理认证错误\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===401){var _error$config2;console.warn('收到401未授权响应，清除认证状态');// 令牌过期或无效，清除本地令牌和用户信息\ntokenManager.removeToken();localStorage.removeItem(USER_INFO_KEY);localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);// 如果不是验证接口的请求，显示提示并重定向\nif(((_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.url)!=='/auth/verify'){message.error('登录已过期，请重新登录');// 使用延迟重定向，确保消息能够显示\nsetTimeout(()=>{// 保存当前URL，以便登录后返回\nconst currentPath=window.location.pathname;if(currentPath!=='/login'){sessionStorage.setItem('redirectAfterLogin',currentPath);}window.location.href='/login';},1500);}}// 处理网络错误\nelse if(!error.response){console.error('网络错误:',error.message);// 网络错误不自动清除认证状态\n}// 处理服务器错误\nelse if(error.response.status>=500){console.error('服务器错误:',error.response.status,error.response.data);message.error('服务器暂时不可用，请稍后重试');}return Promise.reject(error);});// 数据类型定义\n// API服务类\nclass ApiService{// 健康检查\nasync healthCheck(){const response=await api.get('/health');return response.data;}// 获取关注列表\nasync getWatchlist(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;console.log('=== 前端关注列表API调试 ===');console.log('当前token:',tokenManager.getToken());console.log('认证状态:',tokenManager.isAuthenticated());try{// 使用重试机制\nconst response=await retryRequest({method:'get',url:'http://localhost:5000/api/watchlist',timeout:REQUEST_TIMEOUT,headers:{'Content-Type':'application/json','Authorization':tokenManager.getToken()?`Bearer ${tokenManager.getToken()}`:undefined}});console.log('关注列表API响应:',response.status,response.data);return response.data;}catch(error){var _error$response4,_error$response5;console.error('关注列表API错误:',(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status,(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data,error.message);throw error;}}// 搜索股票\nasync searchStocks(keyword){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const cacheKey=CACHE_KEYS.SEARCH_RESULTS(keyword);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的搜索结果: ${keyword}`);return cached;}const response=await api.get('/stocks/search',{params:{keyword,limit}});const data=response.data;// 缓存搜索结果 - 统一使用5分钟缓存时间\nstockCache.set(cacheKey,data,{tradingCacheDuration:5,nonTradingCacheDuration:5});return data;}// 获取股票详情\nasync getStockDetail(code){const cacheKey=CACHE_KEYS.STOCK_DETAIL(code);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的股票详情: ${code}`);return cached;}const response=await api.get(`/stocks/${code}`);const data=response.data;// 缓存股票详情\nstockCache.set(cacheKey,data);return data;}// 获取股票历史数据\nasync getStockHistory(code){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1y';const cacheKey=CACHE_KEYS.STOCK_HISTORY(code,period);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的历史数据: ${code} - ${period}`);return cached;}const response=await api.get(`/stocks/${code}/history`,{params:{period}});const data=response.data;// 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\nstockCache.set(cacheKey,data,{tradingCacheDuration:10,nonTradingCacheDuration:60});return data;}// 批量获取股票数据\nasync getBatchStocks(codes){const response=await api.post('/stocks/batch',{codes});return response.data;}// 添加股票到关注列表\nasync addToWatchlist(code){let industry=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const response=await api.post('/watchlist',{code,industry});return response.data;}// 从关注列表删除股票\nasync removeFromWatchlist(code){const response=await api.delete(`/watchlist/${code}`);return response.data;}// 切换股票置顶状态\nasync togglePinStock(code){const response=await api.post(`/watchlist/${code}/pin`);return response.data;}// 获取市场概览\nasync getMarketOverview(){const cacheKey=CACHE_KEYS.MARKET_OVERVIEW;// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log('使用缓存的市场概览数据');return cached;}const response=await api.get('/market/overview');const data=response.data;// 缓存市场概览\nstockCache.set(cacheKey,data);return data;}// 清空缓存\nasync clearCache(){const response=await api.post('/cache/clear');return response.data;}// 获取API统计\nasync getApiStats(){let hours=arguments.length>0&&arguments[0]!==undefined?arguments[0]:24;const response=await api.get('/stats',{params:{hours}});return response.data;}}/**\r\n * 安全的API调用封装\r\n * 提供统一的错误处理和返回结构\r\n */export const safeApiCall=async apiCall=>{try{const result=await apiCall();return{success:true,data:result};}catch(error){var _error$response6,_error$response6$data;console.error('API调用失败:',error);// 检查是否为网络错误\nconst isNetworkError=!error.response;if(isNetworkError){return{success:false,error:'网络连接错误，请检查您的网络连接',networkError:true};}// 处理服务器返回的错误\nconst errorMessage=((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||error.message||'未知错误';return{success:false,error:errorMessage};}};// 导出API服务实例\nexport const apiService=new ApiService();export default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","message","TOKEN_KEY","USER_INFO_KEY","AUTH_LAST_VERIFIED_KEY","REQUEST_TIMEOUT","MAX_RETRY_COUNT","RETRY_DELAY","tokenManager","getToken","localStorage","getItem","setToken","token","console","warn","setItem","Date","now","toString","log","removeToken","removeItem","isAuthenticated","parts","split","length","payload","JSON","parse","atob","exp","toISOString","iat","sub","currentTime","e","userInfo","error","getTokenExpiration","isTokenExpiringSoon","expiration","fiveMinutes","api","create","baseURL","timeout","headers","withCredentials","retryRequest","config","retryCount","arguments","undefined","isNetworkError","response","isServerError","status","isTimeoutError","code","_error$response","delay","Math","pow","errorCode","errorMessage","Promise","resolve","setTimeout","interceptors","request","use","_config$method","method","toUpperCase","url","Authorization","substring","reject","_error$response2","_error$config","_error$response3","_error$config2","currentPath","window","location","pathname","sessionStorage","href","data","ApiService","healthCheck","get","getWatchlist","forceRefresh","_error$response4","_error$response5","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","togglePinStock","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","safeApiCall","apiCall","result","success","_error$response6","_error$response6$data","networkError","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\nimport { message } from 'antd';\r\n\r\n// 令牌管理\r\nconst TOKEN_KEY = 'auth_token';\r\nconst USER_INFO_KEY = 'userInfo';\r\nconst AUTH_LAST_VERIFIED_KEY = 'auth_last_verified';\r\n\r\n// 配置常量\r\nconst REQUEST_TIMEOUT = 15000; // 请求超时时间（毫秒）\r\nconst MAX_RETRY_COUNT = 2; // 最大重试次数\r\nconst RETRY_DELAY = 1000; // 重试延迟（毫秒）\r\n\r\nexport const tokenManager = {\r\n  getToken: (): string | null => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  setToken: (token: string): void => {\r\n    if (!token) {\r\n      console.warn('尝试设置空token，操作被忽略');\r\n      return;\r\n    }\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    // 记录token设置时间\r\n    localStorage.setItem('token_timestamp', Date.now().toString());\r\n    console.log('Token已设置，时间戳:', Date.now());\r\n  },\r\n  \r\n  removeToken: (): void => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('token_timestamp');\r\n    localStorage.removeItem(USER_INFO_KEY);\r\n    localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\r\n    console.log('Token和相关认证信息已清除');\r\n  },\r\n  \r\n  isAuthenticated: (): boolean => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (!token) {\r\n      console.log('没有找到token，未认证');\r\n      return false;\r\n    }\r\n    \r\n    // 检查token格式是否有效（简单验证）\r\n    try {\r\n      // JWT格式验证：确保token是由三部分组成的点分隔字符串\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) {\r\n        console.warn('无效的token格式，清除token');\r\n        tokenManager.removeToken();\r\n        return false;\r\n      }\r\n      \r\n      // 检查token是否过期（通过解析JWT的payload）\r\n      try {\r\n        const payload = JSON.parse(atob(parts[1]));\r\n        console.log('解析JWT payload成功:', { \r\n          exp: payload.exp ? new Date(payload.exp * 1000).toISOString() : '无过期时间',\r\n          iat: payload.iat ? new Date(payload.iat * 1000).toISOString() : '无创建时间',\r\n          sub: payload.sub || '无主题',\r\n          currentTime: new Date().toISOString()\r\n        });\r\n        \r\n        if (payload.exp && payload.exp * 1000 < Date.now()) {\r\n          console.warn('token已过期，清除token');\r\n          tokenManager.removeToken();\r\n          return false;\r\n        }\r\n      } catch (e) {\r\n        console.warn('无法解析token payload:', e);\r\n        // 继续使用token，让服务器决定是否有效\r\n      }\r\n      \r\n      // 检查是否有用户信息\r\n      const userInfo = localStorage.getItem(USER_INFO_KEY);\r\n      if (!userInfo) {\r\n        console.warn('找到有效token但没有用户信息');\r\n        // 仍然返回true，让应用尝试验证token\r\n      }\r\n      \r\n      console.log('Token验证通过，用户已认证');\r\n      return true;\r\n    } catch (e) {\r\n      console.error('token验证出错:', e);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // 获取token过期时间\r\n  getTokenExpiration: (): number | null => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (!token) return null;\r\n    \r\n    try {\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) return null;\r\n      \r\n      const payload = JSON.parse(atob(parts[1]));\r\n      return payload.exp ? payload.exp * 1000 : null;\r\n    } catch (e) {\r\n      console.error('获取token过期时间失败:', e);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // 检查token是否即将过期（5分钟内）\r\n  isTokenExpiringSoon: (): boolean => {\r\n    const expiration = tokenManager.getTokenExpiration();\r\n    if (!expiration) return false;\r\n    \r\n    const fiveMinutes = 5 * 60 * 1000;\r\n    return expiration - Date.now() < fiveMinutes;\r\n  }\r\n};\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // 直接连接后端，绕过代理问题\r\n  timeout: REQUEST_TIMEOUT, // 15秒超时\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// 请求重试函数\r\nconst retryRequest = async (config: AxiosRequestConfig, retryCount: number = 0): Promise<AxiosResponse> => {\r\n  try {\r\n    return await axios(config);\r\n  } catch (error: any) {\r\n    // 只有在网络错误或5xx服务器错误时重试\r\n    const isNetworkError = !error.response;\r\n    const isServerError = error.response && error.response.status >= 500;\r\n    const isTimeoutError = error.code === 'TIMEOUT' || error.code === 'ECONNABORTED';\r\n    \r\n    if ((isNetworkError || isServerError || isTimeoutError) && retryCount < MAX_RETRY_COUNT) {\r\n      const delay = RETRY_DELAY * Math.pow(2, retryCount); // 指数退避\r\n      console.log(`请求失败，${delay/1000}秒后重试 (${retryCount + 1}/${MAX_RETRY_COUNT})`);\r\n      console.log('错误详情:', {\r\n        isNetworkError,\r\n        isServerError,\r\n        isTimeoutError,\r\n        errorCode: error.code,\r\n        errorMessage: error.message,\r\n        status: error.response?.status\r\n      });\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n      return retryRequest(config, retryCount + 1);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 请求拦截器 - 添加认证令牌\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 添加请求时间戳，用于调试\r\n    config.headers = config.headers || {};\r\n    config.headers['X-Request-Time'] = new Date().toISOString();\r\n    \r\n    console.log('=== API请求拦截器 ===');\r\n    console.log('请求:', config.method?.toUpperCase(), config.url);\r\n    \r\n    // 添加认证令牌\r\n    const token = tokenManager.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n      console.log('添加Authorization头:', `Bearer ${token.substring(0, 20)}...`);\r\n    } else {\r\n      console.log('没有token，跳过Authorization头');\r\n    }\r\n    \r\n    console.log('最终请求头:', config.headers);\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求拦截器错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 处理认证错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    \r\n    // 处理认证错误\r\n    if (error.response?.status === 401) {\r\n      console.warn('收到401未授权响应，清除认证状态');\r\n      \r\n      // 令牌过期或无效，清除本地令牌和用户信息\r\n      tokenManager.removeToken();\r\n      localStorage.removeItem(USER_INFO_KEY);\r\n      localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\r\n      \r\n      // 如果不是验证接口的请求，显示提示并重定向\r\n      if (error.config?.url !== '/auth/verify') {\r\n        message.error('登录已过期，请重新登录');\r\n        \r\n        // 使用延迟重定向，确保消息能够显示\r\n        setTimeout(() => {\r\n          // 保存当前URL，以便登录后返回\r\n          const currentPath = window.location.pathname;\r\n          if (currentPath !== '/login') {\r\n            sessionStorage.setItem('redirectAfterLogin', currentPath);\r\n          }\r\n          \r\n          window.location.href = '/login';\r\n        }, 1500);\r\n      }\r\n    }\r\n    // 处理网络错误\r\n    else if (!error.response) {\r\n      console.error('网络错误:', error.message);\r\n      // 网络错误不自动清除认证状态\r\n    }\r\n    // 处理服务器错误\r\n    else if (error.response.status >= 500) {\r\n      console.error('服务器错误:', error.response.status, error.response.data);\r\n      message.error('服务器暂时不可用，请稍后重试');\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n  is_pinned?: boolean;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    console.log('=== 前端关注列表API调试 ===');\r\n    console.log('当前token:', tokenManager.getToken());\r\n    console.log('认证状态:', tokenManager.isAuthenticated());\r\n    \r\n    try {\r\n      // 使用重试机制\r\n      const response = await retryRequest({\r\n        method: 'get',\r\n        url: 'http://localhost:5000/api/watchlist',\r\n        timeout: REQUEST_TIMEOUT,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': tokenManager.getToken() ? `Bearer ${tokenManager.getToken()}` : undefined\r\n        }\r\n      });\r\n      \r\n      console.log('关注列表API响应:', response.status, response.data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('关注列表API错误:', error.response?.status, error.response?.data, error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 切换股票置顶状态\r\n  async togglePinStock(code: string): Promise<ApiResponse<{ code: string; is_pinned: boolean }>> {\r\n    const response = await api.post(`/watchlist/${code}/pin`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n/**\r\n * 安全的API调用封装\r\n * 提供统一的错误处理和返回结构\r\n */\r\nexport const safeApiCall = async <T>(apiCall: () => Promise<T>): Promise<{ success: boolean; data?: T; error?: string; networkError?: boolean }> => {\r\n  try {\r\n    const result = await apiCall();\r\n    return { success: true, data: result };\r\n  } catch (error: any) {\r\n    console.error('API调用失败:', error);\r\n    \r\n    // 检查是否为网络错误\r\n    const isNetworkError = !error.response;\r\n    if (isNetworkError) {\r\n      return {\r\n        success: false,\r\n        error: '网络连接错误，请检查您的网络连接',\r\n        networkError: true\r\n      };\r\n    }\r\n    \r\n    // 处理服务器返回的错误\r\n    const errorMessage = error.response?.data?.message || error.message || '未知错误';\r\n    return {\r\n      success: false,\r\n      error: errorMessage\r\n    };\r\n  }\r\n};\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}