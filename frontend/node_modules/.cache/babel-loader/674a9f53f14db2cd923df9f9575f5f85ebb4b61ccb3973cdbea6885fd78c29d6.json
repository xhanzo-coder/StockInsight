{"ast":null,"code":"\"use client\";\n\nimport React, { useContext } from 'react';\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport { unstableSetRender } from '../config-provider/UnstableContext';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom,\n    showProgress,\n    pauseOnHover\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom,\n    showProgress,\n    pauseOnHover\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    notificationConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('notification');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalNotification(Object.assign(Object.assign(Object.assign({}, notificationConfig), {\n    prefixCls\n  }), appConfig.notification));\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return api[method].apply(api, args);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    notificationConfig: notificationConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      const reactRender = unstableSetRender();\n      reactRender(/*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nconst destroy = key => {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n};\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\nlet _actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  _actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nconst actWrapper = _actWrapper;\nexport { actWrapper };\nlet _actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  _actDestroy = () => {\n    notification = null;\n  };\n}\nconst actDestroy = _actDestroy;\nexport { actDestroy };\nexport default staticMethods;","map":{"version":3,"names":["React","useContext","AppConfigContext","ConfigProvider","ConfigContext","globalConfig","warnContext","unstableSetRender","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","getContainer","rtl","maxCount","top","bottom","showProgress","pauseOnHover","mergedContainer","document","body","GlobalHolder","forwardRef","props","ref","notificationConfig","sync","getPrefixCls","prefixCls","appConfig","api","holder","Object","assign","useEffect","useImperativeHandle","instance","keys","forEach","method","_len","arguments","length","args","Array","_key","apply","GlobalHolderWrapper","_","setNotificationConfig","useState","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","dom","createElement","iconPrefixCls","holderRender","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","reactRender","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","_actWrapper","wrapper","actWrapper","_actDestroy","actDestroy"],"sources":["E:/AICode/StockInsight/frontend/node_modules/antd/es/notification/index.js"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useContext } from 'react';\r\nimport { AppConfigContext } from '../app/context';\r\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\r\nimport { unstableSetRender } from '../config-provider/UnstableContext';\r\nimport PurePanel from './PurePanel';\r\nimport useNotification, { useInternalNotification } from './useNotification';\r\nlet notification = null;\r\nlet act = callback => callback();\r\nlet taskQueue = [];\r\nlet defaultGlobalConfig = {};\r\nfunction getGlobalContext() {\r\n  const {\r\n    getContainer,\r\n    rtl,\r\n    maxCount,\r\n    top,\r\n    bottom,\r\n    showProgress,\r\n    pauseOnHover\r\n  } = defaultGlobalConfig;\r\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\r\n  return {\r\n    getContainer: () => mergedContainer,\r\n    rtl,\r\n    maxCount,\r\n    top,\r\n    bottom,\r\n    showProgress,\r\n    pauseOnHover\r\n  };\r\n}\r\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\r\n  const {\r\n    notificationConfig,\r\n    sync\r\n  } = props;\r\n  const {\r\n    getPrefixCls\r\n  } = useContext(ConfigContext);\r\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('notification');\r\n  const appConfig = useContext(AppConfigContext);\r\n  const [api, holder] = useInternalNotification(Object.assign(Object.assign(Object.assign({}, notificationConfig), {\r\n    prefixCls\r\n  }), appConfig.notification));\r\n  React.useEffect(sync, []);\r\n  React.useImperativeHandle(ref, () => {\r\n    const instance = Object.assign({}, api);\r\n    Object.keys(instance).forEach(method => {\r\n      instance[method] = (...args) => {\r\n        sync();\r\n        return api[method].apply(api, args);\r\n      };\r\n    });\r\n    return {\r\n      instance,\r\n      sync\r\n    };\r\n  });\r\n  return holder;\r\n});\r\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\r\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\r\n  const sync = () => {\r\n    setNotificationConfig(getGlobalContext);\r\n  };\r\n  React.useEffect(sync, []);\r\n  const global = globalConfig();\r\n  const rootPrefixCls = global.getRootPrefixCls();\r\n  const rootIconPrefixCls = global.getIconPrefixCls();\r\n  const theme = global.getTheme();\r\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\r\n    ref: ref,\r\n    sync: sync,\r\n    notificationConfig: notificationConfig\r\n  });\r\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\r\n    prefixCls: rootPrefixCls,\r\n    iconPrefixCls: rootIconPrefixCls,\r\n    theme: theme\r\n  }, global.holderRender ? global.holderRender(dom) : dom);\r\n});\r\nfunction flushNotice() {\r\n  if (!notification) {\r\n    const holderFragment = document.createDocumentFragment();\r\n    const newNotification = {\r\n      fragment: holderFragment\r\n    };\r\n    notification = newNotification;\r\n    // Delay render to avoid sync issue\r\n    act(() => {\r\n      const reactRender = unstableSetRender();\r\n      reactRender(/*#__PURE__*/React.createElement(GlobalHolderWrapper, {\r\n        ref: node => {\r\n          const {\r\n            instance,\r\n            sync\r\n          } = node || {};\r\n          Promise.resolve().then(() => {\r\n            if (!newNotification.instance && instance) {\r\n              newNotification.instance = instance;\r\n              newNotification.sync = sync;\r\n              flushNotice();\r\n            }\r\n          });\r\n        }\r\n      }), holderFragment);\r\n    });\r\n    return;\r\n  }\r\n  // Notification not ready\r\n  if (!notification.instance) {\r\n    return;\r\n  }\r\n  // >>> Execute task\r\n  taskQueue.forEach(task => {\r\n    switch (task.type) {\r\n      case 'open':\r\n        {\r\n          act(() => {\r\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\r\n          });\r\n          break;\r\n        }\r\n      case 'destroy':\r\n        act(() => {\r\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\r\n        });\r\n        break;\r\n    }\r\n  });\r\n  // Clean up\r\n  taskQueue = [];\r\n}\r\n// ==============================================================================\r\n// ==                                  Export                                  ==\r\n// ==============================================================================\r\nfunction setNotificationGlobalConfig(config) {\r\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\r\n  // Trigger sync for it\r\n  act(() => {\r\n    var _a;\r\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\r\n  });\r\n}\r\nfunction open(config) {\r\n  const global = globalConfig();\r\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\r\n    warnContext('notification');\r\n  }\r\n  taskQueue.push({\r\n    type: 'open',\r\n    config\r\n  });\r\n  flushNotice();\r\n}\r\nconst destroy = key => {\r\n  taskQueue.push({\r\n    type: 'destroy',\r\n    key\r\n  });\r\n  flushNotice();\r\n};\r\nconst methods = ['success', 'info', 'warning', 'error'];\r\nconst baseStaticMethods = {\r\n  open,\r\n  destroy,\r\n  config: setNotificationGlobalConfig,\r\n  useNotification,\r\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\r\n};\r\nconst staticMethods = baseStaticMethods;\r\nmethods.forEach(type => {\r\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\r\n    type\r\n  }));\r\n});\r\n// ==============================================================================\r\n// ==                                   Test                                   ==\r\n// ==============================================================================\r\nconst noop = () => {};\r\nlet _actWrapper = noop;\r\nif (process.env.NODE_ENV === 'test') {\r\n  _actWrapper = wrapper => {\r\n    act = wrapper;\r\n  };\r\n}\r\nconst actWrapper = _actWrapper;\r\nexport { actWrapper };\r\nlet _actDestroy = noop;\r\nif (process.env.NODE_ENV === 'test') {\r\n  _actDestroy = () => {\r\n    notification = null;\r\n  };\r\n}\r\nconst actDestroy = _actDestroy;\r\nexport { actDestroy };\r\nexport default staticMethods;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}