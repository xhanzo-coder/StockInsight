{"ast":null,"code":"/**\n * 网络连接诊断工具\n * 用于诊断前端到后端的网络连接问题\n */\n\nexport class NetworkDiagnostic {\n  /**\n   * 运行完整的网络诊断\n   */\n  static async runFullDiagnostic() {\n    const results = [];\n\n    // 1. 测试后端基础连接\n    results.push(await this.testBackendConnection());\n\n    // 2. 测试健康检查接口\n    results.push(await this.testHealthCheck());\n\n    // 3. 测试CORS配置\n    results.push(await this.testCORS());\n\n    // 4. 测试认证接口\n    results.push(await this.testAuthAPI());\n\n    // 5. 测试关注列表接口（无token）\n    results.push(await this.testWatchlistNoToken());\n    return results;\n  }\n\n  /**\n   * 测试后端基础连接\n   */\n  static async testBackendConnection() {\n    const startTime = Date.now();\n    try {\n      const response = await fetch(this.BACKEND_URL, {\n        method: 'GET',\n        mode: 'no-cors',\n        signal: AbortSignal.timeout(5000)\n      });\n      const duration = Date.now() - startTime;\n      return {\n        test: '后端基础连接',\n        success: true,\n        message: `后端服务器响应正常 (${duration}ms)`,\n        duration\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      return {\n        test: '后端基础连接',\n        success: false,\n        message: `无法连接到后端服务器: ${error.message}`,\n        details: {\n          error: error.message,\n          code: error.code\n        },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试健康检查接口\n   */\n  static async testHealthCheck() {\n    const startTime = Date.now();\n    try {\n      const response = await fetch(`${this.API_URL}/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      const duration = Date.now() - startTime;\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          test: '健康检查接口',\n          success: true,\n          message: `健康检查通过 (${duration}ms)`,\n          details: data,\n          duration\n        };\n      } else {\n        return {\n          test: '健康检查接口',\n          success: false,\n          message: `健康检查失败: HTTP ${response.status}`,\n          details: {\n            status: response.status,\n            statusText: response.statusText\n          },\n          duration\n        };\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      return {\n        test: '健康检查接口',\n        success: false,\n        message: `健康检查请求失败: ${error.message}`,\n        details: {\n          error: error.message,\n          code: error.code\n        },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试CORS配置\n   */\n  static async testCORS() {\n    const startTime = Date.now();\n    try {\n      // 发送一个OPTIONS预检请求\n      const response = await fetch(`${this.API_URL}/health`, {\n        method: 'OPTIONS',\n        mode: 'cors',\n        headers: {\n          'Origin': window.location.origin,\n          'Access-Control-Request-Method': 'GET',\n          'Access-Control-Request-Headers': 'Content-Type,Authorization'\n        },\n        signal: AbortSignal.timeout(5000)\n      });\n      const duration = Date.now() - startTime;\n      if (response.ok) {\n        const corsHeaders = {\n          'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),\n          'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),\n          'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')\n        };\n        return {\n          test: 'CORS配置',\n          success: true,\n          message: `CORS配置正确 (${duration}ms)`,\n          details: corsHeaders,\n          duration\n        };\n      } else {\n        return {\n          test: 'CORS配置',\n          success: false,\n          message: `CORS预检请求失败: HTTP ${response.status}`,\n          details: {\n            status: response.status\n          },\n          duration\n        };\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      return {\n        test: 'CORS配置',\n        success: false,\n        message: `CORS测试失败: ${error.message}`,\n        details: {\n          error: error.message\n        },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试认证接口\n   */\n  static async testAuthAPI() {\n    const startTime = Date.now();\n    try {\n      const response = await fetch(`${this.API_URL}/auth/login`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: 'test',\n          password: 'test'\n        }),\n        signal: AbortSignal.timeout(10000)\n      });\n      const duration = Date.now() - startTime;\n      const data = await response.json();\n\n      // 认证失败是预期的，我们只是测试接口是否可达\n      if (response.status === 400 || response.status === 401) {\n        return {\n          test: '认证接口',\n          success: true,\n          message: `认证接口可达 (${duration}ms)`,\n          details: {\n            status: response.status,\n            message: data.message\n          },\n          duration\n        };\n      } else {\n        return {\n          test: '认证接口',\n          success: false,\n          message: `认证接口异常响应: HTTP ${response.status}`,\n          details: {\n            status: response.status,\n            data\n          },\n          duration\n        };\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      return {\n        test: '认证接口',\n        success: false,\n        message: `认证接口请求失败: ${error.message}`,\n        details: {\n          error: error.message\n        },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试关注列表接口（无token）\n   */\n  static async testWatchlistNoToken() {\n    const startTime = Date.now();\n    try {\n      const response = await fetch(`${this.API_URL}/watchlist`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      const duration = Date.now() - startTime;\n      const data = await response.json();\n\n      // 401未授权是预期的\n      if (response.status === 401) {\n        return {\n          test: '关注列表接口',\n          success: true,\n          message: `关注列表接口可达，正确返回401未授权 (${duration}ms)`,\n          details: {\n            status: response.status,\n            message: data.message\n          },\n          duration\n        };\n      } else {\n        return {\n          test: '关注列表接口',\n          success: false,\n          message: `关注列表接口异常响应: HTTP ${response.status}`,\n          details: {\n            status: response.status,\n            data\n          },\n          duration\n        };\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      return {\n        test: '关注列表接口',\n        success: false,\n        message: `关注列表接口请求失败: ${error.message}`,\n        details: {\n          error: error.message,\n          code: error.code\n        },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 获取网络环境信息\n   */\n  static getNetworkInfo() {\n    return {\n      userAgent: navigator.userAgent,\n      onLine: navigator.onLine,\n      connection: navigator.connection ? {\n        effectiveType: navigator.connection.effectiveType,\n        downlink: navigator.connection.downlink,\n        rtt: navigator.connection.rtt\n      } : null,\n      location: {\n        origin: window.location.origin,\n        hostname: window.location.hostname,\n        port: window.location.port,\n        protocol: window.location.protocol\n      }\n    };\n  }\n\n  /**\n   * 生成诊断报告\n   */\n  static generateReport(results) {\n    const networkInfo = this.getNetworkInfo();\n    const timestamp = new Date().toISOString();\n    let report = `# StockInsight 网络诊断报告\\n\\n`;\n    report += `**生成时间**: ${timestamp}\\n\\n`;\n    report += `## 网络环境信息\\n`;\n    report += `- **在线状态**: ${networkInfo.onLine ? '在线' : '离线'}\\n`;\n    report += `- **当前地址**: ${networkInfo.location.origin}\\n`;\n    report += `- **协议**: ${networkInfo.location.protocol}\\n`;\n    if (networkInfo.connection) {\n      report += `- **连接类型**: ${networkInfo.connection.effectiveType}\\n`;\n      report += `- **下行速度**: ${networkInfo.connection.downlink} Mbps\\n`;\n      report += `- **延迟**: ${networkInfo.connection.rtt} ms\\n`;\n    }\n    report += `\\n`;\n    report += `## 诊断结果\\n\\n`;\n    results.forEach((result, index) => {\n      const status = result.success ? '✅ 通过' : '❌ 失败';\n      report += `### ${index + 1}. ${result.test} - ${status}\\n`;\n      report += `**消息**: ${result.message}\\n`;\n      if (result.duration) {\n        report += `**耗时**: ${result.duration}ms\\n`;\n      }\n      if (result.details) {\n        report += `**详情**: \\`${JSON.stringify(result.details, null, 2)}\\`\\n`;\n      }\n      report += `\\n`;\n    });\n\n    // 添加建议\n    const failedTests = results.filter(r => !r.success);\n    if (failedTests.length > 0) {\n      report += `## 问题解决建议\\n\\n`;\n      failedTests.forEach(test => {\n        var _test$details;\n        report += `### ${test.test}\\n`;\n        if (test.test === '后端基础连接') {\n          report += `- 确认后端服务已启动 (python app.py)\\n`;\n          report += `- 检查端口5000是否被占用\\n`;\n          report += `- 确认防火墙设置允许访问端口5000\\n`;\n        } else if (test.test === 'CORS配置') {\n          report += `- 检查后端CORS配置是否包含前端域名\\n`;\n          report += `- 确认浏览器没有阻止跨域请求\\n`;\n        } else if (((_test$details = test.details) === null || _test$details === void 0 ? void 0 : _test$details.code) === 'TIMEOUT') {\n          report += `- 网络连接较慢，尝试增加超时时间\\n`;\n          report += `- 检查网络连接稳定性\\n`;\n        } else {\n          report += `- 检查网络连接\\n`;\n          report += `- 重启前端和后端服务\\n`;\n          report += `- 清除浏览器缓存\\n`;\n        }\n        report += `\\n`;\n      });\n    } else {\n      report += `## 结论\\n\\n`;\n      report += `所有网络连接测试均通过，网络配置正常。\\n`;\n    }\n    return report;\n  }\n}\nNetworkDiagnostic.BACKEND_URL = 'http://localhost:5000';\nNetworkDiagnostic.API_URL = 'http://localhost:5000/api';","map":{"version":3,"names":["NetworkDiagnostic","runFullDiagnostic","results","push","testBackendConnection","testHealthCheck","testCORS","testAuthAPI","testWatchlistNoToken","startTime","Date","now","response","fetch","BACKEND_URL","method","mode","signal","AbortSignal","timeout","duration","test","success","message","error","details","code","API_URL","headers","ok","data","json","status","statusText","window","location","origin","corsHeaders","get","body","JSON","stringify","username","password","getNetworkInfo","userAgent","navigator","onLine","connection","effectiveType","downlink","rtt","hostname","port","protocol","generateReport","networkInfo","timestamp","toISOString","report","forEach","result","index","failedTests","filter","r","length","_test$details"],"sources":["E:/AICode/StockInsight/frontend/src/utils/networkDiagnostic.ts"],"sourcesContent":["/**\n * 网络连接诊断工具\n * 用于诊断前端到后端的网络连接问题\n */\n\nexport interface NetworkDiagnosticResult {\n  test: string;\n  success: boolean;\n  message: string;\n  details?: any;\n  duration?: number;\n}\n\nexport class NetworkDiagnostic {\n  private static readonly BACKEND_URL = 'http://localhost:5000';\n  private static readonly API_URL = 'http://localhost:5000/api';\n\n  /**\n   * 运行完整的网络诊断\n   */\n  static async runFullDiagnostic(): Promise<NetworkDiagnosticResult[]> {\n    const results: NetworkDiagnosticResult[] = [];\n\n    // 1. 测试后端基础连接\n    results.push(await this.testBackendConnection());\n\n    // 2. 测试健康检查接口\n    results.push(await this.testHealthCheck());\n\n    // 3. 测试CORS配置\n    results.push(await this.testCORS());\n\n    // 4. 测试认证接口\n    results.push(await this.testAuthAPI());\n\n    // 5. 测试关注列表接口（无token）\n    results.push(await this.testWatchlistNoToken());\n\n    return results;\n  }\n\n  /**\n   * 测试后端基础连接\n   */\n  private static async testBackendConnection(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(this.BACKEND_URL, {\n        method: 'GET',\n        mode: 'no-cors',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '后端基础连接',\n        success: true,\n        message: `后端服务器响应正常 (${duration}ms)`,\n        duration\n      };\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '后端基础连接',\n        success: false,\n        message: `无法连接到后端服务器: ${error.message}`,\n        details: { error: error.message, code: error.code },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试健康检查接口\n   */\n  private static async testHealthCheck(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_URL}/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      const duration = Date.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          test: '健康检查接口',\n          success: true,\n          message: `健康检查通过 (${duration}ms)`,\n          details: data,\n          duration\n        };\n      } else {\n        return {\n          test: '健康检查接口',\n          success: false,\n          message: `健康检查失败: HTTP ${response.status}`,\n          details: { status: response.status, statusText: response.statusText },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '健康检查接口',\n        success: false,\n        message: `健康检查请求失败: ${error.message}`,\n        details: { error: error.message, code: error.code },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试CORS配置\n   */\n  private static async testCORS(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      // 发送一个OPTIONS预检请求\n      const response = await fetch(`${this.API_URL}/health`, {\n        method: 'OPTIONS',\n        mode: 'cors',\n        headers: {\n          'Origin': window.location.origin,\n          'Access-Control-Request-Method': 'GET',\n          'Access-Control-Request-Headers': 'Content-Type,Authorization'\n        },\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const duration = Date.now() - startTime;\n      \n      if (response.ok) {\n        const corsHeaders = {\n          'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),\n          'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),\n          'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')\n        };\n        \n        return {\n          test: 'CORS配置',\n          success: true,\n          message: `CORS配置正确 (${duration}ms)`,\n          details: corsHeaders,\n          duration\n        };\n      } else {\n        return {\n          test: 'CORS配置',\n          success: false,\n          message: `CORS预检请求失败: HTTP ${response.status}`,\n          details: { status: response.status },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: 'CORS配置',\n        success: false,\n        message: `CORS测试失败: ${error.message}`,\n        details: { error: error.message },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试认证接口\n   */\n  private static async testAuthAPI(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_URL}/auth/login`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: 'test',\n          password: 'test'\n        }),\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      const duration = Date.now() - startTime;\n      const data = await response.json();\n      \n      // 认证失败是预期的，我们只是测试接口是否可达\n      if (response.status === 400 || response.status === 401) {\n        return {\n          test: '认证接口',\n          success: true,\n          message: `认证接口可达 (${duration}ms)`,\n          details: { status: response.status, message: data.message },\n          duration\n        };\n      } else {\n        return {\n          test: '认证接口',\n          success: false,\n          message: `认证接口异常响应: HTTP ${response.status}`,\n          details: { status: response.status, data },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '认证接口',\n        success: false,\n        message: `认证接口请求失败: ${error.message}`,\n        details: { error: error.message },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试关注列表接口（无token）\n   */\n  private static async testWatchlistNoToken(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_URL}/watchlist`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      const duration = Date.now() - startTime;\n      const data = await response.json();\n      \n      // 401未授权是预期的\n      if (response.status === 401) {\n        return {\n          test: '关注列表接口',\n          success: true,\n          message: `关注列表接口可达，正确返回401未授权 (${duration}ms)`,\n          details: { status: response.status, message: data.message },\n          duration\n        };\n      } else {\n        return {\n          test: '关注列表接口',\n          success: false,\n          message: `关注列表接口异常响应: HTTP ${response.status}`,\n          details: { status: response.status, data },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '关注列表接口',\n        success: false,\n        message: `关注列表接口请求失败: ${error.message}`,\n        details: { error: error.message, code: error.code },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 获取网络环境信息\n   */\n  static getNetworkInfo(): any {\n    return {\n      userAgent: navigator.userAgent,\n      onLine: navigator.onLine,\n      connection: (navigator as any).connection ? {\n        effectiveType: (navigator as any).connection.effectiveType,\n        downlink: (navigator as any).connection.downlink,\n        rtt: (navigator as any).connection.rtt\n      } : null,\n      location: {\n        origin: window.location.origin,\n        hostname: window.location.hostname,\n        port: window.location.port,\n        protocol: window.location.protocol\n      }\n    };\n  }\n\n  /**\n   * 生成诊断报告\n   */\n  static generateReport(results: NetworkDiagnosticResult[]): string {\n    const networkInfo = this.getNetworkInfo();\n    const timestamp = new Date().toISOString();\n    \n    let report = `# StockInsight 网络诊断报告\\n\\n`;\n    report += `**生成时间**: ${timestamp}\\n\\n`;\n    \n    report += `## 网络环境信息\\n`;\n    report += `- **在线状态**: ${networkInfo.onLine ? '在线' : '离线'}\\n`;\n    report += `- **当前地址**: ${networkInfo.location.origin}\\n`;\n    report += `- **协议**: ${networkInfo.location.protocol}\\n`;\n    if (networkInfo.connection) {\n      report += `- **连接类型**: ${networkInfo.connection.effectiveType}\\n`;\n      report += `- **下行速度**: ${networkInfo.connection.downlink} Mbps\\n`;\n      report += `- **延迟**: ${networkInfo.connection.rtt} ms\\n`;\n    }\n    report += `\\n`;\n    \n    report += `## 诊断结果\\n\\n`;\n    \n    results.forEach((result, index) => {\n      const status = result.success ? '✅ 通过' : '❌ 失败';\n      report += `### ${index + 1}. ${result.test} - ${status}\\n`;\n      report += `**消息**: ${result.message}\\n`;\n      if (result.duration) {\n        report += `**耗时**: ${result.duration}ms\\n`;\n      }\n      if (result.details) {\n        report += `**详情**: \\`${JSON.stringify(result.details, null, 2)}\\`\\n`;\n      }\n      report += `\\n`;\n    });\n    \n    // 添加建议\n    const failedTests = results.filter(r => !r.success);\n    if (failedTests.length > 0) {\n      report += `## 问题解决建议\\n\\n`;\n      \n      failedTests.forEach(test => {\n        report += `### ${test.test}\\n`;\n        \n        if (test.test === '后端基础连接') {\n          report += `- 确认后端服务已启动 (python app.py)\\n`;\n          report += `- 检查端口5000是否被占用\\n`;\n          report += `- 确认防火墙设置允许访问端口5000\\n`;\n        } else if (test.test === 'CORS配置') {\n          report += `- 检查后端CORS配置是否包含前端域名\\n`;\n          report += `- 确认浏览器没有阻止跨域请求\\n`;\n        } else if (test.details?.code === 'TIMEOUT') {\n          report += `- 网络连接较慢，尝试增加超时时间\\n`;\n          report += `- 检查网络连接稳定性\\n`;\n        } else {\n          report += `- 检查网络连接\\n`;\n          report += `- 重启前端和后端服务\\n`;\n          report += `- 清除浏览器缓存\\n`;\n        }\n        report += `\\n`;\n      });\n    } else {\n      report += `## 结论\\n\\n`;\n      report += `所有网络连接测试均通过，网络配置正常。\\n`;\n    }\n    \n    return report;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}