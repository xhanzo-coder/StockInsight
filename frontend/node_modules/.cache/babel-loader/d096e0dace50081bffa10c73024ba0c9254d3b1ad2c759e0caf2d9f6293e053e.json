{"ast":null,"code":"/**\n * 认证服务\n * 处理用户登录、注册、令牌管理等功能\n */import axios from'axios';import{message}from'antd';import{tokenManager}from'./api';// 创建认证专用的 axios 实例\nconst authApi=axios.create({baseURL:'http://localhost:5000/api/auth',timeout:10000,headers:{'Content-Type':'application/json'}});// 用户数据类型\n// 登录请求数据\n// 注册请求数据\n// 认证响应数据\n// API 响应格式\n// 认证服务类\nexport class AuthService{/**\n   * 用户注册\n   */async register(userData){try{const response=await authApi.post('/register',userData);const data=response.data;if(data.success&&data.data){// 保存令牌 - 后端返回的是token字段\ntokenManager.setToken(data.data.token);message.success('注册成功！');return data;}else{message.error(data.message||'注册失败');return data;}}catch(error){var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'注册失败，请重试';message.error(errorMessage);return{success:false,message:errorMessage};}}/**\n   * 用户登录\n   */async login(credentials){try{const response=await authApi.post('/login',credentials);const data=response.data;if(data.success&&data.data){// 保存令牌 - 后端返回的是token字段\ntokenManager.setToken(data.data.token);message.success('登录成功！');return data;}else{message.error(data.message||'登录失败');return data;}}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'登录失败，请重试';message.error(errorMessage);return{success:false,message:errorMessage};}}/**\n   * 验证令牌\n   */async verifyToken(){try{const token=tokenManager.getToken();if(!token){return{success:false};}const response=await authApi.get('/verify',{headers:{Authorization:`Bearer ${token}`}});const data=response.data;if(data.success&&data.user){return{success:true,user:data.user};}else{tokenManager.removeToken();return{success:false};}}catch(error){console.error('令牌验证失败:',error);tokenManager.removeToken();return{success:false};}}/**\n   * 获取用户资料\n   */async getProfile(){try{const token=tokenManager.getToken();if(!token){return{success:false};}const response=await authApi.get('/profile',{headers:{Authorization:`Bearer ${token}`}});const data=response.data;if(data.success&&data.user){return{success:true,user:data.user};}else{return{success:false};}}catch(error){console.error('获取用户资料失败:',error);return{success:false};}}/**\n   * 用户登出\n   */async logout(){try{const token=tokenManager.getToken();if(token){// 可选：调用后端登出接口\nawait authApi.post('/logout',{},{headers:{Authorization:`Bearer ${token}`}});}}catch(error){console.error('登出请求失败:',error);}finally{// 无论如何都要清除本地令牌\ntokenManager.removeToken();}}/**\n   * 检查是否已认证\n   */isAuthenticated(){return tokenManager.isAuthenticated();}}export const authService=new AuthService();","map":{"version":3,"names":["axios","message","tokenManager","authApi","create","baseURL","timeout","headers","AuthService","register","userData","response","post","data","success","setToken","token","error","_error$response","_error$response$data","errorMessage","login","credentials","_error$response2","_error$response2$data","verifyToken","getToken","get","Authorization","user","removeToken","console","getProfile","logout","isAuthenticated","authService"],"sources":["E:/AICode/StockInsight/frontend/src/services/authService.ts"],"sourcesContent":["/**\n * 认证服务\n * 处理用户登录、注册、令牌管理等功能\n */\n\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { tokenManager } from './api';\n\n// 创建认证专用的 axios 实例\nconst authApi = axios.create({\n  baseURL: 'http://localhost:5000/api/auth',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 用户数据类型\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  created_at: string;\n}\n\n// 登录请求数据\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\n// 注册请求数据\nexport interface RegisterRequest {\n  username: string;\n  email: string;\n  password: string;\n}\n\n// 认证响应数据\nexport interface AuthResponse {\n  user: User;\n  token: string; // 后端返回的是token字段，而不是access_token\n}\n\n// API 响应格式\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  message?: string;\n}\n\n// 认证服务类\nexport class AuthService {\n\n  /**\n   * 用户注册\n   */\n  async register(userData: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await authApi.post('/register', userData);\n      const data = response.data;\n\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('注册成功！');\n        return data;\n      } else {\n        message.error(data.message || '注册失败');\n        return data;\n      }\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || '注册失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * 用户登录\n   */\n  async login(credentials: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await authApi.post('/login', credentials);\n      const data = response.data;\n\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('登录成功！');\n        return data;\n      } else {\n        message.error(data.message || '登录失败');\n        return data;\n      }\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || '登录失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * 验证令牌\n   */\n  async verifyToken(): Promise<{ success: boolean; user?: User }> {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return { success: false };\n      }\n\n      const response = await authApi.get('/verify', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n      if (data.success && data.user) {\n        return { success: true, user: data.user };\n      } else {\n        tokenManager.removeToken();\n        return { success: false };\n      }\n    } catch (error) {\n      console.error('令牌验证失败:', error);\n      tokenManager.removeToken();\n      return { success: false };\n    }\n  }\n\n  /**\n   * 获取用户资料\n   */\n  async getProfile(): Promise<{ success: boolean; user?: User }> {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return { success: false };\n      }\n\n      const response = await authApi.get('/profile', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n      if (data.success && data.user) {\n        return { success: true, user: data.user };\n      } else {\n        return { success: false };\n      }\n    } catch (error) {\n      console.error('获取用户资料失败:', error);\n      return { success: false };\n    }\n  }\n\n  /**\n   * 用户登出\n   */\n  async logout(): Promise<void> {\n    try {\n      const token = tokenManager.getToken();\n      if (token) {\n        // 可选：调用后端登出接口\n        await authApi.post('/logout', {}, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n      }\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 无论如何都要清除本地令牌\n      tokenManager.removeToken();\n    }\n  }\n\n  /**\n   * 检查是否已认证\n   */\n  isAuthenticated(): boolean {\n    return tokenManager.isAuthenticated();\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}