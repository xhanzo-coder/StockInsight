{"ast":null,"code":"var _jsxFileName = \"E:\\\\AICode\\\\StockInsight\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * 认证上下文\n * 提供全局的用户状态管理\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user;\n\n  // 初始化时验证令牌\n  useEffect(() => {\n    const initAuth = async () => {\n      setIsLoading(true);\n      try {\n        if (authService.isAuthenticated()) {\n          console.log('发现本地令牌，开始验证...');\n          const result = await authService.verifyToken();\n          if (result.success && result.user) {\n            console.log('令牌验证成功，用户已登录');\n            setUser(result.user);\n          } else {\n            console.log('令牌验证失败，清除用户状态');\n            setUser(null);\n          }\n        } else {\n          console.log('未找到本地令牌，用户未登录');\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('初始化认证时出错:', error);\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const result = await authService.login({\n        username,\n        password\n      });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('登录失败:', error);\n      return false;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const result = await authService.register({\n        username,\n        email,\n        password\n      });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('注册失败:', error);\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n  const refreshUser = async () => {\n    if (authService.isAuthenticated()) {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        setUser(result.user);\n      }\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","isAuthenticated","initAuth","console","log","result","verifyToken","success","error","login","username","password","data","register","email","logout","refreshUser","getProfile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["E:/AICode/StockInsight/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["/**\n * 认证上下文\n * 提供全局的用户状态管理\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { authService, User } from '../services/authService';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user;\n\n  // 初始化时验证令牌\n  useEffect(() => {\n    const initAuth = async () => {\n      setIsLoading(true);\n      \n      try {\n        if (authService.isAuthenticated()) {\n          console.log('发现本地令牌，开始验证...');\n          const result = await authService.verifyToken();\n          if (result.success && result.user) {\n            console.log('令牌验证成功，用户已登录');\n            setUser(result.user);\n          } else {\n            console.log('令牌验证失败，清除用户状态');\n            setUser(null);\n          }\n        } else {\n          console.log('未找到本地令牌，用户未登录');\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('初始化认证时出错:', error);\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const result = await authService.login({ username, password });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('登录失败:', error);\n      return false;\n    }\n  };\n\n  const register = async (username: string, email: string, password: string): Promise<boolean> => {\n    try {\n      const result = await authService.register({ username, email, password });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('注册失败:', error);\n      return false;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n\n  const refreshUser = async (): Promise<void> => {\n    if (authService.isAuthenticated()) {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        setUser(result.user);\n      }\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}