{"ast":null,"code":"import axios from 'axios';\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\nimport { message } from 'antd';\n\n// 令牌管理\nconst TOKEN_KEY = 'auth_token';\nconst USER_INFO_KEY = 'userInfo';\nconst AUTH_LAST_VERIFIED_KEY = 'auth_last_verified';\n\n// 配置常量\nconst REQUEST_TIMEOUT = 15000; // 请求超时时间（毫秒）\nconst MAX_RETRY_COUNT = 2; // 最大重试次数\nconst RETRY_DELAY = 1000; // 重试延迟（毫秒）\n\nexport const tokenManager = {\n  getToken: () => {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  setToken: token => {\n    if (!token) {\n      console.warn('尝试设置空token，操作被忽略');\n      return;\n    }\n    localStorage.setItem(TOKEN_KEY, token);\n    // 记录token设置时间\n    localStorage.setItem('token_timestamp', Date.now().toString());\n    console.log('Token已设置，时间戳:', Date.now());\n  },\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('token_timestamp');\n    localStorage.removeItem(USER_INFO_KEY);\n    localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\n    console.log('Token和相关认证信息已清除');\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) {\n      console.log('没有找到token，未认证');\n      return false;\n    }\n\n    // 检查token格式是否有效（简单验证）\n    try {\n      // JWT格式验证：确保token是由三部分组成的点分隔字符串\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        console.warn('无效的token格式，清除token');\n        tokenManager.removeToken();\n        return false;\n      }\n\n      // 检查token是否过期（通过解析JWT的payload）\n      try {\n        const payload = JSON.parse(atob(parts[1]));\n        console.log('解析JWT payload成功:', {\n          exp: payload.exp ? new Date(payload.exp * 1000).toISOString() : '无过期时间',\n          iat: payload.iat ? new Date(payload.iat * 1000).toISOString() : '无创建时间',\n          sub: payload.sub || '无主题',\n          currentTime: new Date().toISOString()\n        });\n        if (payload.exp && payload.exp * 1000 < Date.now()) {\n          console.warn('token已过期，清除token');\n          tokenManager.removeToken();\n          return false;\n        }\n      } catch (e) {\n        console.warn('无法解析token payload:', e);\n        // 继续使用token，让服务器决定是否有效\n      }\n\n      // 检查是否有用户信息\n      const userInfo = localStorage.getItem(USER_INFO_KEY);\n      if (!userInfo) {\n        console.warn('找到有效token但没有用户信息');\n        // 仍然返回true，让应用尝试验证token\n      }\n      console.log('Token验证通过，用户已认证');\n      return true;\n    } catch (e) {\n      console.error('token验证出错:', e);\n      return false;\n    }\n  },\n  // 获取token过期时间\n  getTokenExpiration: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) return null;\n    try {\n      const parts = token.split('.');\n      if (parts.length !== 3) return null;\n      const payload = JSON.parse(atob(parts[1]));\n      return payload.exp ? payload.exp * 1000 : null;\n    } catch (e) {\n      console.error('获取token过期时间失败:', e);\n      return null;\n    }\n  },\n  // 检查token是否即将过期（5分钟内）\n  isTokenExpiringSoon: () => {\n    const expiration = tokenManager.getTokenExpiration();\n    if (!expiration) return false;\n    const fiveMinutes = 5 * 60 * 1000;\n    return expiration - Date.now() < fiveMinutes;\n  }\n};\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // 直接连接后端，绕过代理问题\n  timeout: REQUEST_TIMEOUT,\n  // 15秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// 请求重试函数\nconst retryRequest = async (config, retryCount = 0) => {\n  try {\n    return await axios(config);\n  } catch (error) {\n    // 只有在网络错误或5xx服务器错误时重试\n    const isNetworkError = !error.response;\n    const isServerError = error.response && error.response.status >= 500;\n    if ((isNetworkError || isServerError) && retryCount < MAX_RETRY_COUNT) {\n      console.log(`请求失败，${RETRY_DELAY / 1000}秒后重试 (${retryCount + 1}/${MAX_RETRY_COUNT})`);\n      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n      return retryRequest(config, retryCount + 1);\n    }\n    throw error;\n  }\n};\n\n// 请求拦截器 - 添加认证令牌\napi.interceptors.request.use(config => {\n  var _config$method;\n  // 添加请求时间戳，用于调试\n  config.headers = config.headers || {};\n  config.headers['X-Request-Time'] = new Date().toISOString();\n  console.log('API请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n\n  // 添加认证令牌\n  const token = tokenManager.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理认证错误\napi.interceptors.response.use(response => {\n  console.log('API响应:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error('API错误:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, error.message);\n\n  // 处理认证错误\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    var _error$config2;\n    console.warn('收到401未授权响应，清除认证状态');\n\n    // 令牌过期或无效，清除本地令牌和用户信息\n    tokenManager.removeToken();\n    localStorage.removeItem(USER_INFO_KEY);\n    localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\n\n    // 如果不是验证接口的请求，显示提示并重定向\n    if (((_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url) !== '/auth/verify') {\n      message.error('登录已过期，请重新登录');\n\n      // 使用延迟重定向，确保消息能够显示\n      setTimeout(() => {\n        // 保存当前URL，以便登录后返回\n        const currentPath = window.location.pathname;\n        if (currentPath !== '/login') {\n          sessionStorage.setItem('redirectAfterLogin', currentPath);\n        }\n        window.location.href = '/login';\n      }, 1500);\n    }\n  }\n  // 处理网络错误\n  else if (!error.response) {\n    console.error('网络错误:', error.message);\n    // 网络错误不自动清除认证状态\n  }\n  // 处理服务器错误\n  else if (error.response.status >= 500) {\n    console.error('服务器错误:', error.response.status, error.response.data);\n    message.error('服务器暂时不可用，请稍后重试');\n  }\n  return Promise.reject(error);\n});\n\n// 数据类型定义\n\n// API服务类\nclass ApiService {\n  // 健康检查\n  async healthCheck() {\n    const response = await api.get('/health');\n    return response.data;\n  }\n\n  // 获取关注列表\n  async getWatchlist(forceRefresh = false) {\n    console.log('=== 前端关注列表API调试 ===');\n    console.log('当前token:', tokenManager.getToken());\n    console.log('认证状态:', tokenManager.isAuthenticated());\n    try {\n      const response = await api.get('/watchlist');\n      console.log('关注列表API响应:', response.status, response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error('关注列表API错误:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status, (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data, error.message);\n      throw error;\n    }\n  }\n\n  // 搜索股票\n  async searchStocks(keyword, limit = 10) {\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的搜索结果: ${keyword}`);\n      return cached;\n    }\n    const response = await api.get('/stocks/search', {\n      params: {\n        keyword,\n        limit\n      }\n    });\n    const data = response.data;\n\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\n    stockCache.set(cacheKey, data, {\n      tradingCacheDuration: 5,\n      nonTradingCacheDuration: 5\n    });\n    return data;\n  }\n\n  // 获取股票详情\n  async getStockDetail(code) {\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的股票详情: ${code}`);\n      return cached;\n    }\n    const response = await api.get(`/stocks/${code}`);\n    const data = response.data;\n\n    // 缓存股票详情\n    stockCache.set(cacheKey, data);\n    return data;\n  }\n\n  // 获取股票历史数据\n  async getStockHistory(code, period = '1y') {\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\n      return cached;\n    }\n    const response = await api.get(`/stocks/${code}/history`, {\n      params: {\n        period\n      }\n    });\n    const data = response.data;\n\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\n    stockCache.set(cacheKey, data, {\n      tradingCacheDuration: 10,\n      nonTradingCacheDuration: 60\n    });\n    return data;\n  }\n\n  // 批量获取股票数据\n  async getBatchStocks(codes) {\n    const response = await api.post('/stocks/batch', {\n      codes\n    });\n    return response.data;\n  }\n\n  // 添加股票到关注列表\n  async addToWatchlist(code, industry = '') {\n    const response = await api.post('/watchlist', {\n      code,\n      industry\n    });\n    return response.data;\n  }\n\n  // 从关注列表删除股票\n  async removeFromWatchlist(code) {\n    const response = await api.delete(`/watchlist/${code}`);\n    return response.data;\n  }\n\n  // 切换股票置顶状态\n  async togglePinStock(code) {\n    const response = await api.post(`/watchlist/${code}/pin`);\n    return response.data;\n  }\n\n  // 获取市场概览\n  async getMarketOverview() {\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log('使用缓存的市场概览数据');\n      return cached;\n    }\n    const response = await api.get('/market/overview');\n    const data = response.data;\n\n    // 缓存市场概览\n    stockCache.set(cacheKey, data);\n    return data;\n  }\n\n  // 清空缓存\n  async clearCache() {\n    const response = await api.post('/cache/clear');\n    return response.data;\n  }\n\n  // 获取API统计\n  async getApiStats(hours = 24) {\n    const response = await api.get('/stats', {\n      params: {\n        hours\n      }\n    });\n    return response.data;\n  }\n}\n\n/**\r\n * 安全的API调用封装\r\n * 提供统一的错误处理和返回结构\r\n */\nexport const safeApiCall = async apiCall => {\n  try {\n    const result = await apiCall();\n    return {\n      success: true,\n      data: result\n    };\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    console.error('API调用失败:', error);\n\n    // 检查是否为网络错误\n    const isNetworkError = !error.response;\n    if (isNetworkError) {\n      return {\n        success: false,\n        error: '网络连接错误，请检查您的网络连接',\n        networkError: true\n      };\n    }\n\n    // 处理服务器返回的错误\n    const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message || '未知错误';\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\n\n// 导出API服务实例\nexport const apiService = new ApiService();\nexport default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","message","TOKEN_KEY","USER_INFO_KEY","AUTH_LAST_VERIFIED_KEY","REQUEST_TIMEOUT","MAX_RETRY_COUNT","RETRY_DELAY","tokenManager","getToken","localStorage","getItem","setToken","token","console","warn","setItem","Date","now","toString","log","removeToken","removeItem","isAuthenticated","parts","split","length","payload","JSON","parse","atob","exp","toISOString","iat","sub","currentTime","e","userInfo","error","getTokenExpiration","isTokenExpiringSoon","expiration","fiveMinutes","api","create","baseURL","timeout","headers","withCredentials","retryRequest","config","retryCount","isNetworkError","response","isServerError","status","Promise","resolve","setTimeout","interceptors","request","use","_config$method","method","toUpperCase","url","Authorization","reject","_error$response","_error$config","_error$response2","_error$config2","currentPath","window","location","pathname","sessionStorage","href","data","ApiService","healthCheck","get","getWatchlist","forceRefresh","_error$response3","_error$response4","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","code","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","togglePinStock","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","safeApiCall","apiCall","result","success","_error$response5","_error$response5$data","networkError","errorMessage","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\nimport { message } from 'antd';\r\n\r\n// 令牌管理\r\nconst TOKEN_KEY = 'auth_token';\r\nconst USER_INFO_KEY = 'userInfo';\r\nconst AUTH_LAST_VERIFIED_KEY = 'auth_last_verified';\r\n\r\n// 配置常量\r\nconst REQUEST_TIMEOUT = 15000; // 请求超时时间（毫秒）\r\nconst MAX_RETRY_COUNT = 2; // 最大重试次数\r\nconst RETRY_DELAY = 1000; // 重试延迟（毫秒）\r\n\r\nexport const tokenManager = {\r\n  getToken: (): string | null => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  setToken: (token: string): void => {\r\n    if (!token) {\r\n      console.warn('尝试设置空token，操作被忽略');\r\n      return;\r\n    }\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    // 记录token设置时间\r\n    localStorage.setItem('token_timestamp', Date.now().toString());\r\n    console.log('Token已设置，时间戳:', Date.now());\r\n  },\r\n  \r\n  removeToken: (): void => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('token_timestamp');\r\n    localStorage.removeItem(USER_INFO_KEY);\r\n    localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\r\n    console.log('Token和相关认证信息已清除');\r\n  },\r\n  \r\n  isAuthenticated: (): boolean => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (!token) {\r\n      console.log('没有找到token，未认证');\r\n      return false;\r\n    }\r\n    \r\n    // 检查token格式是否有效（简单验证）\r\n    try {\r\n      // JWT格式验证：确保token是由三部分组成的点分隔字符串\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) {\r\n        console.warn('无效的token格式，清除token');\r\n        tokenManager.removeToken();\r\n        return false;\r\n      }\r\n      \r\n      // 检查token是否过期（通过解析JWT的payload）\r\n      try {\r\n        const payload = JSON.parse(atob(parts[1]));\r\n        console.log('解析JWT payload成功:', { \r\n          exp: payload.exp ? new Date(payload.exp * 1000).toISOString() : '无过期时间',\r\n          iat: payload.iat ? new Date(payload.iat * 1000).toISOString() : '无创建时间',\r\n          sub: payload.sub || '无主题',\r\n          currentTime: new Date().toISOString()\r\n        });\r\n        \r\n        if (payload.exp && payload.exp * 1000 < Date.now()) {\r\n          console.warn('token已过期，清除token');\r\n          tokenManager.removeToken();\r\n          return false;\r\n        }\r\n      } catch (e) {\r\n        console.warn('无法解析token payload:', e);\r\n        // 继续使用token，让服务器决定是否有效\r\n      }\r\n      \r\n      // 检查是否有用户信息\r\n      const userInfo = localStorage.getItem(USER_INFO_KEY);\r\n      if (!userInfo) {\r\n        console.warn('找到有效token但没有用户信息');\r\n        // 仍然返回true，让应用尝试验证token\r\n      }\r\n      \r\n      console.log('Token验证通过，用户已认证');\r\n      return true;\r\n    } catch (e) {\r\n      console.error('token验证出错:', e);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // 获取token过期时间\r\n  getTokenExpiration: (): number | null => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (!token) return null;\r\n    \r\n    try {\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) return null;\r\n      \r\n      const payload = JSON.parse(atob(parts[1]));\r\n      return payload.exp ? payload.exp * 1000 : null;\r\n    } catch (e) {\r\n      console.error('获取token过期时间失败:', e);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // 检查token是否即将过期（5分钟内）\r\n  isTokenExpiringSoon: (): boolean => {\r\n    const expiration = tokenManager.getTokenExpiration();\r\n    if (!expiration) return false;\r\n    \r\n    const fiveMinutes = 5 * 60 * 1000;\r\n    return expiration - Date.now() < fiveMinutes;\r\n  }\r\n};\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // 直接连接后端，绕过代理问题\r\n  timeout: REQUEST_TIMEOUT, // 15秒超时\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// 请求重试函数\r\nconst retryRequest = async (config: AxiosRequestConfig, retryCount: number = 0): Promise<AxiosResponse> => {\r\n  try {\r\n    return await axios(config);\r\n  } catch (error: any) {\r\n    // 只有在网络错误或5xx服务器错误时重试\r\n    const isNetworkError = !error.response;\r\n    const isServerError = error.response && error.response.status >= 500;\r\n    \r\n    if ((isNetworkError || isServerError) && retryCount < MAX_RETRY_COUNT) {\r\n      console.log(`请求失败，${RETRY_DELAY/1000}秒后重试 (${retryCount + 1}/${MAX_RETRY_COUNT})`);\r\n      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\r\n      return retryRequest(config, retryCount + 1);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 请求拦截器 - 添加认证令牌\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 添加请求时间戳，用于调试\r\n    config.headers = config.headers || {};\r\n    config.headers['X-Request-Time'] = new Date().toISOString();\r\n    \r\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\r\n    \r\n    // 添加认证令牌\r\n    const token = tokenManager.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求拦截器错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 处理认证错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    \r\n    // 处理认证错误\r\n    if (error.response?.status === 401) {\r\n      console.warn('收到401未授权响应，清除认证状态');\r\n      \r\n      // 令牌过期或无效，清除本地令牌和用户信息\r\n      tokenManager.removeToken();\r\n      localStorage.removeItem(USER_INFO_KEY);\r\n      localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\r\n      \r\n      // 如果不是验证接口的请求，显示提示并重定向\r\n      if (error.config?.url !== '/auth/verify') {\r\n        message.error('登录已过期，请重新登录');\r\n        \r\n        // 使用延迟重定向，确保消息能够显示\r\n        setTimeout(() => {\r\n          // 保存当前URL，以便登录后返回\r\n          const currentPath = window.location.pathname;\r\n          if (currentPath !== '/login') {\r\n            sessionStorage.setItem('redirectAfterLogin', currentPath);\r\n          }\r\n          \r\n          window.location.href = '/login';\r\n        }, 1500);\r\n      }\r\n    }\r\n    // 处理网络错误\r\n    else if (!error.response) {\r\n      console.error('网络错误:', error.message);\r\n      // 网络错误不自动清除认证状态\r\n    }\r\n    // 处理服务器错误\r\n    else if (error.response.status >= 500) {\r\n      console.error('服务器错误:', error.response.status, error.response.data);\r\n      message.error('服务器暂时不可用，请稍后重试');\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n  is_pinned?: boolean;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    console.log('=== 前端关注列表API调试 ===');\r\n    console.log('当前token:', tokenManager.getToken());\r\n    console.log('认证状态:', tokenManager.isAuthenticated());\r\n    \r\n    try {\r\n      const response = await api.get('/watchlist');\r\n      console.log('关注列表API响应:', response.status, response.data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('关注列表API错误:', error.response?.status, error.response?.data, error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 切换股票置顶状态\r\n  async togglePinStock(code: string): Promise<ApiResponse<{ code: string; is_pinned: boolean }>> {\r\n    const response = await api.post(`/watchlist/${code}/pin`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n/**\r\n * 安全的API调用封装\r\n * 提供统一的错误处理和返回结构\r\n */\r\nexport const safeApiCall = async <T>(apiCall: () => Promise<T>): Promise<{ success: boolean; data?: T; error?: string; networkError?: boolean }> => {\r\n  try {\r\n    const result = await apiCall();\r\n    return { success: true, data: result };\r\n  } catch (error: any) {\r\n    console.error('API调用失败:', error);\r\n    \r\n    // 检查是否为网络错误\r\n    const isNetworkError = !error.response;\r\n    if (isNetworkError) {\r\n      return {\r\n        success: false,\r\n        error: '网络连接错误，请检查您的网络连接',\r\n        networkError: true\r\n      };\r\n    }\r\n    \r\n    // 处理服务器返回的错误\r\n    const errorMessage = error.response?.data?.message || error.message || '未知错误';\r\n    return {\r\n      success: false,\r\n      error: errorMessage\r\n    };\r\n  }\r\n};\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}