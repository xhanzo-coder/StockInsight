{"ast":null,"code":"import axios from'axios';import{stockCache,CACHE_KEYS}from'../utils/stockCache';// 创建axios实例\nconst api=axios.create({baseURL:process.env.NODE_ENV==='production'?'/api':'http://localhost:5000/api',timeout:10000,headers:{'Content-Type':'application/json'}});// 请求拦截器\napi.interceptors.request.use(config=>{var _config$method;console.log('API请求:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;},error=>{return Promise.reject(error);});// 响应拦截器\napi.interceptors.response.use(response=>{console.log('API响应:',response.status,response.config.url);return response;},error=>{var _error$response,_error$config;console.error('API错误:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,error.message);return Promise.reject(error);});// 数据类型定义\n// API服务类\nclass ApiService{// 健康检查\nasync healthCheck(){const response=await api.get('/health');return response.data;}// 获取关注列表\nasync getWatchlist(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const response=await api.get('/watchlist');return response.data;}// 搜索股票\nasync searchStocks(keyword){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const cacheKey=CACHE_KEYS.SEARCH_RESULTS(keyword);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的搜索结果: ${keyword}`);return cached;}const response=await api.get('/stocks/search',{params:{keyword,limit}});const data=response.data;// 缓存搜索结果 - 统一使用5分钟缓存时间\nstockCache.set(cacheKey,data,{tradingCacheDuration:5,nonTradingCacheDuration:5});return data;}// 获取股票详情\nasync getStockDetail(code){const cacheKey=CACHE_KEYS.STOCK_DETAIL(code);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的股票详情: ${code}`);return cached;}const response=await api.get(`/stocks/${code}`);const data=response.data;// 缓存股票详情\nstockCache.set(cacheKey,data);return data;}// 获取股票历史数据\nasync getStockHistory(code){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1y';const cacheKey=CACHE_KEYS.STOCK_HISTORY(code,period);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的历史数据: ${code} - ${period}`);return cached;}const response=await api.get(`/stocks/${code}/history`,{params:{period}});const data=response.data;// 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\nstockCache.set(cacheKey,data,{tradingCacheDuration:10,nonTradingCacheDuration:60});return data;}// 批量获取股票数据\nasync getBatchStocks(codes){const response=await api.post('/stocks/batch',{codes});return response.data;}// 添加股票到关注列表\nasync addToWatchlist(code){let industry=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const response=await api.post('/watchlist',{code,industry});return response.data;}// 从关注列表删除股票\nasync removeFromWatchlist(code){const response=await api.delete(`/watchlist/${code}`);return response.data;}// 获取市场概览\nasync getMarketOverview(){const cacheKey=CACHE_KEYS.MARKET_OVERVIEW;// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log('使用缓存的市场概览数据');return cached;}const response=await api.get('/market/overview');const data=response.data;// 缓存市场概览\nstockCache.set(cacheKey,data);return data;}// 清空缓存\nasync clearCache(){const response=await api.post('/cache/clear');return response.data;}// 获取API统计\nasync getApiStats(){let hours=arguments.length>0&&arguments[0]!==undefined?arguments[0]:24;const response=await api.get('/stats',{params:{hours}});return response.data;}}// 导出API服务实例\nexport const apiService=new ApiService();export default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","api","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$config","message","ApiService","healthCheck","get","data","getWatchlist","forceRefresh","arguments","length","undefined","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","code","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    const response = await api.get('/watchlist');\r\n    return response.data;\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}