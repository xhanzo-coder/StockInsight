{"ast":null,"code":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { generateColor, getColorAlpha } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorAlphaInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [internalValue, setInternalValue] = useState(() => generateColor(value || '#000'));\n  const alphaValue = value || internalValue;\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n    setInternalValue(genColor);\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getColorAlpha(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;","map":{"version":3,"names":["React","useState","generateColor","getColorAlpha","ColorSteppers","ColorAlphaInput","_ref","prefixCls","value","onChange","colorAlphaInputPrefixCls","internalValue","setInternalValue","alphaValue","handleAlphaChange","step","hsba","toHsb","a","genColor","createElement","formatter","className"],"sources":["E:/AICode/StockInsight/frontend/node_modules/antd/es/color-picker/components/ColorAlphaInput.js"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from 'react';\nimport { generateColor, getColorAlpha } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorAlphaInput = ({\n  prefixCls,\n  value,\n  onChange\n}) => {\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [internalValue, setInternalValue] = useState(() => generateColor(value || '#000'));\n  const alphaValue = value || internalValue;\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n    setInternalValue(genColor);\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getColorAlpha(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,EAAEC,aAAa,QAAQ,SAAS;AACtD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,MAAMC,eAAe,GAAGC,IAAA,IAIlB;EAAA,IAJmB;IACvBC,SAAS;IACTC,KAAK;IACLC;EACF,CAAC,GAAAH,IAAA;EACC,MAAMI,wBAAwB,GAAG,GAAGH,SAAS,cAAc;EAC3D,MAAM,CAACI,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,MAAMC,aAAa,CAACM,KAAK,IAAI,MAAM,CAAC,CAAC;EACxF,MAAMK,UAAU,GAAGL,KAAK,IAAIG,aAAa;EACzC,MAAMG,iBAAiB,GAAGC,IAAI,IAAI;IAChC,MAAMC,IAAI,GAAGH,UAAU,CAACI,KAAK,CAAC,CAAC;IAC/BD,IAAI,CAACE,CAAC,GAAG,CAACH,IAAI,IAAI,CAAC,IAAI,GAAG;IAC1B,MAAMI,QAAQ,GAAGjB,aAAa,CAACc,IAAI,CAAC;IACpCJ,gBAAgB,CAACO,QAAQ,CAAC;IAC1BV,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACU,QAAQ,CAAC;EACxE,CAAC;EACD,OAAO,aAAanB,KAAK,CAACoB,aAAa,CAAChB,aAAa,EAAE;IACrDI,KAAK,EAAEL,aAAa,CAACU,UAAU,CAAC;IAChCN,SAAS,EAAEA,SAAS;IACpBc,SAAS,EAAEN,IAAI,IAAI,GAAGA,IAAI,GAAG;IAC7BO,SAAS,EAAEZ,wBAAwB;IACnCD,QAAQ,EAAEK;EACZ,CAAC,CAAC;AACJ,CAAC;AACD,eAAeT,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}