{"ast":null,"code":"import axios from'axios';import{stockCache,CACHE_KEYS}from'../utils/stockCache';// 令牌管理\nconst TOKEN_KEY='auth_token';export const tokenManager={getToken:()=>{return localStorage.getItem(TOKEN_KEY);},setToken:token=>{localStorage.setItem(TOKEN_KEY,token);},removeToken:()=>{localStorage.removeItem(TOKEN_KEY);},isAuthenticated:()=>{return!!localStorage.getItem(TOKEN_KEY);}};// 创建axios实例\nconst api=axios.create({baseURL:'http://localhost:5000/api',// 直接连接后端，绕过代理问题\ntimeout:10000,// 10秒超时\nheaders:{'Content-Type':'application/json'},withCredentials:false});// 请求拦截器 - 添加认证令牌\napi.interceptors.request.use(config=>{var _config$method;console.log('API请求:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);// 添加认证令牌\nconst token=tokenManager.getToken();if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// 响应拦截器 - 处理认证错误\napi.interceptors.response.use(response=>{console.log('API响应:',response.status,response.config.url);return response;},error=>{var _error$response,_error$config,_error$response2;console.error('API错误:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,error.message);// 处理认证错误\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401){// 令牌过期或无效，清除本地令牌\ntokenManager.removeToken();// 可以在这里触发重新登录\nwindow.location.reload();}return Promise.reject(error);});// 数据类型定义\n// API服务类\nclass ApiService{// 健康检查\nasync healthCheck(){const response=await api.get('/health');return response.data;}// 获取关注列表\nasync getWatchlist(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const response=await api.get('/watchlist');return response.data;}// 搜索股票\nasync searchStocks(keyword){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const cacheKey=CACHE_KEYS.SEARCH_RESULTS(keyword);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的搜索结果: ${keyword}`);return cached;}const response=await api.get('/stocks/search',{params:{keyword,limit}});const data=response.data;// 缓存搜索结果 - 统一使用5分钟缓存时间\nstockCache.set(cacheKey,data,{tradingCacheDuration:5,nonTradingCacheDuration:5});return data;}// 获取股票详情\nasync getStockDetail(code){const cacheKey=CACHE_KEYS.STOCK_DETAIL(code);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的股票详情: ${code}`);return cached;}const response=await api.get(`/stocks/${code}`);const data=response.data;// 缓存股票详情\nstockCache.set(cacheKey,data);return data;}// 获取股票历史数据\nasync getStockHistory(code){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1y';const cacheKey=CACHE_KEYS.STOCK_HISTORY(code,period);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的历史数据: ${code} - ${period}`);return cached;}const response=await api.get(`/stocks/${code}/history`,{params:{period}});const data=response.data;// 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\nstockCache.set(cacheKey,data,{tradingCacheDuration:10,nonTradingCacheDuration:60});return data;}// 批量获取股票数据\nasync getBatchStocks(codes){const response=await api.post('/stocks/batch',{codes});return response.data;}// 添加股票到关注列表\nasync addToWatchlist(code){let industry=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const response=await api.post('/watchlist',{code,industry});return response.data;}// 从关注列表删除股票\nasync removeFromWatchlist(code){const response=await api.delete(`/watchlist/${code}`);return response.data;}// 切换股票置顶状态\nasync togglePinStock(code){const response=await api.post(`/watchlist/${code}/pin`);return response.data;}// 获取市场概览\nasync getMarketOverview(){const cacheKey=CACHE_KEYS.MARKET_OVERVIEW;// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log('使用缓存的市场概览数据');return cached;}const response=await api.get('/market/overview');const data=response.data;// 缓存市场概览\nstockCache.set(cacheKey,data);return data;}// 清空缓存\nasync clearCache(){const response=await api.post('/cache/clear');return response.data;}// 获取API统计\nasync getApiStats(){let hours=arguments.length>0&&arguments[0]!==undefined?arguments[0]:24;const response=await api.get('/stats',{params:{hours}});return response.data;}}// 导出API服务实例\nexport const apiService=new ApiService();export default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","TOKEN_KEY","tokenManager","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","isAuthenticated","api","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","Authorization","error","Promise","reject","response","status","_error$response","_error$config","_error$response2","message","window","location","reload","ApiService","healthCheck","get","data","getWatchlist","forceRefresh","arguments","length","undefined","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","code","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","togglePinStock","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\n\r\n// 令牌管理\r\nconst TOKEN_KEY = 'auth_token';\r\n\r\nexport const tokenManager = {\r\n  getToken: (): string | null => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  setToken: (token: string): void => {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n  },\r\n  \r\n  removeToken: (): void => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n  },\r\n  \r\n  isAuthenticated: (): boolean => {\r\n    return !!localStorage.getItem(TOKEN_KEY);\r\n  }\r\n};\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // 直接连接后端，绕过代理问题\r\n  timeout: 10000, // 10秒超时\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\r\n    \r\n    // 添加认证令牌\r\n    const token = tokenManager.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 处理认证错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    \r\n    // 处理认证错误\r\n    if (error.response?.status === 401) {\r\n      // 令牌过期或无效，清除本地令牌\r\n      tokenManager.removeToken();\r\n      // 可以在这里触发重新登录\r\n      window.location.reload();\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n  is_pinned?: boolean;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    const response = await api.get('/watchlist');\r\n    return response.data;\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 切换股票置顶状态\r\n  async togglePinStock(code: string): Promise<ApiResponse<{ code: string; is_pinned: boolean }>> {\r\n    const response = await api.post(`/watchlist/${code}/pin`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}