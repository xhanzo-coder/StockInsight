{"ast":null,"code":"/**\n * 网络连接诊断工具\n * 用于诊断前端到后端的网络连接问题\n */export class NetworkDiagnostic{/**\n   * 运行完整的网络诊断\n   */static async runFullDiagnostic(){const results=[];// 1. 测试后端基础连接\nresults.push(await this.testBackendConnection());// 2. 测试健康检查接口\nresults.push(await this.testHealthCheck());// 3. 测试CORS配置\nresults.push(await this.testCORS());// 4. 测试认证接口\nresults.push(await this.testAuthAPI());// 5. 测试关注列表接口（无token）\nresults.push(await this.testWatchlistNoToken());return results;}/**\n   * 测试后端基础连接\n   */static async testBackendConnection(){const startTime=Date.now();try{const response=await fetch(this.BACKEND_URL,{method:'GET',mode:'no-cors',signal:AbortSignal.timeout(5000)});const duration=Date.now()-startTime;return{test:'后端基础连接',success:true,message:`后端服务器响应正常 (${duration}ms)`,duration};}catch(error){const duration=Date.now()-startTime;return{test:'后端基础连接',success:false,message:`无法连接到后端服务器: ${error.message}`,details:{error:error.message,code:error.code},duration};}}/**\n   * 测试健康检查接口\n   */static async testHealthCheck(){const startTime=Date.now();try{const response=await fetch(`${this.API_URL}/health`,{method:'GET',mode:'cors',headers:{'Content-Type':'application/json'},signal:AbortSignal.timeout(10000)});const duration=Date.now()-startTime;if(response.ok){const data=await response.json();return{test:'健康检查接口',success:true,message:`健康检查通过 (${duration}ms)`,details:data,duration};}else{return{test:'健康检查接口',success:false,message:`健康检查失败: HTTP ${response.status}`,details:{status:response.status,statusText:response.statusText},duration};}}catch(error){const duration=Date.now()-startTime;return{test:'健康检查接口',success:false,message:`健康检查请求失败: ${error.message}`,details:{error:error.message,code:error.code},duration};}}/**\n   * 测试CORS配置\n   */static async testCORS(){const startTime=Date.now();try{// 发送一个OPTIONS预检请求\nconst response=await fetch(`${this.API_URL}/health`,{method:'OPTIONS',mode:'cors',headers:{'Origin':window.location.origin,'Access-Control-Request-Method':'GET','Access-Control-Request-Headers':'Content-Type,Authorization'},signal:AbortSignal.timeout(5000)});const duration=Date.now()-startTime;if(response.ok){const corsHeaders={'Access-Control-Allow-Origin':response.headers.get('Access-Control-Allow-Origin'),'Access-Control-Allow-Methods':response.headers.get('Access-Control-Allow-Methods'),'Access-Control-Allow-Headers':response.headers.get('Access-Control-Allow-Headers')};return{test:'CORS配置',success:true,message:`CORS配置正确 (${duration}ms)`,details:corsHeaders,duration};}else{return{test:'CORS配置',success:false,message:`CORS预检请求失败: HTTP ${response.status}`,details:{status:response.status},duration};}}catch(error){const duration=Date.now()-startTime;return{test:'CORS配置',success:false,message:`CORS测试失败: ${error.message}`,details:{error:error.message},duration};}}/**\n   * 测试认证接口\n   */static async testAuthAPI(){const startTime=Date.now();try{const response=await fetch(`${this.API_URL}/auth/login`,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify({username:'test',password:'test'}),signal:AbortSignal.timeout(10000)});const duration=Date.now()-startTime;const data=await response.json();// 认证失败是预期的，我们只是测试接口是否可达\nif(response.status===400||response.status===401){return{test:'认证接口',success:true,message:`认证接口可达 (${duration}ms)`,details:{status:response.status,message:data.message},duration};}else{return{test:'认证接口',success:false,message:`认证接口异常响应: HTTP ${response.status}`,details:{status:response.status,data},duration};}}catch(error){const duration=Date.now()-startTime;return{test:'认证接口',success:false,message:`认证接口请求失败: ${error.message}`,details:{error:error.message},duration};}}/**\n   * 测试关注列表接口（无token）\n   */static async testWatchlistNoToken(){const startTime=Date.now();try{const response=await fetch(`${this.API_URL}/watchlist`,{method:'GET',mode:'cors',headers:{'Content-Type':'application/json'},signal:AbortSignal.timeout(10000)});const duration=Date.now()-startTime;const data=await response.json();// 401未授权是预期的\nif(response.status===401){return{test:'关注列表接口',success:true,message:`关注列表接口可达，正确返回401未授权 (${duration}ms)`,details:{status:response.status,message:data.message},duration};}else{return{test:'关注列表接口',success:false,message:`关注列表接口异常响应: HTTP ${response.status}`,details:{status:response.status,data},duration};}}catch(error){const duration=Date.now()-startTime;return{test:'关注列表接口',success:false,message:`关注列表接口请求失败: ${error.message}`,details:{error:error.message,code:error.code},duration};}}/**\n   * 获取网络环境信息\n   */static getNetworkInfo(){return{userAgent:navigator.userAgent,onLine:navigator.onLine,connection:navigator.connection?{effectiveType:navigator.connection.effectiveType,downlink:navigator.connection.downlink,rtt:navigator.connection.rtt}:null,location:{origin:window.location.origin,hostname:window.location.hostname,port:window.location.port,protocol:window.location.protocol}};}/**\n   * 生成诊断报告\n   */static generateReport(results){const networkInfo=this.getNetworkInfo();const timestamp=new Date().toISOString();let report=`# StockInsight 网络诊断报告\\n\\n`;report+=`**生成时间**: ${timestamp}\\n\\n`;report+=`## 网络环境信息\\n`;report+=`- **在线状态**: ${networkInfo.onLine?'在线':'离线'}\\n`;report+=`- **当前地址**: ${networkInfo.location.origin}\\n`;report+=`- **协议**: ${networkInfo.location.protocol}\\n`;if(networkInfo.connection){report+=`- **连接类型**: ${networkInfo.connection.effectiveType}\\n`;report+=`- **下行速度**: ${networkInfo.connection.downlink} Mbps\\n`;report+=`- **延迟**: ${networkInfo.connection.rtt} ms\\n`;}report+=`\\n`;report+=`## 诊断结果\\n\\n`;results.forEach((result,index)=>{const status=result.success?'✅ 通过':'❌ 失败';report+=`### ${index+1}. ${result.test} - ${status}\\n`;report+=`**消息**: ${result.message}\\n`;if(result.duration){report+=`**耗时**: ${result.duration}ms\\n`;}if(result.details){report+=`**详情**: \\`${JSON.stringify(result.details,null,2)}\\`\\n`;}report+=`\\n`;});// 添加建议\nconst failedTests=results.filter(r=>!r.success);if(failedTests.length>0){report+=`## 问题解决建议\\n\\n`;failedTests.forEach(test=>{var _test$details;report+=`### ${test.test}\\n`;if(test.test==='后端基础连接'){report+=`- 确认后端服务已启动 (python app.py)\\n`;report+=`- 检查端口5000是否被占用\\n`;report+=`- 确认防火墙设置允许访问端口5000\\n`;}else if(test.test==='CORS配置'){report+=`- 检查后端CORS配置是否包含前端域名\\n`;report+=`- 确认浏览器没有阻止跨域请求\\n`;}else if(((_test$details=test.details)===null||_test$details===void 0?void 0:_test$details.code)==='TIMEOUT'){report+=`- 网络连接较慢，尝试增加超时时间\\n`;report+=`- 检查网络连接稳定性\\n`;}else{report+=`- 检查网络连接\\n`;report+=`- 重启前端和后端服务\\n`;report+=`- 清除浏览器缓存\\n`;}report+=`\\n`;});}else{report+=`## 结论\\n\\n`;report+=`所有网络连接测试均通过，网络配置正常。\\n`;}return report;}}NetworkDiagnostic.BACKEND_URL='http://localhost:5000';NetworkDiagnostic.API_URL='http://localhost:5000/api';","map":{"version":3,"names":["NetworkDiagnostic","runFullDiagnostic","results","push","testBackendConnection","testHealthCheck","testCORS","testAuthAPI","testWatchlistNoToken","startTime","Date","now","response","fetch","BACKEND_URL","method","mode","signal","AbortSignal","timeout","duration","test","success","message","error","details","code","API_URL","headers","ok","data","json","status","statusText","window","location","origin","corsHeaders","get","body","JSON","stringify","username","password","getNetworkInfo","userAgent","navigator","onLine","connection","effectiveType","downlink","rtt","hostname","port","protocol","generateReport","networkInfo","timestamp","toISOString","report","forEach","result","index","failedTests","filter","r","length","_test$details"],"sources":["E:/AICode/StockInsight/frontend/src/utils/networkDiagnostic.ts"],"sourcesContent":["/**\n * 网络连接诊断工具\n * 用于诊断前端到后端的网络连接问题\n */\n\nexport interface NetworkDiagnosticResult {\n  test: string;\n  success: boolean;\n  message: string;\n  details?: any;\n  duration?: number;\n}\n\nexport class NetworkDiagnostic {\n  private static readonly BACKEND_URL = 'http://localhost:5000';\n  private static readonly API_URL = 'http://localhost:5000/api';\n\n  /**\n   * 运行完整的网络诊断\n   */\n  static async runFullDiagnostic(): Promise<NetworkDiagnosticResult[]> {\n    const results: NetworkDiagnosticResult[] = [];\n\n    // 1. 测试后端基础连接\n    results.push(await this.testBackendConnection());\n\n    // 2. 测试健康检查接口\n    results.push(await this.testHealthCheck());\n\n    // 3. 测试CORS配置\n    results.push(await this.testCORS());\n\n    // 4. 测试认证接口\n    results.push(await this.testAuthAPI());\n\n    // 5. 测试关注列表接口（无token）\n    results.push(await this.testWatchlistNoToken());\n\n    return results;\n  }\n\n  /**\n   * 测试后端基础连接\n   */\n  private static async testBackendConnection(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(this.BACKEND_URL, {\n        method: 'GET',\n        mode: 'no-cors',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '后端基础连接',\n        success: true,\n        message: `后端服务器响应正常 (${duration}ms)`,\n        duration\n      };\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '后端基础连接',\n        success: false,\n        message: `无法连接到后端服务器: ${error.message}`,\n        details: { error: error.message, code: error.code },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试健康检查接口\n   */\n  private static async testHealthCheck(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_URL}/health`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      const duration = Date.now() - startTime;\n      \n      if (response.ok) {\n        const data = await response.json();\n        return {\n          test: '健康检查接口',\n          success: true,\n          message: `健康检查通过 (${duration}ms)`,\n          details: data,\n          duration\n        };\n      } else {\n        return {\n          test: '健康检查接口',\n          success: false,\n          message: `健康检查失败: HTTP ${response.status}`,\n          details: { status: response.status, statusText: response.statusText },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '健康检查接口',\n        success: false,\n        message: `健康检查请求失败: ${error.message}`,\n        details: { error: error.message, code: error.code },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试CORS配置\n   */\n  private static async testCORS(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      // 发送一个OPTIONS预检请求\n      const response = await fetch(`${this.API_URL}/health`, {\n        method: 'OPTIONS',\n        mode: 'cors',\n        headers: {\n          'Origin': window.location.origin,\n          'Access-Control-Request-Method': 'GET',\n          'Access-Control-Request-Headers': 'Content-Type,Authorization'\n        },\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      const duration = Date.now() - startTime;\n      \n      if (response.ok) {\n        const corsHeaders = {\n          'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),\n          'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),\n          'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')\n        };\n        \n        return {\n          test: 'CORS配置',\n          success: true,\n          message: `CORS配置正确 (${duration}ms)`,\n          details: corsHeaders,\n          duration\n        };\n      } else {\n        return {\n          test: 'CORS配置',\n          success: false,\n          message: `CORS预检请求失败: HTTP ${response.status}`,\n          details: { status: response.status },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: 'CORS配置',\n        success: false,\n        message: `CORS测试失败: ${error.message}`,\n        details: { error: error.message },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试认证接口\n   */\n  private static async testAuthAPI(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_URL}/auth/login`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: 'test',\n          password: 'test'\n        }),\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      const duration = Date.now() - startTime;\n      const data = await response.json();\n      \n      // 认证失败是预期的，我们只是测试接口是否可达\n      if (response.status === 400 || response.status === 401) {\n        return {\n          test: '认证接口',\n          success: true,\n          message: `认证接口可达 (${duration}ms)`,\n          details: { status: response.status, message: data.message },\n          duration\n        };\n      } else {\n        return {\n          test: '认证接口',\n          success: false,\n          message: `认证接口异常响应: HTTP ${response.status}`,\n          details: { status: response.status, data },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '认证接口',\n        success: false,\n        message: `认证接口请求失败: ${error.message}`,\n        details: { error: error.message },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 测试关注列表接口（无token）\n   */\n  private static async testWatchlistNoToken(): Promise<NetworkDiagnosticResult> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(`${this.API_URL}/watchlist`, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      const duration = Date.now() - startTime;\n      const data = await response.json();\n      \n      // 401未授权是预期的\n      if (response.status === 401) {\n        return {\n          test: '关注列表接口',\n          success: true,\n          message: `关注列表接口可达，正确返回401未授权 (${duration}ms)`,\n          details: { status: response.status, message: data.message },\n          duration\n        };\n      } else {\n        return {\n          test: '关注列表接口',\n          success: false,\n          message: `关注列表接口异常响应: HTTP ${response.status}`,\n          details: { status: response.status, data },\n          duration\n        };\n      }\n    } catch (error: any) {\n      const duration = Date.now() - startTime;\n      \n      return {\n        test: '关注列表接口',\n        success: false,\n        message: `关注列表接口请求失败: ${error.message}`,\n        details: { error: error.message, code: error.code },\n        duration\n      };\n    }\n  }\n\n  /**\n   * 获取网络环境信息\n   */\n  static getNetworkInfo(): any {\n    return {\n      userAgent: navigator.userAgent,\n      onLine: navigator.onLine,\n      connection: (navigator as any).connection ? {\n        effectiveType: (navigator as any).connection.effectiveType,\n        downlink: (navigator as any).connection.downlink,\n        rtt: (navigator as any).connection.rtt\n      } : null,\n      location: {\n        origin: window.location.origin,\n        hostname: window.location.hostname,\n        port: window.location.port,\n        protocol: window.location.protocol\n      }\n    };\n  }\n\n  /**\n   * 生成诊断报告\n   */\n  static generateReport(results: NetworkDiagnosticResult[]): string {\n    const networkInfo = this.getNetworkInfo();\n    const timestamp = new Date().toISOString();\n    \n    let report = `# StockInsight 网络诊断报告\\n\\n`;\n    report += `**生成时间**: ${timestamp}\\n\\n`;\n    \n    report += `## 网络环境信息\\n`;\n    report += `- **在线状态**: ${networkInfo.onLine ? '在线' : '离线'}\\n`;\n    report += `- **当前地址**: ${networkInfo.location.origin}\\n`;\n    report += `- **协议**: ${networkInfo.location.protocol}\\n`;\n    if (networkInfo.connection) {\n      report += `- **连接类型**: ${networkInfo.connection.effectiveType}\\n`;\n      report += `- **下行速度**: ${networkInfo.connection.downlink} Mbps\\n`;\n      report += `- **延迟**: ${networkInfo.connection.rtt} ms\\n`;\n    }\n    report += `\\n`;\n    \n    report += `## 诊断结果\\n\\n`;\n    \n    results.forEach((result, index) => {\n      const status = result.success ? '✅ 通过' : '❌ 失败';\n      report += `### ${index + 1}. ${result.test} - ${status}\\n`;\n      report += `**消息**: ${result.message}\\n`;\n      if (result.duration) {\n        report += `**耗时**: ${result.duration}ms\\n`;\n      }\n      if (result.details) {\n        report += `**详情**: \\`${JSON.stringify(result.details, null, 2)}\\`\\n`;\n      }\n      report += `\\n`;\n    });\n    \n    // 添加建议\n    const failedTests = results.filter(r => !r.success);\n    if (failedTests.length > 0) {\n      report += `## 问题解决建议\\n\\n`;\n      \n      failedTests.forEach(test => {\n        report += `### ${test.test}\\n`;\n        \n        if (test.test === '后端基础连接') {\n          report += `- 确认后端服务已启动 (python app.py)\\n`;\n          report += `- 检查端口5000是否被占用\\n`;\n          report += `- 确认防火墙设置允许访问端口5000\\n`;\n        } else if (test.test === 'CORS配置') {\n          report += `- 检查后端CORS配置是否包含前端域名\\n`;\n          report += `- 确认浏览器没有阻止跨域请求\\n`;\n        } else if (test.details?.code === 'TIMEOUT') {\n          report += `- 网络连接较慢，尝试增加超时时间\\n`;\n          report += `- 检查网络连接稳定性\\n`;\n        } else {\n          report += `- 检查网络连接\\n`;\n          report += `- 重启前端和后端服务\\n`;\n          report += `- 清除浏览器缓存\\n`;\n        }\n        report += `\\n`;\n      });\n    } else {\n      report += `## 结论\\n\\n`;\n      report += `所有网络连接测试均通过，网络配置正常。\\n`;\n    }\n    \n    return report;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}