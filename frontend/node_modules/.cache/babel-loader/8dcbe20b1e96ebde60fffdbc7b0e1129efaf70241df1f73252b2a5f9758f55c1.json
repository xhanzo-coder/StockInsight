{"ast":null,"code":"import*as XLSX from'xlsx/dist/xlsx.full.min.js';import{saveAs}from'file-saver/dist/FileSaver.min.js';// 将股票数据转换为导出格式\nconst prepareExportData=stocks=>{return stocks.map(stock=>({'股票代码':stock.code,'股票名称':stock.name,'当前价格':stock.current_price,'涨跌幅(%)':stock.change_percent,'涨跌额':stock.change_amount,'市值':stock.market_cap,'市赚率':stock.market_earning_ratio,'TTM市盈率':stock.pe_ratio_ttm,'ROE(%)':stock.roe,'市净率':stock.pb_ratio,'股利支付率(%)':stock.dividend_payout_ratio,'修正系数':stock.correction_factor,'修正市赚率':stock.corrected_market_earning_ratio,'理论股价':stock.theoretical_price}));};// 导出为Excel文件\nexport const exportToExcel=function(stocks){let fileName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'stock-data';const exportData=prepareExportData(stocks);const worksheet=XLSX.utils.json_to_sheet(exportData);const workbook=XLSX.utils.book_new();XLSX.utils.book_append_sheet(workbook,worksheet,'股票数据');// 生成Excel文件并下载\nconst excelBuffer=XLSX.write(workbook,{bookType:'xlsx',type:'array'});const data=new Blob([excelBuffer],{type:'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});saveAs(data,`${fileName}.xlsx`);};// 导出为CSV文件\nexport const exportToCSV=function(stocks){let fileName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'stock-data';const exportData=prepareExportData(stocks);const worksheet=XLSX.utils.json_to_sheet(exportData);const csvContent=XLSX.utils.sheet_to_csv(worksheet);// 生成CSV文件并下载\nconst data=new Blob([csvContent],{type:'text/csv;charset=utf-8;'});saveAs(data,`${fileName}.csv`);};","map":{"version":3,"names":["XLSX","saveAs","prepareExportData","stocks","map","stock","code","name","current_price","change_percent","change_amount","market_cap","market_earning_ratio","pe_ratio_ttm","roe","pb_ratio","dividend_payout_ratio","correction_factor","corrected_market_earning_ratio","theoretical_price","exportToExcel","fileName","arguments","length","undefined","exportData","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","type","data","Blob","exportToCSV","csvContent","sheet_to_csv"],"sources":["E:/AICode/StockInsight/frontend/src/utils/exportUtils.ts"],"sourcesContent":["import * as XLSX from 'xlsx/dist/xlsx.full.min.js';\nimport { saveAs } from 'file-saver/dist/FileSaver.min.js';\nimport { StockInfo } from '../services/api';\n\n// 将股票数据转换为导出格式\nconst prepareExportData = (stocks: StockInfo[]) => {\n  return stocks.map(stock => ({\n    '股票代码': stock.code,\n    '股票名称': stock.name,\n    '当前价格': stock.current_price,\n    '涨跌幅(%)': stock.change_percent,\n    '涨跌额': stock.change_amount,\n    '市值': stock.market_cap,\n    '市赚率': stock.market_earning_ratio,\n    'TTM市盈率': stock.pe_ratio_ttm,\n    'ROE(%)': stock.roe,\n    '市净率': stock.pb_ratio,\n    '股利支付率(%)': stock.dividend_payout_ratio,\n    '修正系数': stock.correction_factor,\n    '修正市赚率': stock.corrected_market_earning_ratio,\n    '理论股价': stock.theoretical_price\n  }));\n};\n\n// 导出为Excel文件\nexport const exportToExcel = (stocks: StockInfo[], fileName: string = 'stock-data') => {\n  const exportData = prepareExportData(stocks);\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, '股票数据');\n  \n  // 生成Excel文件并下载\n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const data = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(data, `${fileName}.xlsx`);\n};\n\n// 导出为CSV文件\nexport const exportToCSV = (stocks: StockInfo[], fileName: string = 'stock-data') => {\n  const exportData = prepareExportData(stocks);\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\n  const csvContent = XLSX.utils.sheet_to_csv(worksheet);\n  \n  // 生成CSV文件并下载\n  const data = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  saveAs(data, `${fileName}.csv`);\n};"],"mappings":"AAAA,MAAO,GAAK,CAAAA,IAAI,KAAM,4BAA4B,CAClD,OAASC,MAAM,KAAQ,kCAAkC,CAGzD;AACA,KAAM,CAAAC,iBAAiB,CAAIC,MAAmB,EAAK,CACjD,MAAO,CAAAA,MAAM,CAACC,GAAG,CAACC,KAAK,GAAK,CAC1B,MAAM,CAAEA,KAAK,CAACC,IAAI,CAClB,MAAM,CAAED,KAAK,CAACE,IAAI,CAClB,MAAM,CAAEF,KAAK,CAACG,aAAa,CAC3B,QAAQ,CAAEH,KAAK,CAACI,cAAc,CAC9B,KAAK,CAAEJ,KAAK,CAACK,aAAa,CAC1B,IAAI,CAAEL,KAAK,CAACM,UAAU,CACtB,KAAK,CAAEN,KAAK,CAACO,oBAAoB,CACjC,QAAQ,CAAEP,KAAK,CAACQ,YAAY,CAC5B,QAAQ,CAAER,KAAK,CAACS,GAAG,CACnB,KAAK,CAAET,KAAK,CAACU,QAAQ,CACrB,UAAU,CAAEV,KAAK,CAACW,qBAAqB,CACvC,MAAM,CAAEX,KAAK,CAACY,iBAAiB,CAC/B,OAAO,CAAEZ,KAAK,CAACa,8BAA8B,CAC7C,MAAM,CAAEb,KAAK,CAACc,iBAChB,CAAC,CAAC,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAG,QAAAA,CAACjB,MAAmB,CAAsC,IAApC,CAAAkB,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,YAAY,CAChF,KAAM,CAAAG,UAAU,CAAGvB,iBAAiB,CAACC,MAAM,CAAC,CAC5C,KAAM,CAAAuB,SAAS,CAAG1B,IAAI,CAAC2B,KAAK,CAACC,aAAa,CAACH,UAAU,CAAC,CACtD,KAAM,CAAAI,QAAQ,CAAG7B,IAAI,CAAC2B,KAAK,CAACG,QAAQ,CAAC,CAAC,CACtC9B,IAAI,CAAC2B,KAAK,CAACI,iBAAiB,CAACF,QAAQ,CAAEH,SAAS,CAAE,MAAM,CAAC,CAEzD;AACA,KAAM,CAAAM,WAAW,CAAGhC,IAAI,CAACiC,KAAK,CAACJ,QAAQ,CAAE,CAAEK,QAAQ,CAAE,MAAM,CAAEC,IAAI,CAAE,OAAQ,CAAC,CAAC,CAC7E,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAAC,CAACL,WAAW,CAAC,CAAE,CAAEG,IAAI,CAAE,mEAAoE,CAAC,CAAC,CACnHlC,MAAM,CAACmC,IAAI,CAAE,GAAGf,QAAQ,OAAO,CAAC,CAClC,CAAC,CAED;AACA,MAAO,MAAM,CAAAiB,WAAW,CAAG,QAAAA,CAACnC,MAAmB,CAAsC,IAApC,CAAAkB,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,YAAY,CAC9E,KAAM,CAAAG,UAAU,CAAGvB,iBAAiB,CAACC,MAAM,CAAC,CAC5C,KAAM,CAAAuB,SAAS,CAAG1B,IAAI,CAAC2B,KAAK,CAACC,aAAa,CAACH,UAAU,CAAC,CACtD,KAAM,CAAAc,UAAU,CAAGvC,IAAI,CAAC2B,KAAK,CAACa,YAAY,CAACd,SAAS,CAAC,CAErD;AACA,KAAM,CAAAU,IAAI,CAAG,GAAI,CAAAC,IAAI,CAAC,CAACE,UAAU,CAAC,CAAE,CAAEJ,IAAI,CAAE,yBAA0B,CAAC,CAAC,CACxElC,MAAM,CAACmC,IAAI,CAAE,GAAGf,QAAQ,MAAM,CAAC,CACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}