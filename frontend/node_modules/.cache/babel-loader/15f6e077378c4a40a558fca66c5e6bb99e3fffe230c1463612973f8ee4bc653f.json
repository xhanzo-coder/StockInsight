{"ast":null,"code":"var _jsxFileName = \"E:\\\\AICode\\\\StockInsight\\\\frontend\\\\src\\\\routes\\\\index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * 路由配置文件\n * 增强的路由守卫和认证状态处理\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n// 布局组件\nimport AuthLayout from '../layouts/AuthLayout';\nimport DashboardLayout from '../layouts/DashboardLayout';\n\n// 页面组件\nimport HomePage from '../pages/HomePage';\nimport LoginPage from '../pages/LoginPage';\nimport RegisterPage from '../pages/RegisterPage';\nimport DashboardPage from '../pages/DashboardPage';\n\n// 加载组件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingScreen = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"loading-container\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-spinner\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u52A0\\u8F7D\\u4E2D...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 3\n}, this);\n\n// 路由守卫组件 - 保护需要登录的路由\n_c = LoadingScreen;\nconst ProtectedRoute = ({\n  element\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isLoading,\n    verifySession\n  } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // 检查登录状态是否有效\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果已经在加载中，不重复验证\n      if (isLoading || isVerifying) {\n        console.log('ProtectedRoute: 认证状态加载中或验证中，跳过验证');\n        return;\n      }\n\n      // 检查token是否存在\n      const token = localStorage.getItem('auth_token');\n      console.log('ProtectedRoute: 检查token是否存在:', !!token);\n\n      // 如果未认证或有token但未验证，尝试验证会话\n      if (!isAuthenticated || token && !isAuthenticated) {\n        console.log('ProtectedRoute: 尝试验证会话...');\n        setIsVerifying(true);\n        try {\n          // 确保verifySession存在\n          if (!verifySession) {\n            console.error('verifySession函数未定义');\n            navigate('/login', {\n              replace: true\n            });\n            return;\n          }\n          const verified = await verifySession();\n          console.log('ProtectedRoute: 会话验证结果:', verified);\n          if (!verified) {\n            console.log('未检测到有效登录状态，重定向到登录页面');\n            // 保存当前路径，以便登录后返回\n            sessionStorage.setItem('redirectAfterLogin', location.pathname);\n            navigate('/login', {\n              replace: true\n            });\n          } else {\n            console.log('会话验证成功，允许访问受保护路由');\n          }\n        } catch (error) {\n          console.error('会话验证出错', error);\n          navigate('/login', {\n            replace: true\n          });\n        } finally {\n          setIsVerifying(false);\n        }\n      } else {\n        console.log('ProtectedRoute: 用户已认证，允许访问');\n      }\n    };\n    checkAuth();\n  }, [isAuthenticated, isLoading, navigate, location, verifySession, isVerifying]);\n\n  // 如果正在加载认证状态或验证中，显示加载中\n  if (isLoading || isVerifying) {\n    console.log('ProtectedRoute: 显示加载界面');\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 如果已认证，显示受保护的组件，否则重定向到登录页面\n  console.log('ProtectedRoute: 认证状态:', isAuthenticated);\n  return isAuthenticated ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 38\n  }, this);\n};\n\n// 公共路由组件 - 已登录用户会被重定向到仪表盘\n_s(ProtectedRoute, \"wsarcXmmrx8qXcuhu4TNvs8Dh7o=\", false, function () {\n  return [useAuth, useNavigate, useLocation];\n});\n_c2 = ProtectedRoute;\nconst PublicRoute = ({\n  element\n}) => {\n  _s2();\n  const {\n    isAuthenticated,\n    isLoading,\n    verifySession\n  } = useAuth();\n  const navigate = useNavigate();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // 检查token和用户信息是否存在\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果已经在加载中，不重复验证\n      if (isLoading || isVerifying) return;\n\n      // 如果本地状态显示已登录，验证会话\n      if (isAuthenticated) {\n        console.log('PublicRoute: 验证会话...');\n        setIsVerifying(true);\n        try {\n          const verified = (await (verifySession === null || verifySession === void 0 ? void 0 : verifySession())) || true;\n          if (verified) {\n            console.log('检测到有效登录状态，重定向到仪表盘');\n            // 获取登录后的重定向路径\n            const redirectPath = sessionStorage.getItem('redirectAfterLogin') || '/dashboard';\n            sessionStorage.removeItem('redirectAfterLogin');\n            navigate(redirectPath, {\n              replace: true\n            });\n          }\n        } catch (error) {\n          console.error('会话验证出错', error);\n        } finally {\n          setIsVerifying(false);\n        }\n      }\n    };\n    checkAuth();\n  }, [isAuthenticated, isLoading, navigate, verifySession]);\n\n  // 如果正在加载认证状态或验证中，显示加载中\n  if (isLoading || isVerifying) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 如果已登录，重定向到仪表盘\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/dashboard\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 28\n  }, this) : element;\n};\n\n// 路由配置组件\n_s2(PublicRoute, \"6LsncyreN7GbiEflF3Rt49Ydyd4=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c3 = PublicRoute;\nconst AppRoutes = () => {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        element: /*#__PURE__*/_jsxDEV(AuthLayout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(PublicRoute, {\n            element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 63\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/register\",\n          element: /*#__PURE__*/_jsxDEV(PublicRoute, {\n            element: /*#__PURE__*/_jsxDEV(RegisterPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 66\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        element: /*#__PURE__*/_jsxDEV(DashboardLayout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/dashboard\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            element: /*#__PURE__*/_jsxDEV(DashboardPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 70\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_c4 = AppRoutes;\nexport default AppRoutes;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"LoadingScreen\");\n$RefreshReg$(_c2, \"ProtectedRoute\");\n$RefreshReg$(_c3, \"PublicRoute\");\n$RefreshReg$(_c4, \"AppRoutes\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Routes","Route","Navigate","useNavigate","useLocation","useAuth","AuthLayout","DashboardLayout","HomePage","LoginPage","RegisterPage","DashboardPage","jsxDEV","_jsxDEV","LoadingScreen","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","ProtectedRoute","element","_s","isAuthenticated","isLoading","verifySession","navigate","location","isVerifying","setIsVerifying","checkAuth","console","log","token","localStorage","getItem","error","replace","verified","sessionStorage","setItem","pathname","to","_c2","PublicRoute","_s2","redirectPath","removeItem","_c3","AppRoutes","path","_c4","$RefreshReg$"],"sources":["E:/AICode/StockInsight/frontend/src/routes/index.tsx"],"sourcesContent":["/**\n * 路由配置文件\n * 增强的路由守卫和认证状态处理\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { tokenManager } from '../services/api';\n\n// 布局组件\nimport AuthLayout from '../layouts/AuthLayout';\nimport DashboardLayout from '../layouts/DashboardLayout';\n\n// 页面组件\nimport HomePage from '../pages/HomePage';\nimport LoginPage from '../pages/LoginPage';\nimport RegisterPage from '../pages/RegisterPage';\nimport DashboardPage from '../pages/DashboardPage';\n\n// 加载组件\nconst LoadingScreen = () => (\n  <div className=\"loading-container\">\n    <div className=\"loading-spinner\"></div>\n    <p>加载中...</p>\n  </div>\n);\n\n// 路由守卫组件 - 保护需要登录的路由\nconst ProtectedRoute: React.FC<{ element: React.ReactElement }> = ({ element }) => {\n  const { isAuthenticated, isLoading, verifySession } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // 检查登录状态是否有效\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果已经在加载中，不重复验证\n      if (isLoading || isVerifying) {\n        console.log('ProtectedRoute: 认证状态加载中或验证中，跳过验证');\n        return;\n      }\n\n      // 检查token是否存在\n      const token = localStorage.getItem('auth_token');\n      console.log('ProtectedRoute: 检查token是否存在:', !!token);\n\n      // 如果未认证或有token但未验证，尝试验证会话\n      if (!isAuthenticated || (token && !isAuthenticated)) {\n        console.log('ProtectedRoute: 尝试验证会话...');\n        setIsVerifying(true);\n        \n        try {\n          // 确保verifySession存在\n          if (!verifySession) {\n            console.error('verifySession函数未定义');\n            navigate('/login', { replace: true });\n            return;\n          }\n\n          const verified = await verifySession();\n          console.log('ProtectedRoute: 会话验证结果:', verified);\n          \n          if (!verified) {\n            console.log('未检测到有效登录状态，重定向到登录页面');\n            // 保存当前路径，以便登录后返回\n            sessionStorage.setItem('redirectAfterLogin', location.pathname);\n            navigate('/login', { replace: true });\n          } else {\n            console.log('会话验证成功，允许访问受保护路由');\n          }\n        } catch (error) {\n          console.error('会话验证出错', error);\n          navigate('/login', { replace: true });\n        } finally {\n          setIsVerifying(false);\n        }\n      } else {\n        console.log('ProtectedRoute: 用户已认证，允许访问');\n      }\n    };\n\n    checkAuth();\n  }, [isAuthenticated, isLoading, navigate, location, verifySession, isVerifying]);\n\n  // 如果正在加载认证状态或验证中，显示加载中\n  if (isLoading || isVerifying) {\n    console.log('ProtectedRoute: 显示加载界面');\n    return <LoadingScreen />;\n  }\n\n  // 如果已认证，显示受保护的组件，否则重定向到登录页面\n  console.log('ProtectedRoute: 认证状态:', isAuthenticated);\n  return isAuthenticated ? element : <Navigate to=\"/login\" replace />;\n};\n\n// 公共路由组件 - 已登录用户会被重定向到仪表盘\nconst PublicRoute: React.FC<{ element: React.ReactElement }> = ({ element }) => {\n  const { isAuthenticated, isLoading, verifySession } = useAuth();\n  const navigate = useNavigate();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // 检查token和用户信息是否存在\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果已经在加载中，不重复验证\n      if (isLoading || isVerifying) return;\n\n      // 如果本地状态显示已登录，验证会话\n      if (isAuthenticated) {\n        console.log('PublicRoute: 验证会话...');\n        setIsVerifying(true);\n        \n        try {\n          const verified = await verifySession?.() || true;\n          \n          if (verified) {\n            console.log('检测到有效登录状态，重定向到仪表盘');\n            // 获取登录后的重定向路径\n            const redirectPath = sessionStorage.getItem('redirectAfterLogin') || '/dashboard';\n            sessionStorage.removeItem('redirectAfterLogin');\n            navigate(redirectPath, { replace: true });\n          }\n        } catch (error) {\n          console.error('会话验证出错', error);\n        } finally {\n          setIsVerifying(false);\n        }\n      }\n    };\n\n    checkAuth();\n  }, [isAuthenticated, isLoading, navigate, verifySession]);\n\n  // 如果正在加载认证状态或验证中，显示加载中\n  if (isLoading || isVerifying) {\n    return <LoadingScreen />;\n  }\n\n  // 如果已登录，重定向到仪表盘\n  return isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : element;\n};\n\n// 路由配置组件\nconst AppRoutes: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        {/* 主页路由 */}\n        <Route path=\"/\" element={<HomePage />} />\n        \n        {/* 认证相关路由 - 使用AuthLayout */}\n        <Route element={<AuthLayout />}>\n          <Route path=\"/login\" element={<PublicRoute element={<LoginPage />} />} />\n          <Route path=\"/register\" element={<PublicRoute element={<RegisterPage />} />} />\n        </Route>\n        \n        {/* 仪表盘相关路由 - 使用DashboardLayout */}\n        <Route element={<DashboardLayout />}>\n          <Route path=\"/dashboard\" element={<ProtectedRoute element={<DashboardPage />} />} />\n          {/* 可以添加更多仪表盘相关的子路由 */}\n        </Route>\n        \n        {/* 404页面 */}\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRoutes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}