{"ast":null,"code":"/**\n * 认证服务\n * 处理用户登录、注册、令牌管理等功能\n */\n\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { tokenManager } from './api';\n\n// 创建认证专用的 axios 实例\nconst authApi = axios.create({\n  baseURL: 'http://localhost:5000/api/auth',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 添加请求拦截器 - 自动添加token到请求头\nauthApi.interceptors.request.use(config => {\n  const token = tokenManager.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器 - 处理token过期\nauthApi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 处理401错误（未授权，通常是token过期或无效）\n  if (error.response && error.response.status === 401) {\n    console.log('Token已过期或无效，清除本地token和用户信息');\n    tokenManager.removeToken();\n    localStorage.removeItem('userInfo');\n    // 重定向到登录页\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 用户数据类型\n\n// 登录请求数据\n\n// 注册请求数据\n\n// 认证响应数据\n\n// API 响应格式\n\n// 认证服务类\nexport class AuthService {\n  /**\n   * 用户注册\n   */\n  async register(userData) {\n    try {\n      const response = await authApi.post('/register', userData);\n      const data = response.data;\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('注册成功！');\n        return data;\n      } else {\n        message.error(data.message || '注册失败');\n        return data;\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '注册失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  }\n\n  /**\n   * 用户登录\n   */\n  async login(credentials) {\n    try {\n      console.log('开始登录请求:', credentials);\n      console.log('API URL:', authApi.defaults.baseURL);\n      const response = await authApi.post('/login', credentials);\n      console.log('登录响应:', response.data);\n      const data = response.data;\n      if (data.success && data.data) {\n        // 保存令牌到localStorage - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('登录成功！');\n        return data;\n      } else {\n        console.error('登录失败:', data.message);\n        message.error(data.message || '登录失败');\n        return data;\n      }\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data;\n      console.error('登录请求异常:', error);\n      console.error('错误响应:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || '登录失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  }\n\n  /**\n   * 验证令牌\n   */\n  async verifyToken() {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        console.log('没有找到token，无法验证');\n        return {\n          success: false\n        };\n      }\n      console.log('开始验证token...');\n      const response = await authApi.get('/verify');\n      // 请求拦截器会自动添加Authorization头\n\n      const data = response.data;\n      if (data.success && data.data && data.data.user) {\n        console.log('Token验证成功，用户信息:', data.data.user);\n        return {\n          success: true,\n          user: data.data.user\n        };\n      } else {\n        console.log('Token验证失败，服务器返回:', data);\n        tokenManager.removeToken();\n        return {\n          success: false\n        };\n      }\n    } catch (error) {\n      var _error$response4, _error$response5;\n      console.error('令牌验证失败:', error);\n      console.error('错误状态码:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status);\n      console.error('错误详情:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n\n      // 清除无效的token\n      tokenManager.removeToken();\n      return {\n        success: false\n      };\n    }\n  }\n\n  /**\n   * 获取用户资料\n   */\n  async getProfile() {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return {\n          success: false\n        };\n      }\n      const response = await authApi.get('/profile');\n      // 请求拦截器会自动添加Authorization头\n\n      const data = response.data;\n      if (data.success && data.data && data.data.user) {\n        return {\n          success: true,\n          user: data.data.user\n        };\n      } else {\n        return {\n          success: false\n        };\n      }\n    } catch (error) {\n      console.error('获取用户资料失败:', error);\n      return {\n        success: false\n      };\n    }\n  }\n\n  /**\n   * 用户登出\n   */\n  async logout() {\n    try {\n      const token = tokenManager.getToken();\n      if (token) {\n        // 可选：调用后端登出接口\n        await authApi.post('/logout');\n        // 注意：由于添加了请求拦截器，这里不需要手动添加Authorization头\n      }\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 无论如何都要清除本地令牌\n      tokenManager.removeToken();\n    }\n  }\n\n  /**\n   * 检查是否已认证\n   */\n  isAuthenticated() {\n    return tokenManager.isAuthenticated();\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","message","tokenManager","authApi","create","baseURL","timeout","headers","interceptors","request","use","config","token","getToken","Authorization","error","Promise","reject","response","status","console","log","removeToken","localStorage","removeItem","window","location","href","AuthService","register","userData","post","data","success","setToken","_error$response","_error$response$data","errorMessage","login","credentials","defaults","_error$response2","_error$response3","_error$response3$data","verifyToken","get","user","_error$response4","_error$response5","getProfile","logout","isAuthenticated","authService"],"sources":["E:/AICode/StockInsight/frontend/src/services/authService.ts"],"sourcesContent":["/**\n * 认证服务\n * 处理用户登录、注册、令牌管理等功能\n */\n\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { tokenManager } from './api';\n\n// 创建认证专用的 axios 实例\nconst authApi = axios.create({\n  baseURL: 'http://localhost:5000/api/auth',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 添加请求拦截器 - 自动添加token到请求头\nauthApi.interceptors.request.use(\n  (config) => {\n    const token = tokenManager.getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 添加响应拦截器 - 处理token过期\nauthApi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // 处理401错误（未授权，通常是token过期或无效）\n    if (error.response && error.response.status === 401) {\n      console.log('Token已过期或无效，清除本地token和用户信息');\n      tokenManager.removeToken();\n      localStorage.removeItem('userInfo');\n      // 重定向到登录页\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 用户数据类型\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  created_at: string;\n}\n\n// 登录请求数据\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\n// 注册请求数据\nexport interface RegisterRequest {\n  username: string;\n  email: string;\n  password: string;\n}\n\n// 认证响应数据\nexport interface AuthResponse {\n  user: User;\n  token: string; // 后端返回的是token字段，而不是access_token\n}\n\n// API 响应格式\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  message?: string;\n}\n\n// 认证服务类\nexport class AuthService {\n\n  /**\n   * 用户注册\n   */\n  async register(userData: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await authApi.post('/register', userData);\n      const data = response.data;\n\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('注册成功！');\n        return data;\n      } else {\n        message.error(data.message || '注册失败');\n        return data;\n      }\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || '注册失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * 用户登录\n   */\n  async login(credentials: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    try {\n      console.log('开始登录请求:', credentials);\n      console.log('API URL:', authApi.defaults.baseURL);\n      \n      const response = await authApi.post('/login', credentials);\n      console.log('登录响应:', response.data);\n      \n      const data = response.data;\n\n      if (data.success && data.data) {\n        // 保存令牌到localStorage - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('登录成功！');\n        return data;\n      } else {\n        console.error('登录失败:', data.message);\n        message.error(data.message || '登录失败');\n        return data;\n      }\n    } catch (error: any) {\n      console.error('登录请求异常:', error);\n      console.error('错误响应:', error.response?.data);\n      const errorMessage = error.response?.data?.message || '登录失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * 验证令牌\n   */\n  async verifyToken(): Promise<{ success: boolean; user?: User }> {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        console.log('没有找到token，无法验证');\n        return { success: false };\n      }\n\n      console.log('开始验证token...');\n      const response = await authApi.get('/verify');\n      // 请求拦截器会自动添加Authorization头\n\n      const data = response.data;\n      if (data.success && data.data && data.data.user) {\n        console.log('Token验证成功，用户信息:', data.data.user);\n        return { success: true, user: data.data.user };\n      } else {\n        console.log('Token验证失败，服务器返回:', data);\n        tokenManager.removeToken();\n        return { success: false };\n      }\n    } catch (error: any) {\n      console.error('令牌验证失败:', error);\n      console.error('错误状态码:', error.response?.status);\n      console.error('错误详情:', error.response?.data);\n      \n      // 清除无效的token\n      tokenManager.removeToken();\n      return { success: false };\n    }\n  }\n\n  /**\n   * 获取用户资料\n   */\n  async getProfile(): Promise<{ success: boolean; user?: User }> {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return { success: false };\n      }\n\n      const response = await authApi.get('/profile');\n      // 请求拦截器会自动添加Authorization头\n\n      const data = response.data;\n      if (data.success && data.data && data.data.user) {\n        return { success: true, user: data.data.user };\n      } else {\n        return { success: false };\n      }\n    } catch (error) {\n      console.error('获取用户资料失败:', error);\n      return { success: false };\n    }\n  }\n\n  /**\n   * 用户登出\n   */\n  async logout(): Promise<void> {\n    try {\n      const token = tokenManager.getToken();\n      if (token) {\n        // 可选：调用后端登出接口\n        await authApi.post('/logout');\n        // 注意：由于添加了请求拦截器，这里不需要手动添加Authorization头\n      }\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 无论如何都要清除本地令牌\n      tokenManager.removeToken();\n    }\n  }\n\n  /**\n   * 检查是否已认证\n   */\n  isAuthenticated(): boolean {\n    return tokenManager.isAuthenticated();\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}