{"ast":null,"code":"var _jsxFileName = \"E:\\\\AICode\\\\StockInsight\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * 认证上下文\n * 提供全局的用户状态管理\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user;\n\n  // 初始化时验证令牌\n  useEffect(() => {\n    const initAuth = async () => {\n      setIsLoading(true);\n      if (authService.isAuthenticated()) {\n        const result = await authService.verifyToken();\n        if (result.success && result.user) {\n          setUser(result.user);\n        } else {\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      setIsLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const result = await authService.login({\n        username,\n        password\n      });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('登录失败:', error);\n      return false;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const result = await authService.register({\n        username,\n        email,\n        password\n      });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('注册失败:', error);\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n  const refreshUser = async () => {\n    if (authService.isAuthenticated()) {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        setUser(result.user);\n      }\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","isAuthenticated","initAuth","result","verifyToken","success","login","username","password","data","error","console","register","email","logout","refreshUser","getProfile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["E:/AICode/StockInsight/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["/**\n * 认证上下文\n * 提供全局的用户状态管理\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { authService, User } from '../services/authService';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user;\n\n  // 初始化时验证令牌\n  useEffect(() => {\n    const initAuth = async () => {\n      setIsLoading(true);\n      \n      if (authService.isAuthenticated()) {\n        const result = await authService.verifyToken();\n        if (result.success && result.user) {\n          setUser(result.user);\n        } else {\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      \n      setIsLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const result = await authService.login({ username, password });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('登录失败:', error);\n      return false;\n    }\n  };\n\n  const register = async (username: string, email: string, password: string): Promise<boolean> => {\n    try {\n      const result = await authService.register({ username, email, password });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('注册失败:', error);\n      return false;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n\n  const refreshUser = async (): Promise<void> => {\n    if (authService.isAuthenticated()) {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        setUser(result.user);\n      }\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}