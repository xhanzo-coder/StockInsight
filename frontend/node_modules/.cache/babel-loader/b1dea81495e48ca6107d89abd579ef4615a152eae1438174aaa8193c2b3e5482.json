{"ast":null,"code":"/**\n * 股票数据缓存工具类\n * 支持交易时间和非交易时间的不同缓存策略\n */class StockCache{constructor(){this.TRADING_CACHE_DURATION=2;// 2分钟\nthis.NON_TRADING_CACHE_DURATION=30;// 30分钟\nthis.CACHE_PREFIX='stock_cache_';}/**\n   * 判断当前是否为交易时间\n   * 交易时间：周一到周五 9:30-11:30, 13:00-15:00\n   */isTradingTime(){const now=new Date();const day=now.getDay();// 0=周日, 1=周一, ..., 6=周六\nconst hour=now.getHours();const minute=now.getMinutes();const timeInMinutes=hour*60+minute;// 非工作日\nif(day===0||day===6){return false;}// 上午交易时间：9:30-11:30\nconst morningStart=9*60+30;// 9:30\nconst morningEnd=11*60+30;// 11:30\n// 下午交易时间：13:00-15:00\nconst afternoonStart=13*60;// 13:00\nconst afternoonEnd=15*60;// 15:00\nreturn timeInMinutes>=morningStart&&timeInMinutes<=morningEnd||timeInMinutes>=afternoonStart&&timeInMinutes<=afternoonEnd;}/**\n   * 获取缓存过期时间\n   */getExpireTime(options){const isTrading=this.isTradingTime();const duration=isTrading?(options===null||options===void 0?void 0:options.tradingCacheDuration)||this.TRADING_CACHE_DURATION:(options===null||options===void 0?void 0:options.nonTradingCacheDuration)||this.NON_TRADING_CACHE_DURATION;return Date.now()+duration*60*1000;}/**\n   * 生成缓存键名\n   */getCacheKey(key){return`${this.CACHE_PREFIX}${key}`;}/**\n   * 设置缓存\n   */set(key,data,options){try{const cacheItem={data,timestamp:Date.now(),expireTime:this.getExpireTime(options)};localStorage.setItem(this.getCacheKey(key),JSON.stringify(cacheItem));}catch(error){console.warn('缓存设置失败:',error);}}/**\n   * 获取缓存\n   */get(key){try{const cached=localStorage.getItem(this.getCacheKey(key));if(!cached){return null;}const cacheItem=JSON.parse(cached);// 检查是否过期\nif(Date.now()>cacheItem.expireTime){this.remove(key);return null;}return cacheItem.data;}catch(error){console.warn('缓存读取失败:',error);this.remove(key);return null;}}/**\n   * 获取缓存信息（包含时间戳）\n   */getCacheInfo(key){try{const cached=localStorage.getItem(this.getCacheKey(key));if(!cached){return null;}const cacheItem=JSON.parse(cached);// 检查是否过期\nif(Date.now()>cacheItem.expireTime){this.remove(key);return null;}return{data:cacheItem.data,timestamp:cacheItem.timestamp};}catch(error){console.warn('缓存信息读取失败:',error);this.remove(key);return null;}}/**\n   * 检查缓存是否存在且有效\n   */has(key){return this.get(key)!==null;}/**\n   * 删除指定缓存\n   */remove(key){try{localStorage.removeItem(this.getCacheKey(key));}catch(error){console.warn('缓存删除失败:',error);}}/**\n   * 清空所有股票相关缓存\n   */clear(){try{const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith(this.CACHE_PREFIX)){localStorage.removeItem(key);}});}catch(error){console.warn('缓存清空失败:',error);}}/**\n   * 获取缓存统计信息\n   */getStats(){let count=0;let totalSize=0;try{const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith(this.CACHE_PREFIX)){count++;const value=localStorage.getItem(key);if(value){totalSize+=value.length;}}});}catch(error){console.warn('缓存统计失败:',error);}return{count,totalSize};}/**\n   * 格式化时间戳为可读格式\n   */formatTimestamp(timestamp){const date=new Date(timestamp);const now=new Date();const diff=now.getTime()-timestamp;// 如果是今天\nif(date.toDateString()===now.toDateString()){if(diff<60000){// 1分钟内\nreturn'刚刚';}else if(diff<3600000){// 1小时内\nconst minutes=Math.floor(diff/60000);return`${minutes}分钟前`;}else{return date.toLocaleTimeString('zh-CN',{hour:'2-digit',minute:'2-digit'});}}else{return date.toLocaleString('zh-CN',{month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit'});}}}// 导出单例实例\nexport const stockCache=new StockCache();// 导出类型\n// 导出常用的缓存键名\nexport const CACHE_KEYS={WATCHLIST:'watchlist',MARKET_OVERVIEW:'market_overview',STOCK_DETAIL:code=>`stock_detail_${code}`,STOCK_HISTORY:(code,period)=>`stock_history_${code}_${period}`,SEARCH_RESULTS:query=>`search_${query}`};","map":{"version":3,"names":["StockCache","constructor","TRADING_CACHE_DURATION","NON_TRADING_CACHE_DURATION","CACHE_PREFIX","isTradingTime","now","Date","day","getDay","hour","getHours","minute","getMinutes","timeInMinutes","morningStart","morningEnd","afternoonStart","afternoonEnd","getExpireTime","options","isTrading","duration","tradingCacheDuration","nonTradingCacheDuration","getCacheKey","key","set","data","cacheItem","timestamp","expireTime","localStorage","setItem","JSON","stringify","error","console","warn","get","cached","getItem","parse","remove","getCacheInfo","has","removeItem","clear","keys","Object","forEach","startsWith","getStats","count","totalSize","value","length","formatTimestamp","date","diff","getTime","toDateString","minutes","Math","floor","toLocaleTimeString","toLocaleString","month","stockCache","CACHE_KEYS","WATCHLIST","MARKET_OVERVIEW","STOCK_DETAIL","code","STOCK_HISTORY","period","SEARCH_RESULTS","query"],"sources":["E:/AICode/StockInsight/frontend/src/utils/stockCache.ts"],"sourcesContent":["/**\n * 股票数据缓存工具类\n * 支持交易时间和非交易时间的不同缓存策略\n */\n\nexport interface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  expireTime: number;\n}\n\nexport interface CacheOptions {\n  /** 交易时间缓存时长（分钟），默认2分钟 */\n  tradingCacheDuration?: number;\n  /** 非交易时间缓存时长（分钟），默认30分钟 */\n  nonTradingCacheDuration?: number;\n}\n\nclass StockCache {\n  private readonly TRADING_CACHE_DURATION = 2; // 2分钟\n  private readonly NON_TRADING_CACHE_DURATION = 30; // 30分钟\n  private readonly CACHE_PREFIX = 'stock_cache_';\n\n  /**\n   * 判断当前是否为交易时间\n   * 交易时间：周一到周五 9:30-11:30, 13:00-15:00\n   */\n  private isTradingTime(): boolean {\n    const now = new Date();\n    const day = now.getDay(); // 0=周日, 1=周一, ..., 6=周六\n    const hour = now.getHours();\n    const minute = now.getMinutes();\n    const timeInMinutes = hour * 60 + minute;\n\n    // 非工作日\n    if (day === 0 || day === 6) {\n      return false;\n    }\n\n    // 上午交易时间：9:30-11:30\n    const morningStart = 9 * 60 + 30; // 9:30\n    const morningEnd = 11 * 60 + 30;   // 11:30\n    \n    // 下午交易时间：13:00-15:00\n    const afternoonStart = 13 * 60;    // 13:00\n    const afternoonEnd = 15 * 60;      // 15:00\n\n    return (timeInMinutes >= morningStart && timeInMinutes <= morningEnd) ||\n           (timeInMinutes >= afternoonStart && timeInMinutes <= afternoonEnd);\n  }\n\n  /**\n   * 获取缓存过期时间\n   */\n  private getExpireTime(options?: CacheOptions): number {\n    const isTrading = this.isTradingTime();\n    const duration = isTrading \n      ? (options?.tradingCacheDuration || this.TRADING_CACHE_DURATION)\n      : (options?.nonTradingCacheDuration || this.NON_TRADING_CACHE_DURATION);\n    \n    return Date.now() + duration * 60 * 1000;\n  }\n\n  /**\n   * 生成缓存键名\n   */\n  private getCacheKey(key: string): string {\n    return `${this.CACHE_PREFIX}${key}`;\n  }\n\n  /**\n   * 设置缓存\n   */\n  set<T>(key: string, data: T, options?: CacheOptions): void {\n    try {\n      const cacheItem: CacheItem<T> = {\n        data,\n        timestamp: Date.now(),\n        expireTime: this.getExpireTime(options)\n      };\n      \n      localStorage.setItem(this.getCacheKey(key), JSON.stringify(cacheItem));\n    } catch (error) {\n      console.warn('缓存设置失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存\n   */\n  get<T>(key: string): T | null {\n    try {\n      const cached = localStorage.getItem(this.getCacheKey(key));\n      if (!cached) {\n        return null;\n      }\n\n      const cacheItem: CacheItem<T> = JSON.parse(cached);\n      \n      // 检查是否过期\n      if (Date.now() > cacheItem.expireTime) {\n        this.remove(key);\n        return null;\n      }\n\n      return cacheItem.data;\n    } catch (error) {\n      console.warn('缓存读取失败:', error);\n      this.remove(key);\n      return null;\n    }\n  }\n\n  /**\n   * 获取缓存信息（包含时间戳）\n   */\n  getCacheInfo<T>(key: string): { data: T; timestamp: number } | null {\n    try {\n      const cached = localStorage.getItem(this.getCacheKey(key));\n      if (!cached) {\n        return null;\n      }\n\n      const cacheItem: CacheItem<T> = JSON.parse(cached);\n      \n      // 检查是否过期\n      if (Date.now() > cacheItem.expireTime) {\n        this.remove(key);\n        return null;\n      }\n\n      return {\n        data: cacheItem.data,\n        timestamp: cacheItem.timestamp\n      };\n    } catch (error) {\n      console.warn('缓存信息读取失败:', error);\n      this.remove(key);\n      return null;\n    }\n  }\n\n  /**\n   * 检查缓存是否存在且有效\n   */\n  has(key: string): boolean {\n    return this.get(key) !== null;\n  }\n\n  /**\n   * 删除指定缓存\n   */\n  remove(key: string): void {\n    try {\n      localStorage.removeItem(this.getCacheKey(key));\n    } catch (error) {\n      console.warn('缓存删除失败:', error);\n    }\n  }\n\n  /**\n   * 清空所有股票相关缓存\n   */\n  clear(): void {\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_PREFIX)) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.warn('缓存清空失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats(): { count: number; totalSize: number } {\n    let count = 0;\n    let totalSize = 0;\n\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_PREFIX)) {\n          count++;\n          const value = localStorage.getItem(key);\n          if (value) {\n            totalSize += value.length;\n          }\n        }\n      });\n    } catch (error) {\n      console.warn('缓存统计失败:', error);\n    }\n\n    return { count, totalSize };\n  }\n\n  /**\n   * 格式化时间戳为可读格式\n   */\n  formatTimestamp(timestamp: number): string {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - timestamp;\n    \n    // 如果是今天\n    if (date.toDateString() === now.toDateString()) {\n      if (diff < 60000) { // 1分钟内\n        return '刚刚';\n      } else if (diff < 3600000) { // 1小时内\n        const minutes = Math.floor(diff / 60000);\n        return `${minutes}分钟前`;\n      } else {\n        return date.toLocaleTimeString('zh-CN', { \n          hour: '2-digit', \n          minute: '2-digit' \n        });\n      }\n    } else {\n      return date.toLocaleString('zh-CN', {\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }\n}\n\n// 导出单例实例\nexport const stockCache = new StockCache();\n\n// 导出类型\nexport type { StockCache };\n\n// 导出常用的缓存键名\nexport const CACHE_KEYS = {\n  WATCHLIST: 'watchlist',\n  MARKET_OVERVIEW: 'market_overview',\n  STOCK_DETAIL: (code: string) => `stock_detail_${code}`,\n  STOCK_HISTORY: (code: string, period: string) => `stock_history_${code}_${period}`,\n  SEARCH_RESULTS: (query: string) => `search_${query}`,\n} as const;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}