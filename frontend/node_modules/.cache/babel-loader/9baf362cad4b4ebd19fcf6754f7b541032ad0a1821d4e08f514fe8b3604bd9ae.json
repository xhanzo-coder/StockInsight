{"ast":null,"code":"/**\n * 认证服务\n * 处理用户登录、注册、令牌管理等功能\n */\n\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { tokenManager } from './api';\n\n// 创建认证专用的 axios 实例\nconst authApi = axios.create({\n  baseURL: 'http://localhost:5000/api/auth',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 用户数据类型\n\n// 登录请求数据\n\n// 注册请求数据\n\n// 认证响应数据\n\n// API 响应格式\n\n// 认证服务类\nexport class AuthService {\n  /**\n   * 用户注册\n   */\n  async register(userData) {\n    try {\n      const response = await authApi.post('/register', userData);\n      const data = response.data;\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('注册成功！');\n        return data;\n      } else {\n        message.error(data.message || '注册失败');\n        return data;\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '注册失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  }\n\n  /**\n   * 用户登录\n   */\n  async login(credentials) {\n    try {\n      const response = await authApi.post('/login', credentials);\n      const data = response.data;\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('登录成功！');\n        return data;\n      } else {\n        message.error(data.message || '登录失败');\n        return data;\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || '登录失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  }\n\n  /**\n   * 验证令牌\n   */\n  async verifyToken() {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return {\n          success: false\n        };\n      }\n      const response = await authApi.get('/verify', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = response.data;\n      if (data.success && data.user) {\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        tokenManager.removeToken();\n        return {\n          success: false\n        };\n      }\n    } catch (error) {\n      console.error('令牌验证失败:', error);\n      tokenManager.removeToken();\n      return {\n        success: false\n      };\n    }\n  }\n\n  /**\n   * 获取用户资料\n   */\n  async getProfile() {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return {\n          success: false\n        };\n      }\n      const response = await authApi.get('/profile', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = response.data;\n      if (data.success && data.user) {\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false\n        };\n      }\n    } catch (error) {\n      console.error('获取用户资料失败:', error);\n      return {\n        success: false\n      };\n    }\n  }\n\n  /**\n   * 用户登出\n   */\n  async logout() {\n    try {\n      const token = tokenManager.getToken();\n      if (token) {\n        // 可选：调用后端登出接口\n        await authApi.post('/logout', {}, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 无论如何都要清除本地令牌\n      tokenManager.removeToken();\n    }\n  }\n\n  /**\n   * 检查是否已认证\n   */\n  isAuthenticated() {\n    return tokenManager.isAuthenticated();\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","message","tokenManager","authApi","create","baseURL","timeout","headers","AuthService","register","userData","response","post","data","success","setToken","token","error","_error$response","_error$response$data","errorMessage","login","credentials","_error$response2","_error$response2$data","verifyToken","getToken","get","Authorization","user","removeToken","console","getProfile","logout","isAuthenticated","authService"],"sources":["E:/AICode/StockInsight/frontend/src/services/authService.ts"],"sourcesContent":["/**\n * 认证服务\n * 处理用户登录、注册、令牌管理等功能\n */\n\nimport axios from 'axios';\nimport { message } from 'antd';\nimport { tokenManager } from './api';\n\n// 创建认证专用的 axios 实例\nconst authApi = axios.create({\n  baseURL: 'http://localhost:5000/api/auth',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 用户数据类型\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  created_at: string;\n}\n\n// 登录请求数据\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\n// 注册请求数据\nexport interface RegisterRequest {\n  username: string;\n  email: string;\n  password: string;\n}\n\n// 认证响应数据\nexport interface AuthResponse {\n  user: User;\n  access_token: string;\n}\n\n// API 响应格式\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  message?: string;\n}\n\n// 认证服务类\nexport class AuthService {\n\n  /**\n   * 用户注册\n   */\n  async register(userData: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await authApi.post('/register', userData);\n      const data = response.data;\n\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('注册成功！');\n        return data;\n      } else {\n        message.error(data.message || '注册失败');\n        return data;\n      }\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || '注册失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * 用户登录\n   */\n  async login(credentials: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await authApi.post('/login', credentials);\n      const data = response.data;\n\n      if (data.success && data.data) {\n        // 保存令牌 - 后端返回的是token字段\n        tokenManager.setToken(data.data.token);\n        message.success('登录成功！');\n        return data;\n      } else {\n        message.error(data.message || '登录失败');\n        return data;\n      }\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || '登录失败，请重试';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * 验证令牌\n   */\n  async verifyToken(): Promise<{ success: boolean; user?: User }> {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return { success: false };\n      }\n\n      const response = await authApi.get('/verify', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n      if (data.success && data.user) {\n        return { success: true, user: data.user };\n      } else {\n        tokenManager.removeToken();\n        return { success: false };\n      }\n    } catch (error) {\n      console.error('令牌验证失败:', error);\n      tokenManager.removeToken();\n      return { success: false };\n    }\n  }\n\n  /**\n   * 获取用户资料\n   */\n  async getProfile(): Promise<{ success: boolean; user?: User }> {\n    try {\n      const token = tokenManager.getToken();\n      if (!token) {\n        return { success: false };\n      }\n\n      const response = await authApi.get('/profile', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n      if (data.success && data.user) {\n        return { success: true, user: data.user };\n      } else {\n        return { success: false };\n      }\n    } catch (error) {\n      console.error('获取用户资料失败:', error);\n      return { success: false };\n    }\n  }\n\n  /**\n   * 用户登出\n   */\n  async logout(): Promise<void> {\n    try {\n      const token = tokenManager.getToken();\n      if (token) {\n        // 可选：调用后端登出接口\n        await authApi.post('/logout', {}, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n      }\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 无论如何都要清除本地令牌\n      tokenManager.removeToken();\n    }\n  }\n\n  /**\n   * 检查是否已认证\n   */\n  isAuthenticated(): boolean {\n    return tokenManager.isAuthenticated();\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}