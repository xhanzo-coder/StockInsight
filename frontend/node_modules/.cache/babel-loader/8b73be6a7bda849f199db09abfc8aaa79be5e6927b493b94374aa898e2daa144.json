{"ast":null,"code":"/**\n * 前端缓存工具\n * 提供内存缓存和localStorage缓存功能\n */\n\nclass FrontendCache {\n  constructor() {\n    this.memoryCache = new Map();\n    this.defaultTTL = 5 * 60 * 1000;\n  }\n  // 5分钟默认过期时间\n\n  /**\n   * 设置缓存\n   * @param key 缓存键\n   * @param data 缓存数据\n   * @param ttl 过期时间（毫秒），默认5分钟\n   * @param useLocalStorage 是否使用localStorage持久化\n   */\n  set(key, data, ttl = this.defaultTTL, useLocalStorage = false) {\n    const item = {\n      data,\n      timestamp: Date.now(),\n      expiry: Date.now() + ttl\n    };\n\n    // 内存缓存\n    this.memoryCache.set(key, item);\n\n    // localStorage缓存（可选）\n    if (useLocalStorage) {\n      try {\n        localStorage.setItem(`cache_${key}`, JSON.stringify(item));\n      } catch (error) {\n        console.warn('localStorage缓存失败:', error);\n      }\n    }\n  }\n\n  /**\n   * 获取缓存\n   * @param key 缓存键\n   * @param checkLocalStorage 是否检查localStorage\n   */\n  get(key, checkLocalStorage = false) {\n    // 先检查内存缓存\n    const memoryItem = this.memoryCache.get(key);\n    if (memoryItem && Date.now() < memoryItem.expiry) {\n      return memoryItem.data;\n    }\n\n    // 检查localStorage缓存\n    if (checkLocalStorage) {\n      try {\n        const stored = localStorage.getItem(`cache_${key}`);\n        if (stored) {\n          const item = JSON.parse(stored);\n          if (Date.now() < item.expiry) {\n            // 恢复到内存缓存\n            this.memoryCache.set(key, item);\n            return item.data;\n          } else {\n            // 过期，删除localStorage中的数据\n            localStorage.removeItem(`cache_${key}`);\n          }\n        }\n      } catch (error) {\n        console.warn('localStorage读取失败:', error);\n      }\n    }\n\n    // 清理过期的内存缓存\n    if (memoryItem) {\n      this.memoryCache.delete(key);\n    }\n    return null;\n  }\n\n  /**\n   * 删除缓存\n   * @param key 缓存键\n   */\n  delete(key) {\n    this.memoryCache.delete(key);\n    try {\n      localStorage.removeItem(`cache_${key}`);\n    } catch (error) {\n      console.warn('localStorage删除失败:', error);\n    }\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear() {\n    this.memoryCache.clear();\n\n    // 清理localStorage中的缓存项\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.warn('localStorage清理失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats() {\n    let localStorageSize = 0;\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorageSize++;\n        }\n      });\n    } catch (error) {\n      console.warn('获取localStorage统计失败:', error);\n    }\n    return {\n      memorySize: this.memoryCache.size,\n      localStorageSize\n    };\n  }\n\n  /**\n   * 清理过期缓存\n   */\n  cleanup() {\n    const now = Date.now();\n\n    // 清理内存缓存\n    for (const [key, item] of this.memoryCache.entries()) {\n      if (now >= item.expiry) {\n        this.memoryCache.delete(key);\n      }\n    }\n\n    // 清理localStorage缓存\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          try {\n            const stored = localStorage.getItem(key);\n            if (stored) {\n              const item = JSON.parse(stored);\n              if (now >= item.expiry) {\n                localStorage.removeItem(key);\n              }\n            }\n          } catch (error) {\n            // 解析失败，删除该项\n            localStorage.removeItem(key);\n          }\n        }\n      });\n    } catch (error) {\n      console.warn('localStorage清理失败:', error);\n    }\n  }\n}\n\n// 创建全局缓存实例\nexport const frontendCache = new FrontendCache();\n\n// 定期清理过期缓存（每10分钟）\nsetInterval(() => {\n  frontendCache.cleanup();\n}, 10 * 60 * 1000);\nexport default frontendCache;","map":{"version":3,"names":["FrontendCache","constructor","memoryCache","Map","defaultTTL","set","key","data","ttl","useLocalStorage","item","timestamp","Date","now","expiry","localStorage","setItem","JSON","stringify","error","console","warn","get","checkLocalStorage","memoryItem","stored","getItem","parse","removeItem","delete","clear","keys","Object","forEach","startsWith","getStats","localStorageSize","memorySize","size","cleanup","entries","frontendCache","setInterval"],"sources":["E:/AICode/StockInsight/frontend/src/utils/cache.ts"],"sourcesContent":["/**\n * 前端缓存工具\n * 提供内存缓存和localStorage缓存功能\n */\n\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  expiry: number;\n}\n\nclass FrontendCache {\n  private memoryCache = new Map<string, CacheItem<any>>();\n  private defaultTTL = 5 * 60 * 1000; // 5分钟默认过期时间\n\n  /**\n   * 设置缓存\n   * @param key 缓存键\n   * @param data 缓存数据\n   * @param ttl 过期时间（毫秒），默认5分钟\n   * @param useLocalStorage 是否使用localStorage持久化\n   */\n  set<T>(key: string, data: T, ttl: number = this.defaultTTL, useLocalStorage: boolean = false): void {\n    const item: CacheItem<T> = {\n      data,\n      timestamp: Date.now(),\n      expiry: Date.now() + ttl\n    };\n\n    // 内存缓存\n    this.memoryCache.set(key, item);\n\n    // localStorage缓存（可选）\n    if (useLocalStorage) {\n      try {\n        localStorage.setItem(`cache_${key}`, JSON.stringify(item));\n      } catch (error) {\n        console.warn('localStorage缓存失败:', error);\n      }\n    }\n  }\n\n  /**\n   * 获取缓存\n   * @param key 缓存键\n   * @param checkLocalStorage 是否检查localStorage\n   */\n  get<T>(key: string, checkLocalStorage: boolean = false): T | null {\n    // 先检查内存缓存\n    const memoryItem = this.memoryCache.get(key);\n    if (memoryItem && Date.now() < memoryItem.expiry) {\n      return memoryItem.data;\n    }\n\n    // 检查localStorage缓存\n    if (checkLocalStorage) {\n      try {\n        const stored = localStorage.getItem(`cache_${key}`);\n        if (stored) {\n          const item: CacheItem<T> = JSON.parse(stored);\n          if (Date.now() < item.expiry) {\n            // 恢复到内存缓存\n            this.memoryCache.set(key, item);\n            return item.data;\n          } else {\n            // 过期，删除localStorage中的数据\n            localStorage.removeItem(`cache_${key}`);\n          }\n        }\n      } catch (error) {\n        console.warn('localStorage读取失败:', error);\n      }\n    }\n\n    // 清理过期的内存缓存\n    if (memoryItem) {\n      this.memoryCache.delete(key);\n    }\n\n    return null;\n  }\n\n  /**\n   * 删除缓存\n   * @param key 缓存键\n   */\n  delete(key: string): void {\n    this.memoryCache.delete(key);\n    try {\n      localStorage.removeItem(`cache_${key}`);\n    } catch (error) {\n      console.warn('localStorage删除失败:', error);\n    }\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear(): void {\n    this.memoryCache.clear();\n    \n    // 清理localStorage中的缓存项\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.warn('localStorage清理失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats(): { memorySize: number; localStorageSize: number } {\n    let localStorageSize = 0;\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorageSize++;\n        }\n      });\n    } catch (error) {\n      console.warn('获取localStorage统计失败:', error);\n    }\n\n    return {\n      memorySize: this.memoryCache.size,\n      localStorageSize\n    };\n  }\n\n  /**\n   * 清理过期缓存\n   */\n  cleanup(): void {\n    const now = Date.now();\n    \n    // 清理内存缓存\n    for (const [key, item] of this.memoryCache.entries()) {\n      if (now >= item.expiry) {\n        this.memoryCache.delete(key);\n      }\n    }\n\n    // 清理localStorage缓存\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          try {\n            const stored = localStorage.getItem(key);\n            if (stored) {\n              const item = JSON.parse(stored);\n              if (now >= item.expiry) {\n                localStorage.removeItem(key);\n              }\n            }\n          } catch (error) {\n            // 解析失败，删除该项\n            localStorage.removeItem(key);\n          }\n        }\n      });\n    } catch (error) {\n      console.warn('localStorage清理失败:', error);\n    }\n  }\n}\n\n// 创建全局缓存实例\nexport const frontendCache = new FrontendCache();\n\n// 定期清理过期缓存（每10分钟）\nsetInterval(() => {\n  frontendCache.cleanup();\n}, 10 * 60 * 1000);\n\nexport default frontendCache;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}