{"ast":null,"code":"/**\n * 路由配置文件\n * 增强的路由守卫和认证状态处理\n */import React,{useEffect,useState}from'react';import{BrowserRouter,Routes,Route,Navigate,useNavigate,useLocation}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';// 布局组件\nimport AuthLayout from'../layouts/AuthLayout';import DashboardLayout from'../layouts/DashboardLayout';// 页面组件\nimport HomePage from'../pages/HomePage';import LoginPage from'../pages/LoginPage';import RegisterPage from'../pages/RegisterPage';import DashboardPage from'../pages/DashboardPage';// 加载组件\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const LoadingScreen=()=>/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\u52A0\\u8F7D\\u4E2D...\"})]});// 路由守卫组件 - 保护需要登录的路由\nconst ProtectedRoute=_ref=>{let{element}=_ref;const{isAuthenticated,isLoading,verifySession}=useAuth();const navigate=useNavigate();const location=useLocation();const[isVerifying,setIsVerifying]=useState(false);// 检查登录状态是否有效\nuseEffect(()=>{const checkAuth=async()=>{// 如果已经在加载中，不重复验证\nif(isLoading||isVerifying)return;// 如果未认证，尝试验证会话\nif(!isAuthenticated){console.log('ProtectedRoute: 尝试验证会话...');setIsVerifying(true);try{const verified=(await(verifySession===null||verifySession===void 0?void 0:verifySession()))||false;if(!verified){console.log('未检测到有效登录状态，重定向到登录页面');// 保存当前路径，以便登录后返回\nsessionStorage.setItem('redirectAfterLogin',location.pathname);navigate('/login',{replace:true});}else{console.log('会话验证成功');}}catch(error){console.error('会话验证出错',error);navigate('/login',{replace:true});}finally{setIsVerifying(false);}}};checkAuth();},[isAuthenticated,isLoading,navigate,location,verifySession]);// 如果正在加载认证状态或验证中，显示加载中\nif(isLoading||isVerifying){return/*#__PURE__*/_jsx(LoadingScreen,{});}// 如果未登录，重定向到登录页面\nreturn isAuthenticated?element:/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});};// 公共路由组件 - 已登录用户会被重定向到仪表盘\nconst PublicRoute=_ref2=>{let{element}=_ref2;const{isAuthenticated,isLoading,verifySession}=useAuth();const navigate=useNavigate();const[isVerifying,setIsVerifying]=useState(false);// 检查token和用户信息是否存在\nuseEffect(()=>{const checkAuth=async()=>{// 如果已经在加载中，不重复验证\nif(isLoading||isVerifying)return;// 如果本地状态显示已登录，验证会话\nif(isAuthenticated){console.log('PublicRoute: 验证会话...');setIsVerifying(true);try{const verified=(await(verifySession===null||verifySession===void 0?void 0:verifySession()))||true;if(verified){console.log('检测到有效登录状态，重定向到仪表盘');// 获取登录后的重定向路径\nconst redirectPath=sessionStorage.getItem('redirectAfterLogin')||'/dashboard';sessionStorage.removeItem('redirectAfterLogin');navigate(redirectPath,{replace:true});}}catch(error){console.error('会话验证出错',error);}finally{setIsVerifying(false);}}};checkAuth();},[isAuthenticated,isLoading,navigate,verifySession]);// 如果正在加载认证状态或验证中，显示加载中\nif(isLoading||isVerifying){return/*#__PURE__*/_jsx(LoadingScreen,{});}// 如果已登录，重定向到仪表盘\nreturn isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true}):element;};// 路由配置组件\nconst AppRoutes=()=>{return/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(HomePage,{})}),/*#__PURE__*/_jsxs(Route,{element:/*#__PURE__*/_jsx(AuthLayout,{}),children:[/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(PublicRoute,{element:/*#__PURE__*/_jsx(LoginPage,{})})}),/*#__PURE__*/_jsx(Route,{path:\"/register\",element:/*#__PURE__*/_jsx(PublicRoute,{element:/*#__PURE__*/_jsx(RegisterPage,{})})})]}),/*#__PURE__*/_jsx(Route,{element:/*#__PURE__*/_jsx(DashboardLayout,{}),children:/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(DashboardPage,{})})})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true})})]})});};export default AppRoutes;","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Routes","Route","Navigate","useNavigate","useLocation","useAuth","AuthLayout","DashboardLayout","HomePage","LoginPage","RegisterPage","DashboardPage","jsx","_jsx","jsxs","_jsxs","LoadingScreen","className","children","ProtectedRoute","_ref","element","isAuthenticated","isLoading","verifySession","navigate","location","isVerifying","setIsVerifying","checkAuth","console","log","verified","sessionStorage","setItem","pathname","replace","error","to","PublicRoute","_ref2","redirectPath","getItem","removeItem","AppRoutes","path"],"sources":["E:/AICode/StockInsight/frontend/src/routes/index.tsx"],"sourcesContent":["/**\n * 路由配置文件\n * 增强的路由守卫和认证状态处理\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { tokenManager } from '../services/api';\n\n// 布局组件\nimport AuthLayout from '../layouts/AuthLayout';\nimport DashboardLayout from '../layouts/DashboardLayout';\n\n// 页面组件\nimport HomePage from '../pages/HomePage';\nimport LoginPage from '../pages/LoginPage';\nimport RegisterPage from '../pages/RegisterPage';\nimport DashboardPage from '../pages/DashboardPage';\n\n// 加载组件\nconst LoadingScreen = () => (\n  <div className=\"loading-container\">\n    <div className=\"loading-spinner\"></div>\n    <p>加载中...</p>\n  </div>\n);\n\n// 路由守卫组件 - 保护需要登录的路由\nconst ProtectedRoute: React.FC<{ element: React.ReactElement }> = ({ element }) => {\n  const { isAuthenticated, isLoading, verifySession } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // 检查登录状态是否有效\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果已经在加载中，不重复验证\n      if (isLoading || isVerifying) return;\n\n      // 如果未认证，尝试验证会话\n      if (!isAuthenticated) {\n        console.log('ProtectedRoute: 尝试验证会话...');\n        setIsVerifying(true);\n        \n        try {\n          const verified = await verifySession?.() || false;\n          \n          if (!verified) {\n            console.log('未检测到有效登录状态，重定向到登录页面');\n            // 保存当前路径，以便登录后返回\n            sessionStorage.setItem('redirectAfterLogin', location.pathname);\n            navigate('/login', { replace: true });\n          } else {\n            console.log('会话验证成功');\n          }\n        } catch (error) {\n          console.error('会话验证出错', error);\n          navigate('/login', { replace: true });\n        } finally {\n          setIsVerifying(false);\n        }\n      }\n    };\n\n    checkAuth();\n  }, [isAuthenticated, isLoading, navigate, location, verifySession]);\n\n  // 如果正在加载认证状态或验证中，显示加载中\n  if (isLoading || isVerifying) {\n    return <LoadingScreen />;\n  }\n\n  // 如果未登录，重定向到登录页面\n  return isAuthenticated ? element : <Navigate to=\"/login\" replace />;\n};\n\n// 公共路由组件 - 已登录用户会被重定向到仪表盘\nconst PublicRoute: React.FC<{ element: React.ReactElement }> = ({ element }) => {\n  const { isAuthenticated, isLoading, verifySession } = useAuth();\n  const navigate = useNavigate();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // 检查token和用户信息是否存在\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果已经在加载中，不重复验证\n      if (isLoading || isVerifying) return;\n\n      // 如果本地状态显示已登录，验证会话\n      if (isAuthenticated) {\n        console.log('PublicRoute: 验证会话...');\n        setIsVerifying(true);\n        \n        try {\n          const verified = await verifySession?.() || true;\n          \n          if (verified) {\n            console.log('检测到有效登录状态，重定向到仪表盘');\n            // 获取登录后的重定向路径\n            const redirectPath = sessionStorage.getItem('redirectAfterLogin') || '/dashboard';\n            sessionStorage.removeItem('redirectAfterLogin');\n            navigate(redirectPath, { replace: true });\n          }\n        } catch (error) {\n          console.error('会话验证出错', error);\n        } finally {\n          setIsVerifying(false);\n        }\n      }\n    };\n\n    checkAuth();\n  }, [isAuthenticated, isLoading, navigate, verifySession]);\n\n  // 如果正在加载认证状态或验证中，显示加载中\n  if (isLoading || isVerifying) {\n    return <LoadingScreen />;\n  }\n\n  // 如果已登录，重定向到仪表盘\n  return isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : element;\n};\n\n// 路由配置组件\nconst AppRoutes: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        {/* 主页路由 */}\n        <Route path=\"/\" element={<HomePage />} />\n        \n        {/* 认证相关路由 - 使用AuthLayout */}\n        <Route element={<AuthLayout />}>\n          <Route path=\"/login\" element={<PublicRoute element={<LoginPage />} />} />\n          <Route path=\"/register\" element={<PublicRoute element={<RegisterPage />} />} />\n        </Route>\n        \n        {/* 仪表盘相关路由 - 使用DashboardLayout */}\n        <Route element={<DashboardLayout />}>\n          <Route path=\"/dashboard\" element={<ProtectedRoute element={<DashboardPage />} />} />\n          {/* 可以添加更多仪表盘相关的子路由 */}\n        </Route>\n        \n        {/* 404页面 */}\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRoutes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}