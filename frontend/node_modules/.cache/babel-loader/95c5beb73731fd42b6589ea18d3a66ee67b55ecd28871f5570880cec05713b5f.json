{"ast":null,"code":"/**\n * 前端缓存工具\n * 提供内存缓存和localStorage缓存功能\n */class FrontendCache{constructor(){this.memoryCache=new Map();this.defaultTTL=5*60*1000;}// 5分钟默认过期时间\n/**\n   * 设置缓存\n   * @param key 缓存键\n   * @param data 缓存数据\n   * @param ttl 过期时间（毫秒），默认5分钟\n   * @param useLocalStorage 是否使用localStorage持久化\n   */set(key,data){let ttl=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.defaultTTL;let useLocalStorage=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const item={data,timestamp:Date.now(),expiry:Date.now()+ttl};// 内存缓存\nthis.memoryCache.set(key,item);// localStorage缓存（可选）\nif(useLocalStorage){try{localStorage.setItem(`cache_${key}`,JSON.stringify(item));}catch(error){console.warn('localStorage缓存失败:',error);}}}/**\n   * 获取缓存\n   * @param key 缓存键\n   * @param checkLocalStorage 是否检查localStorage\n   */get(key){let checkLocalStorage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// 先检查内存缓存\nconst memoryItem=this.memoryCache.get(key);if(memoryItem&&Date.now()<memoryItem.expiry){return memoryItem.data;}// 检查localStorage缓存\nif(checkLocalStorage){try{const stored=localStorage.getItem(`cache_${key}`);if(stored){const item=JSON.parse(stored);if(Date.now()<item.expiry){// 恢复到内存缓存\nthis.memoryCache.set(key,item);return item.data;}else{// 过期，删除localStorage中的数据\nlocalStorage.removeItem(`cache_${key}`);}}}catch(error){console.warn('localStorage读取失败:',error);}}// 清理过期的内存缓存\nif(memoryItem){this.memoryCache.delete(key);}return null;}/**\n   * 删除缓存\n   * @param key 缓存键\n   */delete(key){this.memoryCache.delete(key);try{localStorage.removeItem(`cache_${key}`);}catch(error){console.warn('localStorage删除失败:',error);}}/**\n   * 清空所有缓存\n   */clear(){this.memoryCache.clear();// 清理localStorage中的缓存项\ntry{const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith('cache_')){localStorage.removeItem(key);}});}catch(error){console.warn('localStorage清理失败:',error);}}/**\n   * 获取缓存统计信息\n   */getStats(){let localStorageSize=0;try{const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith('cache_')){localStorageSize++;}});}catch(error){console.warn('获取localStorage统计失败:',error);}return{memorySize:this.memoryCache.size,localStorageSize};}/**\n   * 清理过期缓存\n   */cleanup(){const now=Date.now();// 清理内存缓存\nArray.from(this.memoryCache.entries()).forEach(_ref=>{let[key,item]=_ref;if(now>=item.expiry){this.memoryCache.delete(key);}});// 清理localStorage缓存\ntry{const keys=Object.keys(localStorage);keys.forEach(key=>{if(key.startsWith('cache_')){try{const stored=localStorage.getItem(key);if(stored){const item=JSON.parse(stored);if(now>=item.expiry){localStorage.removeItem(key);}}}catch(error){// 解析失败，删除该项\nlocalStorage.removeItem(key);}}});}catch(error){console.warn('localStorage清理失败:',error);}}}// 创建全局缓存实例\nexport const frontendCache=new FrontendCache();// 定期清理过期缓存（每10分钟）\nsetInterval(()=>{frontendCache.cleanup();},10*60*1000);export default frontendCache;","map":{"version":3,"names":["FrontendCache","constructor","memoryCache","Map","defaultTTL","set","key","data","ttl","arguments","length","undefined","useLocalStorage","item","timestamp","Date","now","expiry","localStorage","setItem","JSON","stringify","error","console","warn","get","checkLocalStorage","memoryItem","stored","getItem","parse","removeItem","delete","clear","keys","Object","forEach","startsWith","getStats","localStorageSize","memorySize","size","cleanup","Array","from","entries","_ref","frontendCache","setInterval"],"sources":["E:/AICode/StockInsight/frontend/src/utils/cache.ts"],"sourcesContent":["/**\n * 前端缓存工具\n * 提供内存缓存和localStorage缓存功能\n */\n\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  expiry: number;\n}\n\nclass FrontendCache {\n  private memoryCache = new Map<string, CacheItem<any>>();\n  private defaultTTL = 5 * 60 * 1000; // 5分钟默认过期时间\n\n  /**\n   * 设置缓存\n   * @param key 缓存键\n   * @param data 缓存数据\n   * @param ttl 过期时间（毫秒），默认5分钟\n   * @param useLocalStorage 是否使用localStorage持久化\n   */\n  set<T>(key: string, data: T, ttl: number = this.defaultTTL, useLocalStorage: boolean = false): void {\n    const item: CacheItem<T> = {\n      data,\n      timestamp: Date.now(),\n      expiry: Date.now() + ttl\n    };\n\n    // 内存缓存\n    this.memoryCache.set(key, item);\n\n    // localStorage缓存（可选）\n    if (useLocalStorage) {\n      try {\n        localStorage.setItem(`cache_${key}`, JSON.stringify(item));\n      } catch (error) {\n        console.warn('localStorage缓存失败:', error);\n      }\n    }\n  }\n\n  /**\n   * 获取缓存\n   * @param key 缓存键\n   * @param checkLocalStorage 是否检查localStorage\n   */\n  get<T>(key: string, checkLocalStorage: boolean = false): T | null {\n    // 先检查内存缓存\n    const memoryItem = this.memoryCache.get(key);\n    if (memoryItem && Date.now() < memoryItem.expiry) {\n      return memoryItem.data;\n    }\n\n    // 检查localStorage缓存\n    if (checkLocalStorage) {\n      try {\n        const stored = localStorage.getItem(`cache_${key}`);\n        if (stored) {\n          const item: CacheItem<T> = JSON.parse(stored);\n          if (Date.now() < item.expiry) {\n            // 恢复到内存缓存\n            this.memoryCache.set(key, item);\n            return item.data;\n          } else {\n            // 过期，删除localStorage中的数据\n            localStorage.removeItem(`cache_${key}`);\n          }\n        }\n      } catch (error) {\n        console.warn('localStorage读取失败:', error);\n      }\n    }\n\n    // 清理过期的内存缓存\n    if (memoryItem) {\n      this.memoryCache.delete(key);\n    }\n\n    return null;\n  }\n\n  /**\n   * 删除缓存\n   * @param key 缓存键\n   */\n  delete(key: string): void {\n    this.memoryCache.delete(key);\n    try {\n      localStorage.removeItem(`cache_${key}`);\n    } catch (error) {\n      console.warn('localStorage删除失败:', error);\n    }\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear(): void {\n    this.memoryCache.clear();\n    \n    // 清理localStorage中的缓存项\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.warn('localStorage清理失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats(): { memorySize: number; localStorageSize: number } {\n    let localStorageSize = 0;\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorageSize++;\n        }\n      });\n    } catch (error) {\n      console.warn('获取localStorage统计失败:', error);\n    }\n\n    return {\n      memorySize: this.memoryCache.size,\n      localStorageSize\n    };\n  }\n\n  /**\n   * 清理过期缓存\n   */\n  cleanup(): void {\n    const now = Date.now();\n    \n    // 清理内存缓存\n    Array.from(this.memoryCache.entries()).forEach(([key, item]) => {\n      if (now >= item.expiry) {\n        this.memoryCache.delete(key);\n      }\n    });\n\n    // 清理localStorage缓存\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          try {\n            const stored = localStorage.getItem(key);\n            if (stored) {\n              const item = JSON.parse(stored);\n              if (now >= item.expiry) {\n                localStorage.removeItem(key);\n              }\n            }\n          } catch (error) {\n            // 解析失败，删除该项\n            localStorage.removeItem(key);\n          }\n        }\n      });\n    } catch (error) {\n      console.warn('localStorage清理失败:', error);\n    }\n  }\n}\n\n// 创建全局缓存实例\nexport const frontendCache = new FrontendCache();\n\n// 定期清理过期缓存（每10分钟）\nsetInterval(() => {\n  frontendCache.cleanup();\n}, 10 * 60 * 1000);\n\nexport default frontendCache;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}