{"ast":null,"code":"/**\n * 路由配置文件\n */import React from'react';import{BrowserRouter,Routes,Route,Navigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';// 布局组件\nimport AuthLayout from'../layouts/AuthLayout';import DashboardLayout from'../layouts/DashboardLayout';// 页面组件\nimport HomePage from'../pages/HomePage';import LoginPage from'../pages/LoginPage';import RegisterPage from'../pages/RegisterPage';import DashboardPage from'../pages/DashboardPage';// 路由守卫组件 - 保护需要登录的路由\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{element}=_ref;const{isAuthenticated,isLoading}=useAuth();// 如果正在加载认证状态，显示加载中\nif(isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\u52A0\\u8F7D\\u4E2D...\"})]});}// 如果未登录，重定向到登录页面\nreturn isAuthenticated?element:/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});};// 公共路由组件 - 已登录用户会被重定向到仪表盘\nconst PublicRoute=_ref2=>{let{element}=_ref2;const{isAuthenticated,isLoading}=useAuth();// 如果正在加载认证状态，显示加载中\nif(isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\u52A0\\u8F7D\\u4E2D...\"})]});}// 如果已登录，重定向到仪表盘\nreturn isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true}):element;};// 路由配置组件\nconst AppRoutes=()=>{return/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(HomePage,{})}),/*#__PURE__*/_jsxs(Route,{element:/*#__PURE__*/_jsx(AuthLayout,{}),children:[/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(PublicRoute,{element:/*#__PURE__*/_jsx(LoginPage,{})})}),/*#__PURE__*/_jsx(Route,{path:\"/register\",element:/*#__PURE__*/_jsx(PublicRoute,{element:/*#__PURE__*/_jsx(RegisterPage,{})})})]}),/*#__PURE__*/_jsx(Route,{element:/*#__PURE__*/_jsx(DashboardLayout,{}),children:/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(DashboardPage,{})})})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true})})]})});};export default AppRoutes;","map":{"version":3,"names":["React","BrowserRouter","Routes","Route","Navigate","useAuth","AuthLayout","DashboardLayout","HomePage","LoginPage","RegisterPage","DashboardPage","jsx","_jsx","jsxs","_jsxs","ProtectedRoute","_ref","element","isAuthenticated","isLoading","className","children","to","replace","PublicRoute","_ref2","AppRoutes","path"],"sources":["E:/AICode/StockInsight/frontend/src/routes/index.tsx"],"sourcesContent":["/**\n * 路由配置文件\n */\n\nimport React from 'react';\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\n// 布局组件\nimport AuthLayout from '../layouts/AuthLayout';\nimport DashboardLayout from '../layouts/DashboardLayout';\n\n// 页面组件\nimport HomePage from '../pages/HomePage';\nimport LoginPage from '../pages/LoginPage';\nimport RegisterPage from '../pages/RegisterPage';\nimport DashboardPage from '../pages/DashboardPage';\n\n// 路由守卫组件 - 保护需要登录的路由\nconst ProtectedRoute: React.FC<{ element: React.ReactElement }> = ({ element }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // 如果正在加载认证状态，显示加载中\n  if (isLoading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>加载中...</p>\n      </div>\n    );\n  }\n\n  // 如果未登录，重定向到登录页面\n  return isAuthenticated ? element : <Navigate to=\"/login\" replace />;\n};\n\n// 公共路由组件 - 已登录用户会被重定向到仪表盘\nconst PublicRoute: React.FC<{ element: React.ReactElement }> = ({ element }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // 如果正在加载认证状态，显示加载中\n  if (isLoading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>加载中...</p>\n      </div>\n    );\n  }\n\n  // 如果已登录，重定向到仪表盘\n  return isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : element;\n};\n\n// 路由配置组件\nconst AppRoutes: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        {/* 主页路由 */}\n        <Route path=\"/\" element={<HomePage />} />\n        \n        {/* 认证相关路由 - 使用AuthLayout */}\n        <Route element={<AuthLayout />}>\n          <Route path=\"/login\" element={<PublicRoute element={<LoginPage />} />} />\n          <Route path=\"/register\" element={<PublicRoute element={<RegisterPage />} />} />\n        </Route>\n        \n        {/* 仪表盘相关路由 - 使用DashboardLayout */}\n        <Route element={<DashboardLayout />}>\n          <Route path=\"/dashboard\" element={<ProtectedRoute element={<DashboardPage />} />} />\n          {/* 可以添加更多仪表盘相关的子路由 */}\n        </Route>\n        \n        {/* 404页面 */}\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRoutes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}