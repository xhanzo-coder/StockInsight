{"ast":null,"code":"import * as XLSX from 'xlsx/dist/xlsx.full.min.js';\nimport { saveAs } from 'file-saver/dist/FileSaver.min.js';\n// 将股票数据转换为导出格式\nconst prepareExportData = stocks => {\n  return stocks.map(stock => ({\n    '股票代码': stock.code,\n    '股票名称': stock.name,\n    '当前价格': stock.current_price,\n    '涨跌幅(%)': stock.change_percent,\n    '涨跌额': stock.change_amount,\n    '市值': stock.market_cap,\n    '市赚率': stock.market_earning_ratio,\n    'TTM市盈率': stock.pe_ratio_ttm,\n    'ROE(%)': stock.roe,\n    '市净率': stock.pb_ratio,\n    '股利支付率(%)': stock.dividend_payout_ratio,\n    '修正系数': stock.correction_factor,\n    '修正市赚率': stock.corrected_market_earning_ratio,\n    '理论股价': stock.theoretical_price\n  }));\n};\n\n// 导出为Excel文件\nexport const exportToExcel = (stocks, fileName = 'stock-data') => {\n  const exportData = prepareExportData(stocks);\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, '股票数据');\n\n  // 生成Excel文件并下载\n  const excelBuffer = XLSX.write(workbook, {\n    bookType: 'xlsx',\n    type: 'array'\n  });\n  const data = new Blob([excelBuffer], {\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  });\n  saveAs(data, `${fileName}.xlsx`);\n};\n\n// 导出为CSV文件\nexport const exportToCSV = (stocks, fileName = 'stock-data') => {\n  const exportData = prepareExportData(stocks);\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\n  const csvContent = XLSX.utils.sheet_to_csv(worksheet);\n\n  // 生成CSV文件并下载\n  const data = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  saveAs(data, `${fileName}.csv`);\n};","map":{"version":3,"names":["XLSX","saveAs","prepareExportData","stocks","map","stock","code","name","current_price","change_percent","change_amount","market_cap","market_earning_ratio","pe_ratio_ttm","roe","pb_ratio","dividend_payout_ratio","correction_factor","corrected_market_earning_ratio","theoretical_price","exportToExcel","fileName","exportData","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","write","bookType","type","data","Blob","exportToCSV","csvContent","sheet_to_csv"],"sources":["E:/AICode/StockInsight/frontend/src/utils/exportUtils.ts"],"sourcesContent":["import * as XLSX from 'xlsx/dist/xlsx.full.min.js';\nimport { saveAs } from 'file-saver/dist/FileSaver.min.js';\nimport { StockInfo } from '../services/api';\n\n// 将股票数据转换为导出格式\nconst prepareExportData = (stocks: StockInfo[]) => {\n  return stocks.map(stock => ({\n    '股票代码': stock.code,\n    '股票名称': stock.name,\n    '当前价格': stock.current_price,\n    '涨跌幅(%)': stock.change_percent,\n    '涨跌额': stock.change_amount,\n    '市值': stock.market_cap,\n    '市赚率': stock.market_earning_ratio,\n    'TTM市盈率': stock.pe_ratio_ttm,\n    'ROE(%)': stock.roe,\n    '市净率': stock.pb_ratio,\n    '股利支付率(%)': stock.dividend_payout_ratio,\n    '修正系数': stock.correction_factor,\n    '修正市赚率': stock.corrected_market_earning_ratio,\n    '理论股价': stock.theoretical_price\n  }));\n};\n\n// 导出为Excel文件\nexport const exportToExcel = (stocks: StockInfo[], fileName: string = 'stock-data') => {\n  const exportData = prepareExportData(stocks);\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, '股票数据');\n  \n  // 生成Excel文件并下载\n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const data = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(data, `${fileName}.xlsx`);\n};\n\n// 导出为CSV文件\nexport const exportToCSV = (stocks: StockInfo[], fileName: string = 'stock-data') => {\n  const exportData = prepareExportData(stocks);\n  const worksheet = XLSX.utils.json_to_sheet(exportData);\n  const csvContent = XLSX.utils.sheet_to_csv(worksheet);\n  \n  // 生成CSV文件并下载\n  const data = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  saveAs(data, `${fileName}.csv`);\n};"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,4BAA4B;AAClD,SAASC,MAAM,QAAQ,kCAAkC;AAGzD;AACA,MAAMC,iBAAiB,GAAIC,MAAmB,IAAK;EACjD,OAAOA,MAAM,CAACC,GAAG,CAACC,KAAK,KAAK;IAC1B,MAAM,EAAEA,KAAK,CAACC,IAAI;IAClB,MAAM,EAAED,KAAK,CAACE,IAAI;IAClB,MAAM,EAAEF,KAAK,CAACG,aAAa;IAC3B,QAAQ,EAAEH,KAAK,CAACI,cAAc;IAC9B,KAAK,EAAEJ,KAAK,CAACK,aAAa;IAC1B,IAAI,EAAEL,KAAK,CAACM,UAAU;IACtB,KAAK,EAAEN,KAAK,CAACO,oBAAoB;IACjC,QAAQ,EAAEP,KAAK,CAACQ,YAAY;IAC5B,QAAQ,EAAER,KAAK,CAACS,GAAG;IACnB,KAAK,EAAET,KAAK,CAACU,QAAQ;IACrB,UAAU,EAAEV,KAAK,CAACW,qBAAqB;IACvC,MAAM,EAAEX,KAAK,CAACY,iBAAiB;IAC/B,OAAO,EAAEZ,KAAK,CAACa,8BAA8B;IAC7C,MAAM,EAAEb,KAAK,CAACc;EAChB,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACjB,MAAmB,EAAEkB,QAAgB,GAAG,YAAY,KAAK;EACrF,MAAMC,UAAU,GAAGpB,iBAAiB,CAACC,MAAM,CAAC;EAC5C,MAAMoB,SAAS,GAAGvB,IAAI,CAACwB,KAAK,CAACC,aAAa,CAACH,UAAU,CAAC;EACtD,MAAMI,QAAQ,GAAG1B,IAAI,CAACwB,KAAK,CAACG,QAAQ,CAAC,CAAC;EACtC3B,IAAI,CAACwB,KAAK,CAACI,iBAAiB,CAACF,QAAQ,EAAEH,SAAS,EAAE,MAAM,CAAC;;EAEzD;EACA,MAAMM,WAAW,GAAG7B,IAAI,CAAC8B,KAAK,CAACJ,QAAQ,EAAE;IAAEK,QAAQ,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAQ,CAAC,CAAC;EAC7E,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,WAAW,CAAC,EAAE;IAAEG,IAAI,EAAE;EAAoE,CAAC,CAAC;EACnH/B,MAAM,CAACgC,IAAI,EAAE,GAAGZ,QAAQ,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMc,WAAW,GAAGA,CAAChC,MAAmB,EAAEkB,QAAgB,GAAG,YAAY,KAAK;EACnF,MAAMC,UAAU,GAAGpB,iBAAiB,CAACC,MAAM,CAAC;EAC5C,MAAMoB,SAAS,GAAGvB,IAAI,CAACwB,KAAK,CAACC,aAAa,CAACH,UAAU,CAAC;EACtD,MAAMc,UAAU,GAAGpC,IAAI,CAACwB,KAAK,CAACa,YAAY,CAACd,SAAS,CAAC;;EAErD;EACA,MAAMU,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACE,UAAU,CAAC,EAAE;IAAEJ,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxE/B,MAAM,CAACgC,IAAI,EAAE,GAAGZ,QAAQ,MAAM,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}