{"ast":null,"code":"import { FastColor } from '@ant-design/fast-color';\nexport default function genColorMapToken(seed, _ref) {\n  let {\n    generateColorPalettes,\n    generateNeutralColorPalettes\n  } = _ref;\n  const {\n    colorSuccess: colorSuccessBase,\n    colorWarning: colorWarningBase,\n    colorError: colorErrorBase,\n    colorInfo: colorInfoBase,\n    colorPrimary: colorPrimaryBase,\n    colorBgBase,\n    colorTextBase\n  } = seed;\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\n  const successColors = generateColorPalettes(colorSuccessBase);\n  const warningColors = generateColorPalettes(colorWarningBase);\n  const errorColors = generateColorPalettes(colorErrorBase);\n  const infoColors = generateColorPalettes(colorInfoBase);\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  // Color Link\n  const colorLink = seed.colorLink || seed.colorInfo;\n  const linkColors = generateColorPalettes(colorLink);\n  const colorErrorBgFilledHover = new FastColor(errorColors[1]).mix(new FastColor(errorColors[3]), 50).toHexString();\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBgFilledHover,\n    colorErrorBgActive: errorColors[3],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorLinkHover: linkColors[4],\n    colorLink: linkColors[6],\n    colorLinkActive: linkColors[7],\n    colorBgMask: new FastColor('#000').setA(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}","map":{"version":3,"names":["FastColor","genColorMapToken","seed","_ref","generateColorPalettes","generateNeutralColorPalettes","colorSuccess","colorSuccessBase","colorWarning","colorWarningBase","colorError","colorErrorBase","colorInfo","colorInfoBase","colorPrimary","colorPrimaryBase","colorBgBase","colorTextBase","primaryColors","successColors","warningColors","errorColors","infoColors","neutralColors","colorLink","linkColors","colorErrorBgFilledHover","mix","toHexString","Object","assign","colorPrimaryBg","colorPrimaryBgHover","colorPrimaryBorder","colorPrimaryBorderHover","colorPrimaryHover","colorPrimaryActive","colorPrimaryTextHover","colorPrimaryText","colorPrimaryTextActive","colorSuccessBg","colorSuccessBgHover","colorSuccessBorder","colorSuccessBorderHover","colorSuccessHover","colorSuccessActive","colorSuccessTextHover","colorSuccessText","colorSuccessTextActive","colorErrorBg","colorErrorBgHover","colorErrorBgActive","colorErrorBorder","colorErrorBorderHover","colorErrorHover","colorErrorActive","colorErrorTextHover","colorErrorText","colorErrorTextActive","colorWarningBg","colorWarningBgHover","colorWarningBorder","colorWarningBorderHover","colorWarningHover","colorWarningActive","colorWarningTextHover","colorWarningText","colorWarningTextActive","colorInfoBg","colorInfoBgHover","colorInfoBorder","colorInfoBorderHover","colorInfoHover","colorInfoActive","colorInfoTextHover","colorInfoText","colorInfoTextActive","colorLinkHover","colorLinkActive","colorBgMask","setA","toRgbString","colorWhite"],"sources":["E:/AICode/StockInsight/frontend/node_modules/antd/es/theme/themes/shared/genColorMapToken.js"],"sourcesContent":["import { FastColor } from '@ant-design/fast-color';\r\nexport default function genColorMapToken(seed, {\r\n  generateColorPalettes,\r\n  generateNeutralColorPalettes\r\n}) {\r\n  const {\r\n    colorSuccess: colorSuccessBase,\r\n    colorWarning: colorWarningBase,\r\n    colorError: colorErrorBase,\r\n    colorInfo: colorInfoBase,\r\n    colorPrimary: colorPrimaryBase,\r\n    colorBgBase,\r\n    colorTextBase\r\n  } = seed;\r\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\r\n  const successColors = generateColorPalettes(colorSuccessBase);\r\n  const warningColors = generateColorPalettes(colorWarningBase);\r\n  const errorColors = generateColorPalettes(colorErrorBase);\r\n  const infoColors = generateColorPalettes(colorInfoBase);\r\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\r\n  // Color Link\r\n  const colorLink = seed.colorLink || seed.colorInfo;\r\n  const linkColors = generateColorPalettes(colorLink);\r\n  const colorErrorBgFilledHover = new FastColor(errorColors[1]).mix(new FastColor(errorColors[3]), 50).toHexString();\r\n  return Object.assign(Object.assign({}, neutralColors), {\r\n    colorPrimaryBg: primaryColors[1],\r\n    colorPrimaryBgHover: primaryColors[2],\r\n    colorPrimaryBorder: primaryColors[3],\r\n    colorPrimaryBorderHover: primaryColors[4],\r\n    colorPrimaryHover: primaryColors[5],\r\n    colorPrimary: primaryColors[6],\r\n    colorPrimaryActive: primaryColors[7],\r\n    colorPrimaryTextHover: primaryColors[8],\r\n    colorPrimaryText: primaryColors[9],\r\n    colorPrimaryTextActive: primaryColors[10],\r\n    colorSuccessBg: successColors[1],\r\n    colorSuccessBgHover: successColors[2],\r\n    colorSuccessBorder: successColors[3],\r\n    colorSuccessBorderHover: successColors[4],\r\n    colorSuccessHover: successColors[4],\r\n    colorSuccess: successColors[6],\r\n    colorSuccessActive: successColors[7],\r\n    colorSuccessTextHover: successColors[8],\r\n    colorSuccessText: successColors[9],\r\n    colorSuccessTextActive: successColors[10],\r\n    colorErrorBg: errorColors[1],\r\n    colorErrorBgHover: errorColors[2],\r\n    colorErrorBgFilledHover,\r\n    colorErrorBgActive: errorColors[3],\r\n    colorErrorBorder: errorColors[3],\r\n    colorErrorBorderHover: errorColors[4],\r\n    colorErrorHover: errorColors[5],\r\n    colorError: errorColors[6],\r\n    colorErrorActive: errorColors[7],\r\n    colorErrorTextHover: errorColors[8],\r\n    colorErrorText: errorColors[9],\r\n    colorErrorTextActive: errorColors[10],\r\n    colorWarningBg: warningColors[1],\r\n    colorWarningBgHover: warningColors[2],\r\n    colorWarningBorder: warningColors[3],\r\n    colorWarningBorderHover: warningColors[4],\r\n    colorWarningHover: warningColors[4],\r\n    colorWarning: warningColors[6],\r\n    colorWarningActive: warningColors[7],\r\n    colorWarningTextHover: warningColors[8],\r\n    colorWarningText: warningColors[9],\r\n    colorWarningTextActive: warningColors[10],\r\n    colorInfoBg: infoColors[1],\r\n    colorInfoBgHover: infoColors[2],\r\n    colorInfoBorder: infoColors[3],\r\n    colorInfoBorderHover: infoColors[4],\r\n    colorInfoHover: infoColors[4],\r\n    colorInfo: infoColors[6],\r\n    colorInfoActive: infoColors[7],\r\n    colorInfoTextHover: infoColors[8],\r\n    colorInfoText: infoColors[9],\r\n    colorInfoTextActive: infoColors[10],\r\n    colorLinkHover: linkColors[4],\r\n    colorLink: linkColors[6],\r\n    colorLinkActive: linkColors[7],\r\n    colorBgMask: new FastColor('#000').setA(0.45).toRgbString(),\r\n    colorWhite: '#fff'\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}