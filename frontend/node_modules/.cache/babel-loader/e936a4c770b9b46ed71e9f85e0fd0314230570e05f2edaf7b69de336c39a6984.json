{"ast":null,"code":"var _jsxFileName = \"E:\\\\AICode\\\\StockInsight\\\\frontend\\\\src\\\\pages\\\\AuthPage.tsx\",\n  _s = $RefreshSig$();\n/**\n * 认证页面容器\n * 包含登录和注册组件的切换逻辑\n */\n\nimport React, { useState } from 'react';\nimport { Layout, message } from 'antd';\nimport { Login } from '../components/auth/Login';\nimport Register from '../components/auth/Register';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Content\n} = Layout;\nexport const AuthPage = () => {\n  _s();\n  const [isLogin, setIsLogin] = useState(true);\n  const handleSwitchToRegister = () => {\n    setIsLogin(false);\n  };\n  const handleSwitchToLogin = () => {\n    setIsLogin(true);\n  };\n  const handleLoginSuccess = () => {\n    message.success('登录成功！');\n    // 登录成功后，AuthContext 会自动更新用户状态\n    // 路由保护会自动重定向到主页面\n  };\n  const handleRegisterSuccess = () => {\n    message.success('注册成功！');\n    // 注册成功后，AuthContext 会自动更新用户状态\n    // 路由保护会自动重定向到主页面\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    style: {\n      minHeight: '100vh',\n      backgroundColor: '#f5f5f5'\n    },\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      style: {\n        padding: '20px'\n      },\n      children: isLogin ? /*#__PURE__*/_jsxDEV(Login, {\n        onSwitchToRegister: handleSwitchToRegister,\n        onLoginSuccess: handleLoginSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"juHMKC6x2j1wnRvCiB5VrABnZyE=\");\n_c = AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","Layout","message","Login","Register","jsxDEV","_jsxDEV","Content","AuthPage","_s","isLogin","setIsLogin","handleSwitchToRegister","handleSwitchToLogin","handleLoginSuccess","success","handleRegisterSuccess","style","minHeight","backgroundColor","children","padding","onSwitchToRegister","onLoginSuccess","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/AICode/StockInsight/frontend/src/pages/AuthPage.tsx"],"sourcesContent":["/**\n * 认证页面容器\n * 包含登录和注册组件的切换逻辑\n */\n\nimport React, { useState } from 'react';\nimport { Layout, message } from 'antd';\nimport { Login } from '../components/auth/Login';\nimport Register from '../components/auth/Register';\n\nconst { Content } = Layout;\n\nexport const AuthPage: React.FC = () => {\n  const [isLogin, setIsLogin] = useState(true);\n\n  const handleSwitchToRegister = () => {\n    setIsLogin(false);\n  };\n\n  const handleSwitchToLogin = () => {\n    setIsLogin(true);\n  };\n\n  const handleLoginSuccess = () => {\n    message.success('登录成功！');\n    // 登录成功后，AuthContext 会自动更新用户状态\n    // 路由保护会自动重定向到主页面\n  };\n\n  const handleRegisterSuccess = () => {\n    message.success('注册成功！');\n    // 注册成功后，AuthContext 会自动更新用户状态\n    // 路由保护会自动重定向到主页面\n  };\n\n  return (\n    <Layout style={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>\n      <Content style={{ padding: '20px' }}>\n        {isLogin ? (\n          <Login\n            onSwitchToRegister={handleSwitchToRegister}\n            onLoginSuccess={handleLoginSuccess}\n          />\n        ) : (\n          <Register />\n        )}\n      </Content>\n    </Layout>\n  );\n};"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,OAAO,QAAQ,MAAM;AACtC,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,QAAQ,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAM;EAAEC;AAAQ,CAAC,GAAGN,MAAM;AAE1B,OAAO,MAAMO,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMY,sBAAsB,GAAGA,CAAA,KAAM;IACnCD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAME,mBAAmB,GAAGA,CAAA,KAAM;IAChCF,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC/BZ,OAAO,CAACa,OAAO,CAAC,OAAO,CAAC;IACxB;IACA;EACF,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClCd,OAAO,CAACa,OAAO,CAAC,OAAO,CAAC;IACxB;IACA;EACF,CAAC;EAED,oBACET,OAAA,CAACL,MAAM;IAACgB,KAAK,EAAE;MAAEC,SAAS,EAAE,OAAO;MAAEC,eAAe,EAAE;IAAU,CAAE;IAAAC,QAAA,eAChEd,OAAA,CAACC,OAAO;MAACU,KAAK,EAAE;QAAEI,OAAO,EAAE;MAAO,CAAE;MAAAD,QAAA,EACjCV,OAAO,gBACNJ,OAAA,CAACH,KAAK;QACJmB,kBAAkB,EAAEV,sBAAuB;QAC3CW,cAAc,EAAET;MAAmB;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC,gBAEFrB,OAAA,CAACF,QAAQ;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACZ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEb,CAAC;AAAClB,EAAA,CArCWD,QAAkB;AAAAoB,EAAA,GAAlBpB,QAAkB;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}