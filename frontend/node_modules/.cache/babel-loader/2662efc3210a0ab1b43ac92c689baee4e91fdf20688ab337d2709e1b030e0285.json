{"ast":null,"code":"/**\n * 认证上下文\n * 提供全局的用户状态管理\n */import React,{createContext,useContext,useEffect,useState}from'react';import{authService}from'../services/authService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);const isAuthenticated=!!user;// 初始化时验证令牌\nuseEffect(()=>{const initAuth=async()=>{setIsLoading(true);if(authService.isAuthenticated()){const result=await authService.verifyToken();if(result.success&&result.user){setUser(result.user);}else{setUser(null);}}else{setUser(null);}setIsLoading(false);};initAuth();},[]);const login=async(username,password)=>{try{const result=await authService.login({username,password});if(result.success&&result.data){setUser(result.data.user);return true;}return false;}catch(error){console.error('登录失败:',error);return false;}};const register=async(username,email,password)=>{try{const result=await authService.register({username,email,password});if(result.success&&result.data){setUser(result.data.user);return true;}return false;}catch(error){console.error('注册失败:',error);return false;}};const logout=async()=>{try{await authService.logout();setUser(null);}catch(error){console.error('登出失败:',error);}};const refreshUser=async()=>{if(authService.isAuthenticated()){const result=await authService.getProfile();if(result.success&&result.user){setUser(result.user);}}};const value={user,isAuthenticated,isLoading,login,register,logout,refreshUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","isAuthenticated","initAuth","result","verifyToken","success","login","username","password","data","error","console","register","email","logout","refreshUser","getProfile","value","Provider","useAuth","context","Error"],"sources":["E:/AICode/StockInsight/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["/**\n * 认证上下文\n * 提供全局的用户状态管理\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { authService, User } from '../services/authService';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user;\n\n  // 初始化时验证令牌\n  useEffect(() => {\n    const initAuth = async () => {\n      setIsLoading(true);\n      \n      if (authService.isAuthenticated()) {\n        const result = await authService.verifyToken();\n        if (result.success && result.user) {\n          setUser(result.user);\n        } else {\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      \n      setIsLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const result = await authService.login({ username, password });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('登录失败:', error);\n      return false;\n    }\n  };\n\n  const register = async (username: string, email: string, password: string): Promise<boolean> => {\n    try {\n      const result = await authService.register({ username, email, password });\n      if (result.success && result.data) {\n        setUser(result.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('注册失败:', error);\n      return false;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n      setUser(null);\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n\n  const refreshUser = async (): Promise<void> => {\n    if (authService.isAuthenticated()) {\n      const result = await authService.getProfile();\n      if (result.success && result.user) {\n        setUser(result.user);\n      }\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}