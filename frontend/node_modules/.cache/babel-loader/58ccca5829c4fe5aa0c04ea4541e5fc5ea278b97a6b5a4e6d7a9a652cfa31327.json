{"ast":null,"code":"/**\n * 股票数据缓存工具类\n * 支持交易时间和非交易时间的不同缓存策略\n */\n\nclass StockCache {\n  constructor() {\n    this.TRADING_CACHE_DURATION = 2;\n    // 2分钟\n    this.NON_TRADING_CACHE_DURATION = 30;\n    // 30分钟\n    this.CACHE_PREFIX = 'stock_cache_';\n  }\n  /**\n   * 判断当前是否为交易时间\n   * 交易时间：周一到周五 9:30-11:30, 13:00-15:00\n   */\n  isTradingTime() {\n    const now = new Date();\n    const day = now.getDay(); // 0=周日, 1=周一, ..., 6=周六\n    const hour = now.getHours();\n    const minute = now.getMinutes();\n    const timeInMinutes = hour * 60 + minute;\n\n    // 非工作日\n    if (day === 0 || day === 6) {\n      return false;\n    }\n\n    // 上午交易时间：9:30-11:30\n    const morningStart = 9 * 60 + 30; // 9:30\n    const morningEnd = 11 * 60 + 30; // 11:30\n\n    // 下午交易时间：13:00-15:00\n    const afternoonStart = 13 * 60; // 13:00\n    const afternoonEnd = 15 * 60; // 15:00\n\n    return timeInMinutes >= morningStart && timeInMinutes <= morningEnd || timeInMinutes >= afternoonStart && timeInMinutes <= afternoonEnd;\n  }\n\n  /**\n   * 获取缓存过期时间\n   */\n  getExpireTime(options) {\n    const isTrading = this.isTradingTime();\n    const duration = isTrading ? (options === null || options === void 0 ? void 0 : options.tradingCacheDuration) || this.TRADING_CACHE_DURATION : (options === null || options === void 0 ? void 0 : options.nonTradingCacheDuration) || this.NON_TRADING_CACHE_DURATION;\n    return Date.now() + duration * 60 * 1000;\n  }\n\n  /**\n   * 生成缓存键名\n   */\n  getCacheKey(key) {\n    return `${this.CACHE_PREFIX}${key}`;\n  }\n\n  /**\n   * 设置缓存\n   */\n  set(key, data, options) {\n    try {\n      const cacheItem = {\n        data,\n        timestamp: Date.now(),\n        expireTime: this.getExpireTime(options)\n      };\n      localStorage.setItem(this.getCacheKey(key), JSON.stringify(cacheItem));\n    } catch (error) {\n      console.warn('缓存设置失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存\n   */\n  get(key) {\n    try {\n      const cached = localStorage.getItem(this.getCacheKey(key));\n      if (!cached) {\n        return null;\n      }\n      const cacheItem = JSON.parse(cached);\n\n      // 检查是否过期\n      if (Date.now() > cacheItem.expireTime) {\n        this.remove(key);\n        return null;\n      }\n      return cacheItem.data;\n    } catch (error) {\n      console.warn('缓存读取失败:', error);\n      this.remove(key);\n      return null;\n    }\n  }\n\n  /**\n   * 获取缓存信息（包含时间戳）\n   */\n  getCacheInfo(key) {\n    try {\n      const cached = localStorage.getItem(this.getCacheKey(key));\n      if (!cached) {\n        return null;\n      }\n      const cacheItem = JSON.parse(cached);\n\n      // 检查是否过期\n      if (Date.now() > cacheItem.expireTime) {\n        this.remove(key);\n        return null;\n      }\n      return {\n        data: cacheItem.data,\n        timestamp: cacheItem.timestamp\n      };\n    } catch (error) {\n      console.warn('缓存信息读取失败:', error);\n      this.remove(key);\n      return null;\n    }\n  }\n\n  /**\n   * 检查缓存是否存在且有效\n   */\n  has(key) {\n    return this.get(key) !== null;\n  }\n\n  /**\n   * 删除指定缓存\n   */\n  remove(key) {\n    try {\n      localStorage.removeItem(this.getCacheKey(key));\n    } catch (error) {\n      console.warn('缓存删除失败:', error);\n    }\n  }\n\n  /**\n   * 清空所有股票相关缓存\n   */\n  clear() {\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_PREFIX)) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.warn('缓存清空失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats() {\n    let count = 0;\n    let totalSize = 0;\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_PREFIX)) {\n          count++;\n          const value = localStorage.getItem(key);\n          if (value) {\n            totalSize += value.length;\n          }\n        }\n      });\n    } catch (error) {\n      console.warn('缓存统计失败:', error);\n    }\n    return {\n      count,\n      totalSize\n    };\n  }\n\n  /**\n   * 格式化时间戳为可读格式\n   */\n  formatTimestamp(timestamp) {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - timestamp;\n\n    // 如果是今天\n    if (date.toDateString() === now.toDateString()) {\n      if (diff < 60000) {\n        // 1分钟内\n        return '刚刚';\n      } else if (diff < 3600000) {\n        // 1小时内\n        const minutes = Math.floor(diff / 60000);\n        return `${minutes}分钟前`;\n      } else {\n        return date.toLocaleTimeString('zh-CN', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      }\n    } else {\n      return date.toLocaleString('zh-CN', {\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }\n}\n\n// 导出单例实例\nexport const stockCache = new StockCache();\n\n// 导出类型\n\n// 导出常用的缓存键名\nexport const CACHE_KEYS = {\n  WATCHLIST: 'watchlist',\n  MARKET_OVERVIEW: 'market_overview',\n  STOCK_DETAIL: code => `stock_detail_${code}`,\n  STOCK_HISTORY: (code, period) => `stock_history_${code}_${period}`,\n  SEARCH_RESULTS: query => `search_${query}`\n};","map":{"version":3,"names":["StockCache","constructor","TRADING_CACHE_DURATION","NON_TRADING_CACHE_DURATION","CACHE_PREFIX","isTradingTime","now","Date","day","getDay","hour","getHours","minute","getMinutes","timeInMinutes","morningStart","morningEnd","afternoonStart","afternoonEnd","getExpireTime","options","isTrading","duration","tradingCacheDuration","nonTradingCacheDuration","getCacheKey","key","set","data","cacheItem","timestamp","expireTime","localStorage","setItem","JSON","stringify","error","console","warn","get","cached","getItem","parse","remove","getCacheInfo","has","removeItem","clear","keys","Object","forEach","startsWith","getStats","count","totalSize","value","length","formatTimestamp","date","diff","getTime","toDateString","minutes","Math","floor","toLocaleTimeString","toLocaleString","month","stockCache","CACHE_KEYS","WATCHLIST","MARKET_OVERVIEW","STOCK_DETAIL","code","STOCK_HISTORY","period","SEARCH_RESULTS","query"],"sources":["E:/AICode/StockInsight/frontend/src/utils/stockCache.ts"],"sourcesContent":["/**\n * 股票数据缓存工具类\n * 支持交易时间和非交易时间的不同缓存策略\n */\n\nexport interface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  expireTime: number;\n}\n\nexport interface CacheOptions {\n  /** 交易时间缓存时长（分钟），默认2分钟 */\n  tradingCacheDuration?: number;\n  /** 非交易时间缓存时长（分钟），默认30分钟 */\n  nonTradingCacheDuration?: number;\n}\n\nclass StockCache {\n  private readonly TRADING_CACHE_DURATION = 2; // 2分钟\n  private readonly NON_TRADING_CACHE_DURATION = 30; // 30分钟\n  private readonly CACHE_PREFIX = 'stock_cache_';\n\n  /**\n   * 判断当前是否为交易时间\n   * 交易时间：周一到周五 9:30-11:30, 13:00-15:00\n   */\n  private isTradingTime(): boolean {\n    const now = new Date();\n    const day = now.getDay(); // 0=周日, 1=周一, ..., 6=周六\n    const hour = now.getHours();\n    const minute = now.getMinutes();\n    const timeInMinutes = hour * 60 + minute;\n\n    // 非工作日\n    if (day === 0 || day === 6) {\n      return false;\n    }\n\n    // 上午交易时间：9:30-11:30\n    const morningStart = 9 * 60 + 30; // 9:30\n    const morningEnd = 11 * 60 + 30;   // 11:30\n    \n    // 下午交易时间：13:00-15:00\n    const afternoonStart = 13 * 60;    // 13:00\n    const afternoonEnd = 15 * 60;      // 15:00\n\n    return (timeInMinutes >= morningStart && timeInMinutes <= morningEnd) ||\n           (timeInMinutes >= afternoonStart && timeInMinutes <= afternoonEnd);\n  }\n\n  /**\n   * 获取缓存过期时间\n   */\n  private getExpireTime(options?: CacheOptions): number {\n    const isTrading = this.isTradingTime();\n    const duration = isTrading \n      ? (options?.tradingCacheDuration || this.TRADING_CACHE_DURATION)\n      : (options?.nonTradingCacheDuration || this.NON_TRADING_CACHE_DURATION);\n    \n    return Date.now() + duration * 60 * 1000;\n  }\n\n  /**\n   * 生成缓存键名\n   */\n  private getCacheKey(key: string): string {\n    return `${this.CACHE_PREFIX}${key}`;\n  }\n\n  /**\n   * 设置缓存\n   */\n  set<T>(key: string, data: T, options?: CacheOptions): void {\n    try {\n      const cacheItem: CacheItem<T> = {\n        data,\n        timestamp: Date.now(),\n        expireTime: this.getExpireTime(options)\n      };\n      \n      localStorage.setItem(this.getCacheKey(key), JSON.stringify(cacheItem));\n    } catch (error) {\n      console.warn('缓存设置失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存\n   */\n  get<T>(key: string): T | null {\n    try {\n      const cached = localStorage.getItem(this.getCacheKey(key));\n      if (!cached) {\n        return null;\n      }\n\n      const cacheItem: CacheItem<T> = JSON.parse(cached);\n      \n      // 检查是否过期\n      if (Date.now() > cacheItem.expireTime) {\n        this.remove(key);\n        return null;\n      }\n\n      return cacheItem.data;\n    } catch (error) {\n      console.warn('缓存读取失败:', error);\n      this.remove(key);\n      return null;\n    }\n  }\n\n  /**\n   * 获取缓存信息（包含时间戳）\n   */\n  getCacheInfo<T>(key: string): { data: T; timestamp: number } | null {\n    try {\n      const cached = localStorage.getItem(this.getCacheKey(key));\n      if (!cached) {\n        return null;\n      }\n\n      const cacheItem: CacheItem<T> = JSON.parse(cached);\n      \n      // 检查是否过期\n      if (Date.now() > cacheItem.expireTime) {\n        this.remove(key);\n        return null;\n      }\n\n      return {\n        data: cacheItem.data,\n        timestamp: cacheItem.timestamp\n      };\n    } catch (error) {\n      console.warn('缓存信息读取失败:', error);\n      this.remove(key);\n      return null;\n    }\n  }\n\n  /**\n   * 检查缓存是否存在且有效\n   */\n  has(key: string): boolean {\n    return this.get(key) !== null;\n  }\n\n  /**\n   * 删除指定缓存\n   */\n  remove(key: string): void {\n    try {\n      localStorage.removeItem(this.getCacheKey(key));\n    } catch (error) {\n      console.warn('缓存删除失败:', error);\n    }\n  }\n\n  /**\n   * 清空所有股票相关缓存\n   */\n  clear(): void {\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_PREFIX)) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.warn('缓存清空失败:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats(): { count: number; totalSize: number } {\n    let count = 0;\n    let totalSize = 0;\n\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith(this.CACHE_PREFIX)) {\n          count++;\n          const value = localStorage.getItem(key);\n          if (value) {\n            totalSize += value.length;\n          }\n        }\n      });\n    } catch (error) {\n      console.warn('缓存统计失败:', error);\n    }\n\n    return { count, totalSize };\n  }\n\n  /**\n   * 格式化时间戳为可读格式\n   */\n  formatTimestamp(timestamp: number): string {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - timestamp;\n    \n    // 如果是今天\n    if (date.toDateString() === now.toDateString()) {\n      if (diff < 60000) { // 1分钟内\n        return '刚刚';\n      } else if (diff < 3600000) { // 1小时内\n        const minutes = Math.floor(diff / 60000);\n        return `${minutes}分钟前`;\n      } else {\n        return date.toLocaleTimeString('zh-CN', { \n          hour: '2-digit', \n          minute: '2-digit' \n        });\n      }\n    } else {\n      return date.toLocaleString('zh-CN', {\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }\n}\n\n// 导出单例实例\nexport const stockCache = new StockCache();\n\n// 导出类型\nexport type { StockCache };\n\n// 导出常用的缓存键名\nexport const CACHE_KEYS = {\n  WATCHLIST: 'watchlist',\n  MARKET_OVERVIEW: 'market_overview',\n  STOCK_DETAIL: (code: string) => `stock_detail_${code}`,\n  STOCK_HISTORY: (code: string, period: string) => `stock_history_${code}_${period}`,\n  SEARCH_RESULTS: (query: string) => `search_${query}`,\n} as const;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}