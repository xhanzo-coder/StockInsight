{"ast":null,"code":"import axios from 'axios';\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\n\n// 令牌管理\nconst TOKEN_KEY = 'auth_token';\nconst TOKEN_EXPIRY_KEY = 'auth_token_expiry';\nexport const tokenManager = {\n  getToken: () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    const expiry = localStorage.getItem(TOKEN_EXPIRY_KEY);\n\n    // 检查令牌是否过期\n    if (token && expiry) {\n      const expiryTime = parseInt(expiry, 10);\n      if (Date.now() > expiryTime) {\n        console.log('令牌已过期，清除本地存储');\n        localStorage.removeItem(TOKEN_KEY);\n        localStorage.removeItem(TOKEN_EXPIRY_KEY);\n        return null;\n      }\n    }\n    return token;\n  },\n  setToken: token => {\n    localStorage.setItem(TOKEN_KEY, token);\n\n    // 设置令牌过期时间（24小时后）\n    const expiryTime = Date.now() + 24 * 60 * 60 * 1000;\n    localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());\n    console.log('令牌已保存，过期时间:', new Date(expiryTime).toLocaleString());\n  },\n  removeToken: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(TOKEN_EXPIRY_KEY);\n    console.log('令牌已移除');\n  },\n  isAuthenticated: () => {\n    return !!tokenManager.getToken(); // 使用getToken方法，它会检查过期时间\n  }\n};\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // 直接连接后端，绕过代理问题\n  timeout: 10000,\n  // 10秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// 请求拦截器 - 添加认证令牌\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n\n  // 添加认证令牌\n  const token = tokenManager.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理认证错误\napi.interceptors.response.use(response => {\n  console.log('API响应:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error('API错误:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, error.message);\n\n  // 处理认证错误\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    // 令牌过期或无效，清除本地令牌\n    tokenManager.removeToken();\n\n    // 不要自动刷新页面，而是让AuthContext处理重定向\n    // 移除自动刷新: window.location.reload();\n  }\n  return Promise.reject(error);\n});\n\n// 数据类型定义\n\n// API服务类\nclass ApiService {\n  // 健康检查\n  async healthCheck() {\n    const response = await api.get('/health');\n    return response.data;\n  }\n\n  // 获取关注列表\n  async getWatchlist(forceRefresh = false) {\n    const response = await api.get('/watchlist');\n    return response.data;\n  }\n\n  // 搜索股票\n  async searchStocks(keyword, limit = 10) {\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的搜索结果: ${keyword}`);\n      return cached;\n    }\n    const response = await api.get('/stocks/search', {\n      params: {\n        keyword,\n        limit\n      }\n    });\n    const data = response.data;\n\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\n    stockCache.set(cacheKey, data, {\n      tradingCacheDuration: 5,\n      nonTradingCacheDuration: 5\n    });\n    return data;\n  }\n\n  // 获取股票详情\n  async getStockDetail(code) {\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的股票详情: ${code}`);\n      return cached;\n    }\n    const response = await api.get(`/stocks/${code}`);\n    const data = response.data;\n\n    // 缓存股票详情\n    stockCache.set(cacheKey, data);\n    return data;\n  }\n\n  // 获取股票历史数据\n  async getStockHistory(code, period = '1y') {\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\n      return cached;\n    }\n    const response = await api.get(`/stocks/${code}/history`, {\n      params: {\n        period\n      }\n    });\n    const data = response.data;\n\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\n    stockCache.set(cacheKey, data, {\n      tradingCacheDuration: 10,\n      nonTradingCacheDuration: 60\n    });\n    return data;\n  }\n\n  // 批量获取股票数据\n  async getBatchStocks(codes) {\n    const response = await api.post('/stocks/batch', {\n      codes\n    });\n    return response.data;\n  }\n\n  // 添加股票到关注列表\n  async addToWatchlist(code, industry = '') {\n    const response = await api.post('/watchlist', {\n      code,\n      industry\n    });\n    return response.data;\n  }\n\n  // 从关注列表删除股票\n  async removeFromWatchlist(code) {\n    const response = await api.delete(`/watchlist/${code}`);\n    return response.data;\n  }\n\n  // 切换股票置顶状态\n  async togglePinStock(code) {\n    const response = await api.post(`/watchlist/${code}/pin`);\n    return response.data;\n  }\n\n  // 获取市场概览\n  async getMarketOverview() {\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log('使用缓存的市场概览数据');\n      return cached;\n    }\n    const response = await api.get('/market/overview');\n    const data = response.data;\n\n    // 缓存市场概览\n    stockCache.set(cacheKey, data);\n    return data;\n  }\n\n  // 清空缓存\n  async clearCache() {\n    const response = await api.post('/cache/clear');\n    return response.data;\n  }\n\n  // 获取API统计\n  async getApiStats(hours = 24) {\n    const response = await api.get('/stats', {\n      params: {\n        hours\n      }\n    });\n    return response.data;\n  }\n}\n\n// 导出API服务实例\nexport const apiService = new ApiService();\nexport default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","TOKEN_KEY","TOKEN_EXPIRY_KEY","tokenManager","getToken","token","localStorage","getItem","expiry","expiryTime","parseInt","Date","now","console","log","removeItem","setToken","setItem","toString","toLocaleString","removeToken","isAuthenticated","api","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","_config$method","method","toUpperCase","url","Authorization","error","Promise","reject","response","status","_error$response","_error$config","_error$response2","message","ApiService","healthCheck","get","data","getWatchlist","forceRefresh","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","code","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","togglePinStock","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\n\r\n// 令牌管理\r\nconst TOKEN_KEY = 'auth_token';\r\nconst TOKEN_EXPIRY_KEY = 'auth_token_expiry';\r\n\r\nexport const tokenManager = {\r\n  getToken: (): string | null => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    const expiry = localStorage.getItem(TOKEN_EXPIRY_KEY);\r\n    \r\n    // 检查令牌是否过期\r\n    if (token && expiry) {\r\n      const expiryTime = parseInt(expiry, 10);\r\n      if (Date.now() > expiryTime) {\r\n        console.log('令牌已过期，清除本地存储');\r\n        localStorage.removeItem(TOKEN_KEY);\r\n        localStorage.removeItem(TOKEN_EXPIRY_KEY);\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    return token;\r\n  },\r\n  \r\n  setToken: (token: string): void => {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    \r\n    // 设置令牌过期时间（24小时后）\r\n    const expiryTime = Date.now() + 24 * 60 * 60 * 1000;\r\n    localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());\r\n    console.log('令牌已保存，过期时间:', new Date(expiryTime).toLocaleString());\r\n  },\r\n  \r\n  removeToken: (): void => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(TOKEN_EXPIRY_KEY);\r\n    console.log('令牌已移除');\r\n  },\r\n  \r\n  isAuthenticated: (): boolean => {\r\n    return !!tokenManager.getToken(); // 使用getToken方法，它会检查过期时间\r\n  }\r\n};\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // 直接连接后端，绕过代理问题\r\n  timeout: 10000, // 10秒超时\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// 请求拦截器 - 添加认证令牌\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\r\n    \r\n    // 添加认证令牌\r\n    const token = tokenManager.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 处理认证错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    \r\n    // 处理认证错误\r\n    if (error.response?.status === 401) {\r\n      // 令牌过期或无效，清除本地令牌\r\n      tokenManager.removeToken();\r\n      \r\n      // 不要自动刷新页面，而是让AuthContext处理重定向\r\n      // 移除自动刷新: window.location.reload();\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n  is_pinned?: boolean;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    const response = await api.get('/watchlist');\r\n    return response.data;\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 切换股票置顶状态\r\n  async togglePinStock(code: string): Promise<ApiResponse<{ code: string; is_pinned: boolean }>> {\r\n    const response = await api.post(`/watchlist/${code}/pin`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}