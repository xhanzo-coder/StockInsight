{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('API响应:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config;\n  console.error('API错误:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, error.message);\n  return Promise.reject(error);\n});\n\n// 数据类型定义\n\n// API服务类\nclass ApiService {\n  // 健康检查\n  async healthCheck() {\n    const response = await api.get('/health');\n    return response.data;\n  }\n\n  // 获取关注列表\n  async getWatchlist() {\n    const response = await api.get('/watchlist');\n    return response.data;\n  }\n\n  // 搜索股票\n  async searchStocks(keyword, limit = 10) {\n    const response = await api.get('/stocks/search', {\n      params: {\n        keyword,\n        limit\n      }\n    });\n    return response.data;\n  }\n\n  // 获取股票详情\n  async getStockDetail(code) {\n    const response = await api.get(`/stocks/${code}`);\n    return response.data;\n  }\n\n  // 获取股票历史数据\n  async getStockHistory(code, period = '1y') {\n    const response = await api.get(`/stocks/${code}/history`, {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  }\n\n  // 批量获取股票数据\n  async getBatchStocks(codes) {\n    const response = await api.post('/stocks/batch', {\n      codes\n    });\n    return response.data;\n  }\n\n  // 添加股票到关注列表\n  async addToWatchlist(code, industry = '') {\n    const response = await api.post('/watchlist', {\n      code,\n      industry\n    });\n    return response.data;\n  }\n\n  // 从关注列表删除股票\n  async removeFromWatchlist(code) {\n    const response = await api.delete(`/watchlist/${code}`);\n    return response.data;\n  }\n\n  // 获取市场概览\n  async getMarketOverview() {\n    const response = await api.get('/market/overview');\n    return response.data;\n  }\n\n  // 清空缓存\n  async clearCache() {\n    const response = await api.post('/cache/clear');\n    return response.data;\n  }\n\n  // 获取API统计\n  async getApiStats(hours = 24) {\n    const response = await api.get('/stats', {\n      params: {\n        hours\n      }\n    });\n    return response.data;\n  }\n}\n\n// 导出API服务实例\nexport const apiService = new ApiService();\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$config","message","ApiService","healthCheck","get","data","getWatchlist","searchStocks","keyword","limit","params","getStockDetail","code","getStockHistory","period","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","getMarketOverview","clearCache","getApiStats","hours","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    console.log('API响应:', response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\n    return Promise.reject(error);\n  }\n);\n\n// 数据类型定义\nexport interface StockInfo {\n  code: string;\n  name: string;\n  industry: string;\n  current_price: number;\n  change_percent: number;\n  change_amount: number;\n  market_cap: string;\n  pe_ratio_ttm: number;\n  roe: number;\n  pb_ratio: number;\n  dividend_payout_ratio: number;\n  correction_factor: number;\n  corrected_pe: number;\n  theoretical_price: number;\n  added_time: string;\n  updated_time: string;\n}\n\nexport interface StockDetail {\n  code: string;\n  name: string;\n  price: number;\n  change_percent: number;\n  change_amount: number;\n  volume: number;\n  turnover: number;\n  high: number;\n  low: number;\n  open: number;\n  yesterday_close: number;\n  market_cap: string;\n  pe_ratio: number;\n  pb_ratio: number;\n  roe: number;\n  eps: number;\n  bps: number;\n  dividend_yield: number;\n  pe_ratio_ttm?: number;\n  dividend_payout_ratio?: number;\n  correction_factor?: number;\n  corrected_pe?: number;\n  theoretical_price?: number;\n  timestamp: string;\n}\n\nexport interface HistoryData {\n  date: string;\n  open: number;\n  close: number;\n  high: number;\n  low: number;\n  volume: number;\n  turnover: number;\n  change_percent: number;\n  change_amount: number;\n}\n\nexport interface SearchResult {\n  code: string;\n  name: string;\n  price: number;\n  change_percent: number;\n  market_cap?: string;\n  is_mock_data?: boolean;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n  count?: number;\n  error_code?: string;\n  error?: string;\n}\n\n// API服务类\nclass ApiService {\n  // 健康检查\n  async healthCheck(): Promise<ApiResponse<any>> {\n    const response = await api.get('/health');\n    return response.data;\n  }\n\n  // 获取关注列表\n  async getWatchlist(): Promise<ApiResponse<StockInfo[]>> {\n    const response = await api.get('/watchlist');\n    return response.data;\n  }\n\n  // 搜索股票\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\n    const response = await api.get('/stocks/search', {\n      params: { keyword, limit }\n    });\n    return response.data;\n  }\n\n  // 获取股票详情\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\n    const response = await api.get(`/stocks/${code}`);\n    return response.data;\n  }\n\n  // 获取股票历史数据\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\n    const response = await api.get(`/stocks/${code}/history`, {\n      params: { period }\n    });\n    return response.data;\n  }\n\n  // 批量获取股票数据\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\n    const response = await api.post('/stocks/batch', { codes });\n    return response.data;\n  }\n\n  // 添加股票到关注列表\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\n    const response = await api.post('/watchlist', { code, industry });\n    return response.data;\n  }\n\n  // 从关注列表删除股票\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\n    const response = await api.delete(`/watchlist/${code}`);\n    return response.data;\n  }\n\n  // 获取市场概览\n  async getMarketOverview(): Promise<ApiResponse<any>> {\n    const response = await api.get('/market/overview');\n    return response.data;\n  }\n\n  // 清空缓存\n  async clearCache(): Promise<ApiResponse<any>> {\n    const response = await api.post('/cache/clear');\n    return response.data;\n  }\n\n  // 获取API统计\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\n    const response = await api.get('/stats', {\n      params: { hours }\n    });\n    return response.data;\n  }\n}\n\n// 导出API服务实例\nexport const apiService = new ApiService();\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAAF,cAAA,GAAED,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,EAAEL,MAAM,CAACM,GAAG,CAAC;EAC/D,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAK;EACZR,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEO,QAAQ,CAACC,MAAM,EAAED,QAAQ,CAACV,MAAM,CAACM,GAAG,CAAC;EAC3D,OAAOI,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAK,eAAA,EAAAC,aAAA;EACTX,OAAO,CAACK,KAAK,CAAC,QAAQ,GAAAK,eAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBD,MAAM,GAAAE,aAAA,GAAEN,KAAK,CAACP,MAAM,cAAAa,aAAA,uBAAZA,aAAA,CAAcP,GAAG,EAAEC,KAAK,CAACO,OAAO,CAAC;EACjF,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;;AA6EA;AACA,MAAMQ,UAAU,CAAC;EACf;EACA,MAAMC,WAAWA,CAAA,EAA8B;IAC7C,MAAMN,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOP,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMC,YAAYA,CAAA,EAAsC;IACtD,MAAMT,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,YAAY,CAAC;IAC5C,OAAOP,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAME,YAAYA,CAACC,OAAe,EAAEC,KAAa,GAAG,EAAE,EAAwC;IAC5F,MAAMZ,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,gBAAgB,EAAE;MAC/CM,MAAM,EAAE;QAAEF,OAAO;QAAEC;MAAM;IAC3B,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMM,cAAcA,CAACC,IAAY,EAAqC;IACpE,MAAMf,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,WAAWQ,IAAI,EAAE,CAAC;IACjD,OAAOf,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMQ,eAAeA,CAACD,IAAY,EAAEE,MAAc,GAAG,IAAI,EAAuC;IAC9F,MAAMjB,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,WAAWQ,IAAI,UAAU,EAAE;MACxDF,MAAM,EAAE;QAAEI;MAAO;IACnB,CAAC,CAAC;IACF,OAAOjB,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMU,cAAcA,CAACC,KAAe,EAA6B;IAC/D,MAAMnB,QAAQ,GAAG,MAAMlB,GAAG,CAACsC,IAAI,CAAC,eAAe,EAAE;MAAED;IAAM,CAAC,CAAC;IAC3D,OAAOnB,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMa,cAAcA,CAACN,IAAY,EAAEO,QAAgB,GAAG,EAAE,EAA6B;IACnF,MAAMtB,QAAQ,GAAG,MAAMlB,GAAG,CAACsC,IAAI,CAAC,YAAY,EAAE;MAAEL,IAAI;MAAEO;IAAS,CAAC,CAAC;IACjE,OAAOtB,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMe,mBAAmBA,CAACR,IAAY,EAA6B;IACjE,MAAMf,QAAQ,GAAG,MAAMlB,GAAG,CAAC0C,MAAM,CAAC,cAAcT,IAAI,EAAE,CAAC;IACvD,OAAOf,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMiB,iBAAiBA,CAAA,EAA8B;IACnD,MAAMzB,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOP,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMkB,UAAUA,CAAA,EAA8B;IAC5C,MAAM1B,QAAQ,GAAG,MAAMlB,GAAG,CAACsC,IAAI,CAAC,cAAc,CAAC;IAC/C,OAAOpB,QAAQ,CAACQ,IAAI;EACtB;;EAEA;EACA,MAAMmB,WAAWA,CAACC,KAAa,GAAG,EAAE,EAA6B;IAC/D,MAAM5B,QAAQ,GAAG,MAAMlB,GAAG,CAACyB,GAAG,CAAC,QAAQ,EAAE;MACvCM,MAAM,EAAE;QAAEe;MAAM;IAClB,CAAC,CAAC;IACF,OAAO5B,QAAQ,CAACQ,IAAI;EACtB;AACF;;AAEA;AACA,OAAO,MAAMqB,UAAU,GAAG,IAAIxB,UAAU,CAAC,CAAC;AAC1C,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}