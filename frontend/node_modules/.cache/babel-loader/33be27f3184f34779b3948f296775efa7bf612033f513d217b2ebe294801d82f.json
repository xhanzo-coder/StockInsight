{"ast":null,"code":"import axios from'axios';import{stockCache,CACHE_KEYS}from'../utils/stockCache';import{message}from'antd';// 令牌管理\nconst TOKEN_KEY='auth_token';const USER_INFO_KEY='userInfo';const AUTH_LAST_VERIFIED_KEY='auth_last_verified';// 配置常量\nconst REQUEST_TIMEOUT=15000;// 请求超时时间（毫秒）\nconst MAX_RETRY_COUNT=2;// 最大重试次数\nconst RETRY_DELAY=1000;// 重试延迟（毫秒）\nexport const tokenManager={getToken:()=>{return localStorage.getItem(TOKEN_KEY);},setToken:token=>{if(!token){console.warn('尝试设置空token，操作被忽略');return;}localStorage.setItem(TOKEN_KEY,token);// 记录token设置时间\nlocalStorage.setItem('token_timestamp',Date.now().toString());},removeToken:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem('token_timestamp');},isAuthenticated:()=>{const token=localStorage.getItem(TOKEN_KEY);if(!token)return false;// 检查token格式是否有效（简单验证）\ntry{// JWT格式验证：确保token是由三部分组成的点分隔字符串\nconst parts=token.split('.');if(parts.length!==3){console.warn('无效的token格式，清除token');tokenManager.removeToken();return false;}// 检查token是否过期（通过解析JWT的payload）\ntry{const payload=JSON.parse(atob(parts[1]));if(payload.exp&&payload.exp*1000<Date.now()){console.warn('token已过期，清除token');tokenManager.removeToken();return false;}}catch(e){console.warn('无法解析token payload，但继续使用token');}return true;}catch(e){console.error('token验证出错:',e);return false;}},// 获取token过期时间\ngetTokenExpiration:()=>{const token=localStorage.getItem(TOKEN_KEY);if(!token)return null;try{const parts=token.split('.');if(parts.length!==3)return null;const payload=JSON.parse(atob(parts[1]));return payload.exp?payload.exp*1000:null;}catch(e){console.error('获取token过期时间失败:',e);return null;}},// 检查token是否即将过期（5分钟内）\nisTokenExpiringSoon:()=>{const expiration=tokenManager.getTokenExpiration();if(!expiration)return false;const fiveMinutes=5*60*1000;return expiration-Date.now()<fiveMinutes;}};// 创建axios实例\nconst api=axios.create({baseURL:'http://localhost:5000/api',// 直接连接后端，绕过代理问题\ntimeout:REQUEST_TIMEOUT,// 15秒超时\nheaders:{'Content-Type':'application/json'},withCredentials:false});// 请求重试函数\nconst retryRequest=async function(config){let retryCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{return await axios(config);}catch(error){// 只有在网络错误或5xx服务器错误时重试\nconst isNetworkError=!error.response;const isServerError=error.response&&error.response.status>=500;if((isNetworkError||isServerError)&&retryCount<MAX_RETRY_COUNT){console.log(`请求失败，${RETRY_DELAY/1000}秒后重试 (${retryCount+1}/${MAX_RETRY_COUNT})`);await new Promise(resolve=>setTimeout(resolve,RETRY_DELAY));return retryRequest(config,retryCount+1);}throw error;}};// 请求拦截器 - 添加认证令牌\napi.interceptors.request.use(config=>{var _config$method;// 添加请求时间戳，用于调试\nconfig.headers=config.headers||{};config.headers['X-Request-Time']=new Date().toISOString();console.log('API请求:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);// 添加认证令牌\nconst token=tokenManager.getToken();if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{console.error('请求拦截器错误:',error);return Promise.reject(error);});// 响应拦截器 - 处理认证错误\napi.interceptors.response.use(response=>{console.log('API响应:',response.status,response.config.url);return response;},error=>{var _error$response,_error$config,_error$response2;console.error('API错误:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,error.message);// 处理认证错误\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401){var _error$config2;console.warn('收到401未授权响应，清除认证状态');// 令牌过期或无效，清除本地令牌和用户信息\ntokenManager.removeToken();localStorage.removeItem(USER_INFO_KEY);localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);// 如果不是验证接口的请求，显示提示并重定向\nif(((_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.url)!=='/auth/verify'){message.error('登录已过期，请重新登录');// 使用延迟重定向，确保消息能够显示\nsetTimeout(()=>{// 保存当前URL，以便登录后返回\nconst currentPath=window.location.pathname;if(currentPath!=='/login'){sessionStorage.setItem('redirectAfterLogin',currentPath);}window.location.href='/login';},1500);}}// 处理网络错误\nelse if(!error.response){console.error('网络错误:',error.message);// 网络错误不自动清除认证状态\n}// 处理服务器错误\nelse if(error.response.status>=500){console.error('服务器错误:',error.response.status,error.response.data);message.error('服务器暂时不可用，请稍后重试');}return Promise.reject(error);});// 数据类型定义\n// API服务类\nclass ApiService{// 健康检查\nasync healthCheck(){const response=await api.get('/health');return response.data;}// 获取关注列表\nasync getWatchlist(){let forceRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const response=await api.get('/watchlist');return response.data;}// 搜索股票\nasync searchStocks(keyword){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const cacheKey=CACHE_KEYS.SEARCH_RESULTS(keyword);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的搜索结果: ${keyword}`);return cached;}const response=await api.get('/stocks/search',{params:{keyword,limit}});const data=response.data;// 缓存搜索结果 - 统一使用5分钟缓存时间\nstockCache.set(cacheKey,data,{tradingCacheDuration:5,nonTradingCacheDuration:5});return data;}// 获取股票详情\nasync getStockDetail(code){const cacheKey=CACHE_KEYS.STOCK_DETAIL(code);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的股票详情: ${code}`);return cached;}const response=await api.get(`/stocks/${code}`);const data=response.data;// 缓存股票详情\nstockCache.set(cacheKey,data);return data;}// 获取股票历史数据\nasync getStockHistory(code){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1y';const cacheKey=CACHE_KEYS.STOCK_HISTORY(code,period);// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log(`使用缓存的历史数据: ${code} - ${period}`);return cached;}const response=await api.get(`/stocks/${code}/history`,{params:{period}});const data=response.data;// 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\nstockCache.set(cacheKey,data,{tradingCacheDuration:10,nonTradingCacheDuration:60});return data;}// 批量获取股票数据\nasync getBatchStocks(codes){const response=await api.post('/stocks/batch',{codes});return response.data;}// 添加股票到关注列表\nasync addToWatchlist(code){let industry=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const response=await api.post('/watchlist',{code,industry});return response.data;}// 从关注列表删除股票\nasync removeFromWatchlist(code){const response=await api.delete(`/watchlist/${code}`);return response.data;}// 切换股票置顶状态\nasync togglePinStock(code){const response=await api.post(`/watchlist/${code}/pin`);return response.data;}// 获取市场概览\nasync getMarketOverview(){const cacheKey=CACHE_KEYS.MARKET_OVERVIEW;// 检查缓存\nconst cached=stockCache.get(cacheKey);if(cached){console.log('使用缓存的市场概览数据');return cached;}const response=await api.get('/market/overview');const data=response.data;// 缓存市场概览\nstockCache.set(cacheKey,data);return data;}// 清空缓存\nasync clearCache(){const response=await api.post('/cache/clear');return response.data;}// 获取API统计\nasync getApiStats(){let hours=arguments.length>0&&arguments[0]!==undefined?arguments[0]:24;const response=await api.get('/stats',{params:{hours}});return response.data;}}/**\r\n * 安全的API调用封装\r\n * 提供统一的错误处理和返回结构\r\n */export const safeApiCall=async apiCall=>{try{const result=await apiCall();return{success:true,data:result};}catch(error){var _error$response3,_error$response3$data;console.error('API调用失败:',error);// 检查是否为网络错误\nconst isNetworkError=!error.response;if(isNetworkError){return{success:false,error:'网络连接错误，请检查您的网络连接',networkError:true};}// 处理服务器返回的错误\nconst errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||error.message||'未知错误';return{success:false,error:errorMessage};}};// 导出API服务实例\nexport const apiService=new ApiService();export default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","message","TOKEN_KEY","USER_INFO_KEY","AUTH_LAST_VERIFIED_KEY","REQUEST_TIMEOUT","MAX_RETRY_COUNT","RETRY_DELAY","tokenManager","getToken","localStorage","getItem","setToken","token","console","warn","setItem","Date","now","toString","removeToken","removeItem","isAuthenticated","parts","split","length","payload","JSON","parse","atob","exp","e","error","getTokenExpiration","isTokenExpiringSoon","expiration","fiveMinutes","api","create","baseURL","timeout","headers","withCredentials","retryRequest","config","retryCount","arguments","undefined","isNetworkError","response","isServerError","status","log","Promise","resolve","setTimeout","interceptors","request","use","_config$method","toISOString","method","toUpperCase","url","Authorization","reject","_error$response","_error$config","_error$response2","_error$config2","currentPath","window","location","pathname","sessionStorage","href","data","ApiService","healthCheck","get","getWatchlist","forceRefresh","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","code","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","togglePinStock","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","safeApiCall","apiCall","result","success","_error$response3","_error$response3$data","networkError","errorMessage","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\nimport { message } from 'antd';\r\n\r\n// 令牌管理\r\nconst TOKEN_KEY = 'auth_token';\r\nconst USER_INFO_KEY = 'userInfo';\r\nconst AUTH_LAST_VERIFIED_KEY = 'auth_last_verified';\r\n\r\n// 配置常量\r\nconst REQUEST_TIMEOUT = 15000; // 请求超时时间（毫秒）\r\nconst MAX_RETRY_COUNT = 2; // 最大重试次数\r\nconst RETRY_DELAY = 1000; // 重试延迟（毫秒）\r\n\r\nexport const tokenManager = {\r\n  getToken: (): string | null => {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n  \r\n  setToken: (token: string): void => {\r\n    if (!token) {\r\n      console.warn('尝试设置空token，操作被忽略');\r\n      return;\r\n    }\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    // 记录token设置时间\r\n    localStorage.setItem('token_timestamp', Date.now().toString());\r\n  },\r\n  \r\n  removeToken: (): void => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('token_timestamp');\r\n  },\r\n  \r\n  isAuthenticated: (): boolean => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (!token) return false;\r\n    \r\n    // 检查token格式是否有效（简单验证）\r\n    try {\r\n      // JWT格式验证：确保token是由三部分组成的点分隔字符串\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) {\r\n        console.warn('无效的token格式，清除token');\r\n        tokenManager.removeToken();\r\n        return false;\r\n      }\r\n      \r\n      // 检查token是否过期（通过解析JWT的payload）\r\n      try {\r\n        const payload = JSON.parse(atob(parts[1]));\r\n        if (payload.exp && payload.exp * 1000 < Date.now()) {\r\n          console.warn('token已过期，清除token');\r\n          tokenManager.removeToken();\r\n          return false;\r\n        }\r\n      } catch (e) {\r\n        console.warn('无法解析token payload，但继续使用token');\r\n      }\r\n      \r\n      return true;\r\n    } catch (e) {\r\n      console.error('token验证出错:', e);\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  // 获取token过期时间\r\n  getTokenExpiration: (): number | null => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (!token) return null;\r\n    \r\n    try {\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) return null;\r\n      \r\n      const payload = JSON.parse(atob(parts[1]));\r\n      return payload.exp ? payload.exp * 1000 : null;\r\n    } catch (e) {\r\n      console.error('获取token过期时间失败:', e);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  // 检查token是否即将过期（5分钟内）\r\n  isTokenExpiringSoon: (): boolean => {\r\n    const expiration = tokenManager.getTokenExpiration();\r\n    if (!expiration) return false;\r\n    \r\n    const fiveMinutes = 5 * 60 * 1000;\r\n    return expiration - Date.now() < fiveMinutes;\r\n  }\r\n};\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // 直接连接后端，绕过代理问题\r\n  timeout: REQUEST_TIMEOUT, // 15秒超时\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// 请求重试函数\r\nconst retryRequest = async (config: AxiosRequestConfig, retryCount: number = 0): Promise<AxiosResponse> => {\r\n  try {\r\n    return await axios(config);\r\n  } catch (error: any) {\r\n    // 只有在网络错误或5xx服务器错误时重试\r\n    const isNetworkError = !error.response;\r\n    const isServerError = error.response && error.response.status >= 500;\r\n    \r\n    if ((isNetworkError || isServerError) && retryCount < MAX_RETRY_COUNT) {\r\n      console.log(`请求失败，${RETRY_DELAY/1000}秒后重试 (${retryCount + 1}/${MAX_RETRY_COUNT})`);\r\n      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\r\n      return retryRequest(config, retryCount + 1);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 请求拦截器 - 添加认证令牌\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 添加请求时间戳，用于调试\r\n    config.headers = config.headers || {};\r\n    config.headers['X-Request-Time'] = new Date().toISOString();\r\n    \r\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\r\n    \r\n    // 添加认证令牌\r\n    const token = tokenManager.getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求拦截器错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器 - 处理认证错误\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    \r\n    // 处理认证错误\r\n    if (error.response?.status === 401) {\r\n      console.warn('收到401未授权响应，清除认证状态');\r\n      \r\n      // 令牌过期或无效，清除本地令牌和用户信息\r\n      tokenManager.removeToken();\r\n      localStorage.removeItem(USER_INFO_KEY);\r\n      localStorage.removeItem(AUTH_LAST_VERIFIED_KEY);\r\n      \r\n      // 如果不是验证接口的请求，显示提示并重定向\r\n      if (error.config?.url !== '/auth/verify') {\r\n        message.error('登录已过期，请重新登录');\r\n        \r\n        // 使用延迟重定向，确保消息能够显示\r\n        setTimeout(() => {\r\n          // 保存当前URL，以便登录后返回\r\n          const currentPath = window.location.pathname;\r\n          if (currentPath !== '/login') {\r\n            sessionStorage.setItem('redirectAfterLogin', currentPath);\r\n          }\r\n          \r\n          window.location.href = '/login';\r\n        }, 1500);\r\n      }\r\n    }\r\n    // 处理网络错误\r\n    else if (!error.response) {\r\n      console.error('网络错误:', error.message);\r\n      // 网络错误不自动清除认证状态\r\n    }\r\n    // 处理服务器错误\r\n    else if (error.response.status >= 500) {\r\n      console.error('服务器错误:', error.response.status, error.response.data);\r\n      message.error('服务器暂时不可用，请稍后重试');\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n  is_pinned?: boolean;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    const response = await api.get('/watchlist');\r\n    return response.data;\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 切换股票置顶状态\r\n  async togglePinStock(code: string): Promise<ApiResponse<{ code: string; is_pinned: boolean }>> {\r\n    const response = await api.post(`/watchlist/${code}/pin`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n/**\r\n * 安全的API调用封装\r\n * 提供统一的错误处理和返回结构\r\n */\r\nexport const safeApiCall = async <T>(apiCall: () => Promise<T>): Promise<{ success: boolean; data?: T; error?: string; networkError?: boolean }> => {\r\n  try {\r\n    const result = await apiCall();\r\n    return { success: true, data: result };\r\n  } catch (error: any) {\r\n    console.error('API调用失败:', error);\r\n    \r\n    // 检查是否为网络错误\r\n    const isNetworkError = !error.response;\r\n    if (isNetworkError) {\r\n      return {\r\n        success: false,\r\n        error: '网络连接错误，请检查您的网络连接',\r\n        networkError: true\r\n      };\r\n    }\r\n    \r\n    // 处理服务器返回的错误\r\n    const errorMessage = error.response?.data?.message || error.message || '未知错误';\r\n    return {\r\n      success: false,\r\n      error: errorMessage\r\n    };\r\n  }\r\n};\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}