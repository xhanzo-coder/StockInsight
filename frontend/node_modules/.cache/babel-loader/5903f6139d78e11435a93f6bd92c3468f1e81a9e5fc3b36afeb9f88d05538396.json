{"ast":null,"code":"import axios from 'axios';\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // 直接连接后端\n  timeout: 10000,\n  // 10秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('API响应:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config;\n  console.error('API错误:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, error.message);\n  return Promise.reject(error);\n});\n\n// 数据类型定义\n\n// API服务类\nclass ApiService {\n  // 健康检查\n  async healthCheck() {\n    const response = await api.get('/health');\n    return response.data;\n  }\n\n  // 获取关注列表\n  async getWatchlist(forceRefresh = false) {\n    const response = await api.get('/watchlist');\n    return response.data;\n  }\n\n  // 搜索股票\n  async searchStocks(keyword, limit = 10) {\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的搜索结果: ${keyword}`);\n      return cached;\n    }\n    const response = await api.get('/stocks/search', {\n      params: {\n        keyword,\n        limit\n      }\n    });\n    const data = response.data;\n\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\n    stockCache.set(cacheKey, data, {\n      tradingCacheDuration: 5,\n      nonTradingCacheDuration: 5\n    });\n    return data;\n  }\n\n  // 获取股票详情\n  async getStockDetail(code) {\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的股票详情: ${code}`);\n      return cached;\n    }\n    const response = await api.get(`/stocks/${code}`);\n    const data = response.data;\n\n    // 缓存股票详情\n    stockCache.set(cacheKey, data);\n    return data;\n  }\n\n  // 获取股票历史数据\n  async getStockHistory(code, period = '1y') {\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\n      return cached;\n    }\n    const response = await api.get(`/stocks/${code}/history`, {\n      params: {\n        period\n      }\n    });\n    const data = response.data;\n\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\n    stockCache.set(cacheKey, data, {\n      tradingCacheDuration: 10,\n      nonTradingCacheDuration: 60\n    });\n    return data;\n  }\n\n  // 批量获取股票数据\n  async getBatchStocks(codes) {\n    const response = await api.post('/stocks/batch', {\n      codes\n    });\n    return response.data;\n  }\n\n  // 添加股票到关注列表\n  async addToWatchlist(code, industry = '') {\n    const response = await api.post('/watchlist', {\n      code,\n      industry\n    });\n    return response.data;\n  }\n\n  // 从关注列表删除股票\n  async removeFromWatchlist(code) {\n    const response = await api.delete(`/watchlist/${code}`);\n    return response.data;\n  }\n\n  // 获取市场概览\n  async getMarketOverview() {\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\n\n    // 检查缓存\n    const cached = stockCache.get(cacheKey);\n    if (cached) {\n      console.log('使用缓存的市场概览数据');\n      return cached;\n    }\n    const response = await api.get('/market/overview');\n    const data = response.data;\n\n    // 缓存市场概览\n    stockCache.set(cacheKey, data);\n    return data;\n  }\n\n  // 清空缓存\n  async clearCache() {\n    const response = await api.post('/cache/clear');\n    return response.data;\n  }\n\n  // 获取API统计\n  async getApiStats(hours = 24) {\n    const response = await api.get('/stats', {\n      params: {\n        hours\n      }\n    });\n    return response.data;\n  }\n}\n\n// 导出API服务实例\nexport const apiService = new ApiService();\nexport default api;","map":{"version":3,"names":["axios","stockCache","CACHE_KEYS","api","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$config","message","ApiService","healthCheck","get","data","getWatchlist","forceRefresh","searchStocks","keyword","limit","cacheKey","SEARCH_RESULTS","cached","params","set","tradingCacheDuration","nonTradingCacheDuration","getStockDetail","code","STOCK_DETAIL","getStockHistory","period","STOCK_HISTORY","getBatchStocks","codes","post","addToWatchlist","industry","removeFromWatchlist","delete","getMarketOverview","MARKET_OVERVIEW","clearCache","getApiStats","hours","apiService"],"sources":["E:/AICode/StockInsight/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { stockCache, CACHE_KEYS } from '../utils/stockCache';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // 直接连接后端\r\n  timeout: 10000, // 10秒超时\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API响应:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API错误:', error.response?.status, error.config?.url, error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 数据类型定义\r\nexport interface StockInfo {\r\n  code: string;\r\n  name: string;\r\n  industry: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n  added_time: string;\r\n  updated_time: string;\r\n}\r\n\r\nexport interface StockDetail {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number;\r\n  correction_factor: number;\r\n  corrected_pe: number;\r\n  theoretical_price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface HistoryData {\r\n  date: string;\r\n  open: number;\r\n  close: number;\r\n  high: number;\r\n  low: number;\r\n  volume: number;\r\n  turnover: number;\r\n  change_percent: number;\r\n  change_amount: number;\r\n}\r\n\r\nexport interface SearchResult {\r\n  code: string;\r\n  name: string;\r\n  current_price: number;\r\n  change_percent: number;\r\n  market_cap: string;\r\n  pe_ratio_ttm: number;\r\n  roe: number | string;\r\n  market_earning_ratio: number;\r\n  pb_ratio: number;\r\n  dividend_payout_ratio: number | string;\r\n  correction_factor: number;\r\n  corrected_market_earning_ratio: number;\r\n  theoretical_price: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  count?: number;\r\n  error_code?: string;\r\n  error?: string;\r\n}\r\n\r\n// API服务类\r\nclass ApiService {\r\n  // 健康检查\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取关注列表\r\n  async getWatchlist(forceRefresh: boolean = false): Promise<ApiResponse<StockInfo[]>> {\r\n    const response = await api.get('/watchlist');\r\n    return response.data;\r\n  }\r\n\r\n  // 搜索股票\r\n  async searchStocks(keyword: string, limit: number = 10): Promise<ApiResponse<SearchResult[]>> {\r\n    const cacheKey = CACHE_KEYS.SEARCH_RESULTS(keyword);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<SearchResult[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的搜索结果: ${keyword}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/stocks/search', {\r\n      params: { keyword, limit }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存搜索结果 - 统一使用5分钟缓存时间\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 5,\r\n      nonTradingCacheDuration: 5\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票详情\r\n  async getStockDetail(code: string): Promise<ApiResponse<StockDetail>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_DETAIL(code);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<StockDetail>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的股票详情: ${code}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}`);\r\n    const data = response.data;\r\n    \r\n    // 缓存股票详情\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 获取股票历史数据\r\n  async getStockHistory(code: string, period: string = '1y'): Promise<ApiResponse<HistoryData[]>> {\r\n    const cacheKey = CACHE_KEYS.STOCK_HISTORY(code, period);\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<HistoryData[]>>(cacheKey);\r\n    if (cached) {\r\n      console.log(`使用缓存的历史数据: ${code} - ${period}`);\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get(`/stocks/${code}/history`, {\r\n      params: { period }\r\n    });\r\n    const data = response.data;\r\n    \r\n    // 缓存历史数据（历史数据相对稳定，可以缓存更长时间）\r\n    stockCache.set(cacheKey, data, {\r\n      tradingCacheDuration: 10,\r\n      nonTradingCacheDuration: 60\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 批量获取股票数据\r\n  async getBatchStocks(codes: string[]): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/stocks/batch', { codes });\r\n    return response.data;\r\n  }\r\n\r\n  // 添加股票到关注列表\r\n  async addToWatchlist(code: string, industry: string = ''): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/watchlist', { code, industry });\r\n    return response.data;\r\n  }\r\n\r\n  // 从关注列表删除股票\r\n  async removeFromWatchlist(code: string): Promise<ApiResponse<any>> {\r\n    const response = await api.delete(`/watchlist/${code}`);\r\n    return response.data;\r\n  }\r\n\r\n  // 获取市场概览\r\n  async getMarketOverview(): Promise<ApiResponse<any>> {\r\n    const cacheKey = CACHE_KEYS.MARKET_OVERVIEW;\r\n    \r\n    // 检查缓存\r\n    const cached = stockCache.get<ApiResponse<any>>(cacheKey);\r\n    if (cached) {\r\n      console.log('使用缓存的市场概览数据');\r\n      return cached;\r\n    }\r\n    \r\n    const response = await api.get('/market/overview');\r\n    const data = response.data;\r\n    \r\n    // 缓存市场概览\r\n    stockCache.set(cacheKey, data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 清空缓存\r\n  async clearCache(): Promise<ApiResponse<any>> {\r\n    const response = await api.post('/cache/clear');\r\n    return response.data;\r\n  }\r\n\r\n  // 获取API统计\r\n  async getApiStats(hours: number = 24): Promise<ApiResponse<any>> {\r\n    const response = await api.get('/stats', {\r\n      params: { hours }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// 导出API服务实例\r\nexport const apiService = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}